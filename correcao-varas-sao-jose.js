#!/usr/bin/env node

/**
 * üîß Corre√ß√£o Espec√≠fica - Varas de S√£o Jos√© dos Campos
 * 
 * Implementa solu√ß√µes para resolver o problema das varas 2¬™, 3¬™, 4¬™ e 5¬™
 * de S√£o Jos√© dos Campos que entram mas n√£o buscam/vinculam ao perito
 */

const fs = require('fs');
const path = require('path');

class CorrecaoVarasSaoJose {
    constructor() {
        this.varasProblematicas = [
            '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
            '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos', 
            '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
            '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos'
        ];
        
        this.backupDir = path.join(__dirname, 'backups', new Date().toISOString().replace(/[:.]/g, '-'));
        this.relatorio = {
            timestamp: new Date().toISOString(),
            correcoes: [],
            status: 'iniciando'
        };
    }

    async executarCorrecao() {
        console.log('üîß Iniciando corre√ß√£o das varas de S√£o Jos√© dos Campos...');
        
        try {
            // 1. Criar backup
            await this.criarBackup();
            
            // 2. Limpar cache espec√≠fico
            await this.limparCacheEspecifico();
            
            // 3. Implementar seletores espec√≠ficos
            await this.implementarSeletoresEspecificos();
            
            // 4. Configurar processamento sequencial
            await this.configurarProcessamentoSequencial();
            
            // 5. Ajustar timeouts espec√≠ficos
            await this.ajustarTimeoutsEspecificos();
            
            // 6. Criar configura√ß√£o especial
            await this.criarConfiguracaoEspecial();
            
            // 7. Gerar relat√≥rio final
            await this.gerarRelatorioFinal();
            
            this.relatorio.status = 'concluido';
            
        } catch (error) {
            console.error('‚ùå Erro durante corre√ß√£o:', error.message);
            this.relatorio.status = 'erro';
            this.relatorio.erro = error.message;
        }
    }

    async criarBackup() {
        console.log('\nüíæ Criando backup dos arquivos...');
        
        if (!fs.existsSync(this.backupDir)) {
            fs.mkdirSync(this.backupDir, { recursive: true });
        }
        
        const arquivosBackup = [
            'src/utils/seletores.js',
            'src/utils/timeouts.js',
            'src/main/servidor-automation-v2.js',
            'src/utils/servidor-skip-detector.js'
        ];
        
        for (const arquivo of arquivosBackup) {
            const caminhoOrigem = path.join(__dirname, arquivo);
            if (fs.existsSync(caminhoOrigem)) {
                const nomeArquivo = path.basename(arquivo);
                const caminhoDestino = path.join(this.backupDir, nomeArquivo);
                fs.copyFileSync(caminhoOrigem, caminhoDestino);
                console.log(`‚úÖ Backup criado: ${nomeArquivo}`);
            }
        }
        
        this.relatorio.correcoes.push({
            tipo: 'backup',
            descricao: 'Backup dos arquivos criado',
            diretorio: this.backupDir
        });
    }

    async limparCacheEspecifico() {
        console.log('\nüßπ Limpando cache espec√≠fico...');
        
        const diretorios = ['cache', 'temp', '.cache'];
        let arquivosRemovidos = 0;
        
        for (const dir of diretorios) {
            const caminhoDir = path.join(__dirname, dir);
            if (fs.existsSync(caminhoDir)) {
                const arquivos = fs.readdirSync(caminhoDir);
                
                for (const arquivo of arquivos) {
                    if (arquivo.toLowerCase().includes('sao') && 
                        arquivo.toLowerCase().includes('jose')) {
                        const caminhoArquivo = path.join(caminhoDir, arquivo);
                        fs.unlinkSync(caminhoArquivo);
                        arquivosRemovidos++;
                        console.log(`üóëÔ∏è Removido: ${arquivo}`);
                    }
                }
            }
        }
        
        console.log(`‚úÖ ${arquivosRemovidos} arquivos de cache removidos`);
        
        this.relatorio.correcoes.push({
            tipo: 'limpeza_cache',
            descricao: `${arquivosRemovidos} arquivos de cache removidos`
        });
    }

    async implementarSeletoresEspecificos() {
        console.log('\nüéØ Implementando seletores espec√≠ficos...');
        
        const caminhoSeletores = path.join(__dirname, 'src/utils/seletores.js');
        
        if (!fs.existsSync(caminhoSeletores)) {
            // Criar arquivo de seletores se n√£o existir
            const seletoresContent = this.criarArquivoSeletores();
            fs.writeFileSync(caminhoSeletores, seletoresContent);
            console.log('‚úÖ Arquivo de seletores criado');
        } else {
            // Adicionar seletores espec√≠ficos ao arquivo existente
            let seletoresContent = fs.readFileSync(caminhoSeletores, 'utf8');
            
            if (!seletoresContent.includes('SAO_JOSE_CAMPOS_ESPECIFICOS')) {
                const seletoresEspecificos = this.gerarSeletoresEspecificos();
                
                // Adicionar antes da exporta√ß√£o
                if (seletoresContent.includes('module.exports')) {
                    seletoresContent = seletoresContent.replace(
                        'module.exports',
                        seletoresEspecificos + '\n\nmodule.exports'
                    );
                } else {
                    seletoresContent += '\n\n' + seletoresEspecificos;
                }
                
                fs.writeFileSync(caminhoSeletores, seletoresContent);
                console.log('‚úÖ Seletores espec√≠ficos adicionados');
            }
        }
        
        this.relatorio.correcoes.push({
            tipo: 'seletores_especificos',
            descricao: 'Seletores espec√≠ficos para S√£o Jos√© dos Campos implementados',
            arquivo: 'src/utils/seletores.js'
        });
    }

    criarArquivoSeletores() {
        return `/**
 * Seletores para automa√ß√£o PJE
 */

${this.gerarSeletoresEspecificos()}

module.exports = {
    SAO_JOSE_CAMPOS_ESPECIFICOS,
    // Outros seletores...
};
`;
    }

    gerarSeletoresEspecificos() {
        return `// Seletores espec√≠ficos para S√£o Jos√© dos Campos
const SAO_JOSE_CAMPOS_ESPECIFICOS = {
    // Seletores para busca de perito
    buscaPerito: {
        inputBusca: 'input[name="nomePerito"], input[id*="perito"], input[class*="perito"]',
        botaoBuscar: 'button[type="submit"], input[type="submit"], button:contains("Buscar")',
        resultados: '.resultado-busca, .lista-peritos, [class*="resultado"]',
        itemPerito: '.item-perito, .perito-item, tr[class*="perito"]'
    },
    
    // Seletores para vincula√ß√£o
    vinculacao: {
        botaoVincular: 'button:contains("Vincular"), input[value*="Vincular"], a:contains("Vincular")',
        botaoConfirmar: 'button:contains("Confirmar"), input[value*="Confirmar"], button[id*="confirmar"]',
        modalConfirmacao: '.modal, .dialog, [class*="confirmacao"]',
        mensagemSucesso: '.sucesso, .success, [class*="sucesso"]'
    },
    
    // Seletores para navega√ß√£o
    navegacao: {
        menuPeritos: 'a:contains("Perito"), [href*="perito"], .menu-perito',
        submenuVincular: 'a:contains("Vincular"), [href*="vincular"]',
        breadcrumb: '.breadcrumb, .caminho, [class*="breadcrumb"]'
    },
    
    // Timeouts espec√≠ficos (em ms)
    timeouts: {
        buscaPerito: 15000,
        vinculacao: 20000,
        confirmacao: 10000,
        navegacao: 8000
    },
    
    // Configura√ß√µes espec√≠ficas
    configuracao: {
        tentativasMaximas: 5,
        intervaloTentativas: 3000,
        aguardarCarregamento: 5000,
        processamentoSequencial: true
    }
};
`;
    }

    async configurarProcessamentoSequencial() {
        console.log('\n‚öôÔ∏è Configurando processamento sequencial...');
        
        const caminhoAutomacao = path.join(__dirname, 'src/main/servidor-automation-v2.js');
        
        if (fs.existsSync(caminhoAutomacao)) {
            let automacaoContent = fs.readFileSync(caminhoAutomacao, 'utf8');
            
            if (!automacaoContent.includes('SAO_JOSE_CAMPOS_SEQUENCIAL')) {
                const configuracaoSequencial = this.gerarConfiguracaoSequencial();
                
                // Adicionar no in√≠cio do arquivo, ap√≥s os imports
                const linhas = automacaoContent.split('\n');
                let indiceInsercao = 0;
                
                // Encontrar onde inserir (ap√≥s os requires/imports)
                for (let i = 0; i < linhas.length; i++) {
                    if (linhas[i].includes('require(') || linhas[i].includes('import ')) {
                        indiceInsercao = i + 1;
                    }
                }
                
                linhas.splice(indiceInsercao, 0, '', configuracaoSequencial);
                automacaoContent = linhas.join('\n');
                
                fs.writeFileSync(caminhoAutomacao, automacaoContent);
                console.log('‚úÖ Configura√ß√£o sequencial adicionada');
            }
        }
        
        this.relatorio.correcoes.push({
            tipo: 'processamento_sequencial',
            descricao: 'Configura√ß√£o de processamento sequencial implementada',
            arquivo: 'src/main/servidor-automation-v2.js'
        });
    }

    gerarConfiguracaoSequencial() {
        return `// Configura√ß√£o espec√≠fica para S√£o Jos√© dos Campos - SAO_JOSE_CAMPOS_SEQUENCIAL
const SAO_JOSE_CAMPOS_CONFIG = {
    varasEspeciais: [
        '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
        '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
        '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
        '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos'
    ],
    
    processamentoSequencial: true,
    timeoutExtendido: 30000,
    tentativasMaximas: 3,
    intervaloTentativas: 5000,
    
    // Fun√ß√£o para verificar se √© vara especial
    isVaraEspecial(nomeOrgao) {
        return this.varasEspeciais.includes(nomeOrgao);
    },
    
    // Configura√ß√µes espec√≠ficas para processamento
    getConfiguracao(nomeOrgao) {
        if (this.isVaraEspecial(nomeOrgao)) {
            return {
                sequencial: true,
                timeout: this.timeoutExtendido,
                tentativas: this.tentativasMaximas,
                intervalo: this.intervaloTentativas,
                aguardarCarregamento: 8000,
                verificarElementos: true
            };
        }
        return null;
    }
};
`;
    }

    async ajustarTimeoutsEspecificos() {
        console.log('\n‚è±Ô∏è Ajustando timeouts espec√≠ficos...');
        
        const caminhoTimeouts = path.join(__dirname, 'src/utils/timeouts.js');
        
        if (!fs.existsSync(caminhoTimeouts)) {
            // Criar arquivo de timeouts se n√£o existir
            const timeoutsContent = this.criarArquivoTimeouts();
            fs.writeFileSync(caminhoTimeouts, timeoutsContent);
            console.log('‚úÖ Arquivo de timeouts criado');
        } else {
            // Adicionar timeouts espec√≠ficos
            let timeoutsContent = fs.readFileSync(caminhoTimeouts, 'utf8');
            
            if (!timeoutsContent.includes('SAO_JOSE_CAMPOS_TIMEOUTS')) {
                const timeoutsEspecificos = this.gerarTimeoutsEspecificos();
                
                if (timeoutsContent.includes('module.exports')) {
                    timeoutsContent = timeoutsContent.replace(
                        'module.exports',
                        timeoutsEspecificos + '\n\nmodule.exports'
                    );
                } else {
                    timeoutsContent += '\n\n' + timeoutsEspecificos;
                }
                
                fs.writeFileSync(caminhoTimeouts, timeoutsContent);
                console.log('‚úÖ Timeouts espec√≠ficos adicionados');
            }
        }
        
        this.relatorio.correcoes.push({
            tipo: 'timeouts_especificos',
            descricao: 'Timeouts espec√≠ficos para S√£o Jos√© dos Campos configurados',
            arquivo: 'src/utils/timeouts.js'
        });
    }

    criarArquivoTimeouts() {
        return `/**
 * Configura√ß√µes de timeout para automa√ß√£o PJE
 */

${this.gerarTimeoutsEspecificos()}

module.exports = {
    SAO_JOSE_CAMPOS_TIMEOUTS,
    // Outros timeouts...
};
`;
    }

    gerarTimeoutsEspecificos() {
        return `// Timeouts espec√≠ficos para S√£o Jos√© dos Campos
const SAO_JOSE_CAMPOS_TIMEOUTS = {
    // Timeouts base (em ms)
    navegacao: 15000,
    carregamentoPagina: 20000,
    buscaElemento: 10000,
    
    // Timeouts para busca de perito
    buscaPerito: {
        inputBusca: 8000,
        botaoBuscar: 5000,
        resultados: 15000,
        carregamentoLista: 12000
    },
    
    // Timeouts para vincula√ß√£o
    vinculacao: {
        botaoVincular: 8000,
        modalConfirmacao: 10000,
        botaoConfirmar: 5000,
        mensagemSucesso: 12000
    },
    
    // Timeouts para aguardar entre a√ß√µes
    intervalos: {
        entreCliques: 2000,
        entreNavegacao: 3000,
        entreTentativas: 5000,
        aposCarregamento: 4000
    },
    
    // Fun√ß√£o para obter timeout espec√≠fico
    getTimeout(acao, subacao = null) {
        if (subacao && this[acao] && this[acao][subacao]) {
            return this[acao][subacao];
        }
        return this[acao] || this.navegacao;
    }
};
`;
    }

    async criarConfiguracaoEspecial() {
        console.log('\nüìã Criando configura√ß√£o especial...');
        
        const configuracaoEspecial = {
            timestamp: new Date().toISOString(),
            versao: '1.0.0',
            descricao: 'Configura√ß√£o especial para varas de S√£o Jos√© dos Campos',
            
            varasEspeciais: this.varasProblematicas,
            
            configuracoes: {
                processamentoSequencial: true,
                timeoutExtendido: true,
                seletoresEspecificos: true,
                tentativasMaximas: 5,
                intervaloTentativas: 5000,
                aguardarCarregamento: 8000
            },
            
            instrucoes: [
                'Processar varas sequencialmente (uma por vez)',
                'Usar timeouts estendidos para todas as opera√ß√µes',
                'Aplicar seletores espec√≠ficos para busca e vincula√ß√£o',
                'Aguardar carregamento completo antes de cada a√ß√£o',
                'Repetir tentativas em caso de falha'
            ],
            
            monitoramento: {
                logDetalhado: true,
                capturarErros: true,
                salvarEvidencias: true
            }
        };
        
        const caminhoConfig = path.join(__dirname, 'config-sao-jose-campos.json');
        fs.writeFileSync(caminhoConfig, JSON.stringify(configuracaoEspecial, null, 2));
        
        console.log('‚úÖ Configura√ß√£o especial criada: config-sao-jose-campos.json');
        
        this.relatorio.correcoes.push({
            tipo: 'configuracao_especial',
            descricao: 'Arquivo de configura√ß√£o especial criado',
            arquivo: 'config-sao-jose-campos.json'
        });
    }

    async gerarRelatorioFinal() {
        console.log('\nüìÑ Gerando relat√≥rio final...');
        
        this.relatorio.resumo = {
            totalCorrecoes: this.relatorio.correcoes.length,
            varasAfetadas: this.varasProblematicas.length,
            arquivosModificados: this.relatorio.correcoes.map(c => c.arquivo).filter(Boolean),
            backupCriado: this.backupDir
        };
        
        this.relatorio.proximosPassos = [
            'Executar teste com as varas espec√≠ficas',
            'Monitorar logs durante processamento',
            'Verificar se busca e vincula√ß√£o funcionam corretamente',
            'Ajustar configura√ß√µes se necess√°rio'
        ];
        
        const nomeRelatorio = `CORRECAO-VARAS-SAO-JOSE-${new Date().toISOString().split('T')[0]}.json`;
        const caminhoRelatorio = path.join(__dirname, nomeRelatorio);
        
        fs.writeFileSync(caminhoRelatorio, JSON.stringify(this.relatorio, null, 2));
        
        console.log(`\nüìã RESUMO DA CORRE√á√ÉO`);
        console.log(`======================`);
        console.log(`Status: ${this.relatorio.status}`);
        console.log(`Corre√ß√µes aplicadas: ${this.relatorio.correcoes.length}`);
        console.log(`Varas afetadas: ${this.varasProblematicas.length}`);
        console.log(`Backup criado em: ${this.backupDir}`);
        console.log(`Relat√≥rio salvo: ${nomeRelatorio}`);
        
        console.log(`\n‚úÖ CORRE√á√ïES APLICADAS:`);
        this.relatorio.correcoes.forEach((correcao, index) => {
            console.log(`${index + 1}. ${correcao.tipo}: ${correcao.descricao}`);
        });
        
        console.log(`\nüîÑ PR√ìXIMOS PASSOS:`);
        this.relatorio.proximosPassos.forEach((passo, index) => {
            console.log(`${index + 1}. ${passo}`);
        });
        
        return nomeRelatorio;
    }
}

// Executar corre√ß√£o
if (require.main === module) {
    const correcao = new CorrecaoVarasSaoJose();
    correcao.executarCorrecao()
        .then(() => {
            console.log('\n‚úÖ Corre√ß√£o conclu√≠da com sucesso!');
            console.log('\nüöÄ Execute agora um teste com as varas espec√≠ficas para verificar se o problema foi resolvido.');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå Erro na corre√ß√£o:', error);
            process.exit(1);
        });
}

module.exports = CorrecaoVarasSaoJose;