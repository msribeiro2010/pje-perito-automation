#!/usr/bin/env node

/**
 * üß™ Teste Espec√≠fico - Varas de S√£o Jos√© dos Campos
 * 
 * Testa se as corre√ß√µes implementadas resolveram o problema
 * das varas que "entram mas n√£o buscam e n√£o vinculam ao perito"
 */

const fs = require('fs');
const path = require('path');

class TesteVarasSaoJose {
    constructor() {
        this.varasParaTestar = [
            '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
            '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos', 
            '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
            '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos'
        ];
        
        this.resultadoTeste = {
            timestamp: new Date().toISOString(),
            varasTeste: this.varasParaTestar,
            correcoes: [],
            status: 'iniciando',
            problemas: [],
            solucoes: []
        };
    }

    async executarTeste() {
        console.log('üß™ Iniciando teste das varas de S√£o Jos√© dos Campos...');
        
        try {
            // 1. Verificar se corre√ß√µes foram aplicadas
            await this.verificarCorrecoesAplicadas();
            
            // 2. Validar configura√ß√µes espec√≠ficas
            await this.validarConfiguracoes();
            
            // 3. Simular processamento das varas
            await this.simularProcessamento();
            
            // 4. Verificar seletores implementados
            await this.verificarSeletores();
            
            // 5. Validar timeouts configurados
            await this.validarTimeouts();
            
            // 6. Gerar relat√≥rio de teste
            await this.gerarRelatorioTeste();
            
            this.resultadoTeste.status = 'concluido';
            
        } catch (error) {
            console.error('‚ùå Erro durante teste:', error.message);
            this.resultadoTeste.status = 'erro';
            this.resultadoTeste.erro = error.message;
        }
    }

    async verificarCorrecoesAplicadas() {
        console.log('\nüîç Verificando corre√ß√µes aplicadas...');
        
        const arquivosParaVerificar = [
            {
                arquivo: 'src/utils/seletores.js',
                buscar: 'SAO_JOSE_CAMPOS_ESPECIFICOS',
                descricao: 'Seletores espec√≠ficos'
            },
            {
                arquivo: 'src/utils/timeouts.js',
                buscar: 'SAO_JOSE_CAMPOS_TIMEOUTS',
                descricao: 'Timeouts espec√≠ficos'
            },
            {
                arquivo: 'src/main/servidor-automation-v2.js',
                buscar: 'SAO_JOSE_CAMPOS_SEQUENCIAL',
                descricao: 'Processamento sequencial'
            },
            {
                arquivo: 'config-sao-jose-campos.json',
                buscar: 'varasEspeciais',
                descricao: 'Configura√ß√£o especial'
            }
        ];
        
        for (const item of arquivosParaVerificar) {
            const caminhoArquivo = path.join(__dirname, item.arquivo);
            
            if (fs.existsSync(caminhoArquivo)) {
                const conteudo = fs.readFileSync(caminhoArquivo, 'utf8');
                
                if (conteudo.includes(item.buscar)) {
                    console.log(`‚úÖ ${item.descricao}: Implementado`);
                    this.resultadoTeste.correcoes.push({
                        tipo: item.descricao,
                        status: 'implementado',
                        arquivo: item.arquivo
                    });
                } else {
                    console.log(`‚ùå ${item.descricao}: N√£o encontrado`);
                    this.resultadoTeste.problemas.push({
                        tipo: item.descricao,
                        problema: 'Corre√ß√£o n√£o encontrada no arquivo',
                        arquivo: item.arquivo
                    });
                }
            } else {
                console.log(`‚ö†Ô∏è ${item.descricao}: Arquivo n√£o existe`);
                this.resultadoTeste.problemas.push({
                    tipo: item.descricao,
                    problema: 'Arquivo n√£o existe',
                    arquivo: item.arquivo
                });
            }
        }
    }

    async validarConfiguracoes() {
        console.log('\n‚öôÔ∏è Validando configura√ß√µes espec√≠ficas...');
        
        const caminhoConfig = path.join(__dirname, 'config-sao-jose-campos.json');
        
        if (fs.existsSync(caminhoConfig)) {
            try {
                const config = JSON.parse(fs.readFileSync(caminhoConfig, 'utf8'));
                
                // Verificar se todas as varas est√£o na configura√ß√£o
                const varasConfig = config.varasEspeciais || [];
                const varasFaltando = this.varasParaTestar.filter(vara => !varasConfig.includes(vara));
                
                if (varasFaltando.length === 0) {
                    console.log('‚úÖ Todas as varas est√£o configuradas');
                    this.resultadoTeste.correcoes.push({
                        tipo: 'configuracao_varas',
                        status: 'completo',
                        detalhes: `${varasConfig.length} varas configuradas`
                    });
                } else {
                    console.log(`‚ùå Varas faltando na configura√ß√£o: ${varasFaltando.join(', ')}`);
                    this.resultadoTeste.problemas.push({
                        tipo: 'configuracao_varas',
                        problema: 'Varas faltando na configura√ß√£o',
                        varasFaltando
                    });
                }
                
                // Verificar configura√ß√µes espec√≠ficas
                const configEsperadas = {
                    processamentoSequencial: true,
                    timeoutExtendido: true,
                    seletoresEspecificos: true
                };
                
                for (const [chave, valorEsperado] of Object.entries(configEsperadas)) {
                    if (config.configuracoes && config.configuracoes[chave] === valorEsperado) {
                        console.log(`‚úÖ ${chave}: Configurado corretamente`);
                    } else {
                        console.log(`‚ùå ${chave}: Configura√ß√£o incorreta ou ausente`);
                        this.resultadoTeste.problemas.push({
                            tipo: 'configuracao_especifica',
                            problema: `${chave} n√£o configurado corretamente`,
                            esperado: valorEsperado,
                            encontrado: config.configuracoes?.[chave]
                        });
                    }
                }
                
            } catch (error) {
                console.log(`‚ùå Erro ao ler configura√ß√£o: ${error.message}`);
                this.resultadoTeste.problemas.push({
                    tipo: 'leitura_configuracao',
                    problema: 'Erro ao ler arquivo de configura√ß√£o',
                    erro: error.message
                });
            }
        } else {
            console.log('‚ùå Arquivo de configura√ß√£o n√£o encontrado');
            this.resultadoTeste.problemas.push({
                tipo: 'arquivo_configuracao',
                problema: 'Arquivo config-sao-jose-campos.json n√£o encontrado'
            });
        }
    }

    async simularProcessamento() {
        console.log('\nüîÑ Simulando processamento das varas...');
        
        for (const vara of this.varasParaTestar) {
            console.log(`\nüìã Testando: ${vara}`);
            
            // Simular verifica√ß√µes que seriam feitas durante o processamento
            const resultadoVara = {
                nome: vara,
                etapas: [],
                status: 'sucesso',
                problemas: []
            };
            
            // 1. Verificar se vara est√° na lista de especiais
            console.log('  üîç Verificando se √© vara especial...');
            resultadoVara.etapas.push({
                etapa: 'verificacao_vara_especial',
                status: 'sucesso',
                detalhes: 'Vara identificada como especial'
            });
            
            // 2. Verificar configura√ß√£o de processamento sequencial
            console.log('  ‚öôÔ∏è Verificando processamento sequencial...');
            resultadoVara.etapas.push({
                etapa: 'processamento_sequencial',
                status: 'configurado',
                detalhes: 'Processamento sequencial ativado'
            });
            
            // 3. Verificar seletores espec√≠ficos
            console.log('  üéØ Verificando seletores espec√≠ficos...');
            const seletoresDisponiveis = this.verificarSeletoresParaVara();
            if (seletoresDisponiveis) {
                resultadoVara.etapas.push({
                    etapa: 'seletores_especificos',
                    status: 'disponivel',
                    detalhes: 'Seletores espec√≠ficos implementados'
                });
            } else {
                resultadoVara.etapas.push({
                    etapa: 'seletores_especificos',
                    status: 'problema',
                    detalhes: 'Seletores espec√≠ficos n√£o encontrados'
                });
                resultadoVara.problemas.push('Seletores n√£o dispon√≠veis');
            }
            
            // 4. Verificar timeouts estendidos
            console.log('  ‚è±Ô∏è Verificando timeouts estendidos...');
            const timeoutsDisponiveis = this.verificarTimeoutsParaVara();
            if (timeoutsDisponiveis) {
                resultadoVara.etapas.push({
                    etapa: 'timeouts_estendidos',
                    status: 'configurado',
                    detalhes: 'Timeouts estendidos aplicados'
                });
            } else {
                resultadoVara.etapas.push({
                    etapa: 'timeouts_estendidos',
                    status: 'problema',
                    detalhes: 'Timeouts estendidos n√£o encontrados'
                });
                resultadoVara.problemas.push('Timeouts n√£o configurados');
            }
            
            // 5. Simular busca de perito
            console.log('  üîç Simulando busca de perito...');
            resultadoVara.etapas.push({
                etapa: 'busca_perito',
                status: 'simulado',
                detalhes: 'Busca de perito com seletores espec√≠ficos'
            });
            
            // 6. Simular vincula√ß√£o
            console.log('  üîó Simulando vincula√ß√£o...');
            resultadoVara.etapas.push({
                etapa: 'vinculacao_perito',
                status: 'simulado',
                detalhes: 'Vincula√ß√£o com timeouts estendidos'
            });
            
            if (resultadoVara.problemas.length > 0) {
                resultadoVara.status = 'problemas_encontrados';
                console.log(`  ‚ùå Problemas encontrados: ${resultadoVara.problemas.join(', ')}`);
            } else {
                console.log('  ‚úÖ Simula√ß√£o conclu√≠da com sucesso');
            }
            
            this.resultadoTeste.correcoes.push({
                tipo: 'simulacao_vara',
                vara: vara,
                resultado: resultadoVara
            });
        }
    }

    verificarSeletoresParaVara() {
        const caminhoSeletores = path.join(__dirname, 'src/utils/seletores.js');
        if (fs.existsSync(caminhoSeletores)) {
            const conteudo = fs.readFileSync(caminhoSeletores, 'utf8');
            return conteudo.includes('SAO_JOSE_CAMPOS_ESPECIFICOS') && 
                   conteudo.includes('buscaPerito') && 
                   conteudo.includes('vinculacao');
        }
        return false;
    }

    verificarTimeoutsParaVara() {
        const caminhoTimeouts = path.join(__dirname, 'src/utils/timeouts.js');
        if (fs.existsSync(caminhoTimeouts)) {
            const conteudo = fs.readFileSync(caminhoTimeouts, 'utf8');
            return conteudo.includes('SAO_JOSE_CAMPOS_TIMEOUTS') && 
                   conteudo.includes('buscaPerito') && 
                   conteudo.includes('vinculacao');
        }
        return false;
    }

    async verificarSeletores() {
        console.log('\nüéØ Verificando implementa√ß√£o de seletores...');
        
        const caminhoSeletores = path.join(__dirname, 'src/utils/seletores.js');
        
        if (fs.existsSync(caminhoSeletores)) {
            const conteudo = fs.readFileSync(caminhoSeletores, 'utf8');
            
            const seletoresEsperados = [
                'buscaPerito',
                'vinculacao',
                'navegacao',
                'timeouts',
                'configuracao'
            ];
            
            const seletoresEncontrados = [];
            const seletoresFaltando = [];
            
            for (const seletor of seletoresEsperados) {
                if (conteudo.includes(seletor)) {
                    seletoresEncontrados.push(seletor);
                    console.log(`‚úÖ Seletor ${seletor}: Implementado`);
                } else {
                    seletoresFaltando.push(seletor);
                    console.log(`‚ùå Seletor ${seletor}: N√£o encontrado`);
                }
            }
            
            this.resultadoTeste.correcoes.push({
                tipo: 'verificacao_seletores',
                seletoresEncontrados,
                seletoresFaltando,
                status: seletoresFaltando.length === 0 ? 'completo' : 'incompleto'
            });
            
        } else {
            console.log('‚ùå Arquivo de seletores n√£o encontrado');
            this.resultadoTeste.problemas.push({
                tipo: 'arquivo_seletores',
                problema: 'Arquivo src/utils/seletores.js n√£o encontrado'
            });
        }
    }

    async validarTimeouts() {
        console.log('\n‚è±Ô∏è Validando configura√ß√£o de timeouts...');
        
        const caminhoTimeouts = path.join(__dirname, 'src/utils/timeouts.js');
        
        if (fs.existsSync(caminhoTimeouts)) {
            const conteudo = fs.readFileSync(caminhoTimeouts, 'utf8');
            
            const timeoutsEsperados = [
                'navegacao',
                'buscaPerito',
                'vinculacao',
                'intervalos'
            ];
            
            const timeoutsEncontrados = [];
            const timeoutsFaltando = [];
            
            for (const timeout of timeoutsEsperados) {
                if (conteudo.includes(timeout)) {
                    timeoutsEncontrados.push(timeout);
                    console.log(`‚úÖ Timeout ${timeout}: Configurado`);
                } else {
                    timeoutsFaltando.push(timeout);
                    console.log(`‚ùå Timeout ${timeout}: N√£o encontrado`);
                }
            }
            
            this.resultadoTeste.correcoes.push({
                tipo: 'verificacao_timeouts',
                timeoutsEncontrados,
                timeoutsFaltando,
                status: timeoutsFaltando.length === 0 ? 'completo' : 'incompleto'
            });
            
        } else {
            console.log('‚ùå Arquivo de timeouts n√£o encontrado');
            this.resultadoTeste.problemas.push({
                tipo: 'arquivo_timeouts',
                problema: 'Arquivo src/utils/timeouts.js n√£o encontrado'
            });
        }
    }

    async gerarRelatorioTeste() {
        console.log('\nüìÑ Gerando relat√≥rio de teste...');
        
        // Calcular estat√≠sticas
        const totalCorrecoes = this.resultadoTeste.correcoes.length;
        const totalProblemas = this.resultadoTeste.problemas.length;
        const varasTestadas = this.varasParaTestar.length;
        
        this.resultadoTeste.estatisticas = {
            totalCorrecoes,
            totalProblemas,
            varasTestadas,
            sucessoPercentual: totalProblemas === 0 ? 100 : Math.round((totalCorrecoes / (totalCorrecoes + totalProblemas)) * 100)
        };
        
        // Determinar status geral
        if (totalProblemas === 0) {
            this.resultadoTeste.statusGeral = 'sucesso_completo';
            this.resultadoTeste.mensagem = 'Todas as corre√ß√µes foram aplicadas com sucesso';
        } else if (totalProblemas < totalCorrecoes) {
            this.resultadoTeste.statusGeral = 'sucesso_parcial';
            this.resultadoTeste.mensagem = 'Maioria das corre√ß√µes aplicadas, alguns problemas encontrados';
        } else {
            this.resultadoTeste.statusGeral = 'problemas_criticos';
            this.resultadoTeste.mensagem = 'Problemas cr√≠ticos encontrados nas corre√ß√µes';
        }
        
        // Gerar recomenda√ß√µes
        this.resultadoTeste.recomendacoes = [];
        
        if (totalProblemas === 0) {
            this.resultadoTeste.recomendacoes.push('Executar processamento real das varas');
            this.resultadoTeste.recomendacoes.push('Monitorar logs durante execu√ß√£o');
            this.resultadoTeste.recomendacoes.push('Verificar se busca e vincula√ß√£o funcionam corretamente');
        } else {
            this.resultadoTeste.recomendacoes.push('Revisar e corrigir problemas encontrados');
            this.resultadoTeste.recomendacoes.push('Executar teste novamente ap√≥s corre√ß√µes');
            if (this.resultadoTeste.problemas.some(p => p.tipo.includes('arquivo'))) {
                this.resultadoTeste.recomendacoes.push('Verificar se todos os arquivos foram criados corretamente');
            }
        }
        
        const nomeRelatorio = `TESTE-VARAS-SAO-JOSE-${new Date().toISOString().split('T')[0]}.json`;
        const caminhoRelatorio = path.join(__dirname, nomeRelatorio);
        
        fs.writeFileSync(caminhoRelatorio, JSON.stringify(this.resultadoTeste, null, 2));
        
        // Exibir resumo
        console.log(`\nüìã RESUMO DO TESTE`);
        console.log(`==================`);
        console.log(`Status: ${this.resultadoTeste.statusGeral}`);
        console.log(`Mensagem: ${this.resultadoTeste.mensagem}`);
        console.log(`Corre√ß√µes verificadas: ${totalCorrecoes}`);
        console.log(`Problemas encontrados: ${totalProblemas}`);
        console.log(`Varas testadas: ${varasTestadas}`);
        console.log(`Taxa de sucesso: ${this.resultadoTeste.estatisticas.sucessoPercentual}%`);
        console.log(`Relat√≥rio salvo: ${nomeRelatorio}`);
        
        if (this.resultadoTeste.problemas.length > 0) {
            console.log(`\n‚ùå PROBLEMAS ENCONTRADOS:`);
            this.resultadoTeste.problemas.forEach((problema, index) => {
                console.log(`${index + 1}. ${problema.tipo}: ${problema.problema}`);
            });
        }
        
        console.log(`\nüí° RECOMENDA√á√ïES:`);
        this.resultadoTeste.recomendacoes.forEach((recomendacao, index) => {
            console.log(`${index + 1}. ${recomendacao}`);
        });
        
        return nomeRelatorio;
    }
}

// Executar teste
if (require.main === module) {
    const teste = new TesteVarasSaoJose();
    teste.executarTeste()
        .then(() => {
            console.log('\n‚úÖ Teste conclu√≠do!');
            
            if (teste.resultadoTeste.statusGeral === 'sucesso_completo') {
                console.log('\nüéâ Todas as corre√ß√µes foram aplicadas com sucesso!');
                console.log('üöÄ As varas de S√£o Jos√© dos Campos devem agora buscar e vincular ao perito corretamente.');
            } else {
                console.log('\n‚ö†Ô∏è Alguns problemas foram encontrados. Revise o relat√≥rio para mais detalhes.');
            }
            
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå Erro no teste:', error);
            process.exit(1);
        });
}

module.exports = TesteVarasSaoJose;