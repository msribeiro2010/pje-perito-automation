#!/usr/bin/env node

/**
 * Script de debug para analisar por que 6 OJs espec√≠ficas n√£o est√£o sendo reconhecidas
 */

const fs = require('fs').promises;
const path = require('path');

// Fun√ß√£o de normaliza√ß√£o copiada do smart-oj-cache.js
function normalizarTexto(texto) {
  if (!texto) return '';

  return texto
    .toLowerCase()
    .trim()
    // Normalizar diferentes tipos de travess√µes e h√≠fens
    .replace(/[\u2013\u2014\u2015\u2212\-‚Äì‚Äî]/g, '-')  // Travess√µes para h√≠fen
    .replace(/[\s\-]+/g, ' ')     // Espa√ßos e h√≠fens para espa√ßo √∫nico
    .replace(/[^a-z0-9\s√ß√°√†√¢√£√©√™√≠√≥√¥√µ√∫√º]/g, '')  // Manter acentos brasileiros
    .replace(/\s+/g, ' ')         // Normalizar espa√ßos m√∫ltiplos
    .trim();
}

// Fun√ß√£o de similaridade copiada do smart-oj-cache.js
function calcularSimilaridade(texto1, texto2) {
  if (texto1 === texto2) return 1;
  if (!texto1 || !texto2) return 0;

  // Algoritmo de dist√¢ncia de Levenshtein otimizado
  const len1 = texto1.length;
  const len2 = texto2.length;

  if (len1 === 0) return len2 === 0 ? 1 : 0;
  if (len2 === 0) return 0;

  const matrix = Array(len2 + 1).fill().map(() => Array(len1 + 1).fill(0));

  for (let i = 0; i <= len1; i++) matrix[0][i] = i;
  for (let j = 0; j <= len2; j++) matrix[j][0] = j;

  for (let j = 1; j <= len2; j++) {
    for (let i = 1; i <= len1; i++) {
      const cost = texto1[i - 1] === texto2[j - 1] ? 0 : 1;
      matrix[j][i] = Math.min(
        matrix[j - 1][i] + 1,     // deletion
        matrix[j][i - 1] + 1,     // insertion
        matrix[j - 1][i - 1] + cost // substitution
      );
    }
  }

  const maxLen = Math.max(len1, len2);
  return (maxLen - matrix[len2][len1]) / maxLen;
}

async function debugOJDetection() {
  console.log('üîç Debug da Detec√ß√£o de OJs\n');

  // Carregar cache atual
  let cacheData = {};
  try {
    const cacheFile = path.join(__dirname, 'data', 'smart-oj-cache.json');
    const data = await fs.readFile(cacheFile, 'utf8');
    cacheData = JSON.parse(data);
  } catch (error) {
    console.log('‚ùå Erro ao carregar cache:', error.message);
    return;
  }

  const cpfDirlei = '097.503.508-80';
  const servidorCache = cacheData[cpfDirlei];

  if (!servidorCache) {
    console.log('‚ùå Cache n√£o encontrado para Dirlei');
    return;
  }

  console.log(`üìä Estat√≠sticas do Cache para ${cpfDirlei}:`);
  console.log(`   - Total Verificados: ${servidorCache.estatisticas.totalVerificados}`);
  console.log(`   - J√° Vinculados: ${servidorCache.estatisticas.jaVinculados}`);
  console.log(`   - Para Vincular: ${servidorCache.estatisticas.paraVincular}`);

  // OJs que deveriam ser reconhecidas mas est√£o aparecendo como "para processar"
  const ojsProblematicas = [
    '1¬™ Vara do Trabalho de Franca',
    '1¬™ Vara do Trabalho de Sorocaba',
    '2¬™ Vara do Trabalho de Araraquara',
    '3¬™ Vara do Trabalho de Piracicaba',
    'CEJUSC S√ÉO JOS√â DO RIO PRETO - JT Centro Judici√°rio de M√©todos Consensuais de Solu√ß√£o de Disputas da Justi√ßa do Trabalho',
    'CEJUSC S√ÉO JOS√â DOS CAMPOS - JT Centro Judici√°rio de M√©todos Consensuais de Solu√ß√£o de Disputas da Justi√ßa do Trabalho'
  ];

  // OJs que est√£o no cache como "j√° vinculadas"
  const ojsJaVinculadas = servidorCache.ojsJaVinculados || [];
  const ojsParaVincular = servidorCache.ojsParaVincular || [];

  console.log('\nüîç An√°lise das OJs Problem√°ticas:\n');

  for (const ojProblematica of ojsProblematicas) {
    console.log(`\n--- Analisando: "${ojProblematica}" ---`);

    const ojNormalizada = normalizarTexto(ojProblematica);
    console.log(`üìù Normalizada: "${ojNormalizada}"`);

    // Verificar se est√° nas listas
    const estaParaVincular = ojsParaVincular.includes(ojProblematica);
    const estaJaVinculada = ojsJaVinculadas.find(item => item.oj === ojProblematica);

    console.log(`üìã No cache como "para vincular": ${estaParaVincular ? 'SIM' : 'N√ÉO'}`);
    console.log(`‚úÖ No cache como "j√° vinculada": ${estaJaVinculada ? 'SIM' : 'N√ÉO'}`);

    if (estaJaVinculada) {
      console.log(`   üìç Texto encontrado: "${estaJaVinculada.textoEncontrado}"`);
      console.log(`   üîó Tipo correspond√™ncia: ${estaJaVinculada.tipoCorrespondencia}`);
    }

    // Analisar similaridade com as OJs j√° vinculadas
    console.log(`\nüîé An√°lise de Similaridade:`);
    for (const ojVinculada of ojsJaVinculadas) {
      const similaridade = calcularSimilaridade(ojNormalizada, normalizarTexto(ojVinculada.oj));
      if (similaridade > 0.7) {
        console.log(`   üìä "${ojVinculada.oj}" - Similaridade: ${(similaridade * 100).toFixed(1)}%`);
        if (similaridade >= 0.95) {
          console.log(`      ‚ö†Ô∏è  ALTA SIMILARIDADE - Deveria ser reconhecida!`);
        }
      }
    }

    // Verificar se h√° correspond√™ncia exata normalizada
    const matchExato = ojsJaVinculadas.find(item => normalizarTexto(item.oj) === ojNormalizada);
    if (matchExato) {
      console.log(`   ‚úÖ MATCH EXATO ENCONTRADO: "${matchExato.oj}"`);
      console.log(`      üö® PROBLEMA: OJ deveria ser reconhecida mas n√£o est√° sendo!`);
    }
  }

  console.log('\nüìã Sum√°rio do Cache:');
  console.log('\nOJs J√° Vinculadas:');
  ojsJaVinculadas.forEach((item, index) => {
    console.log(`${index + 1}. "${item.oj}" (${item.tipoCorrespondencia})`);
  });

  console.log('\nOJs Para Vincular:');
  ojsParaVincular.forEach((oj, index) => {
    console.log(`${index + 1}. "${oj}"`);
  });

  // Verificar se h√° problema de correspond√™ncia entre cache e configura√ß√£o
  console.log('\nüîç Verifica√ß√£o de Correspond√™ncia Cache vs Configura√ß√£o:');

  // Carregar configura√ß√£o das OJs
  try {
    const orgaosFile = path.join(__dirname, 'src', 'renderer', 'orgaos_pje.json');
    const orgaosData = await fs.readFile(orgaosFile, 'utf8');
    const orgaos = JSON.parse(orgaosData);

    // Criar lista flat de todas as OJs da configura√ß√£o
    const todasOJsConfig = [];
    for (const cidade in orgaos) {
      todasOJsConfig.push(...orgaos[cidade]);
    }

    console.log(`üìä Total de OJs na configura√ß√£o: ${todasOJsConfig.length}`);

    // Verificar se as OJs problem√°ticas est√£o na configura√ß√£o
    for (const ojProblematica of ojsProblematicas) {
      const estaConfig = todasOJsConfig.includes(ojProblematica);
      console.log(`üîç "${ojProblematica}" est√° na configura√ß√£o: ${estaConfig ? 'SIM' : 'N√ÉO'}`);

      if (!estaConfig) {
        // Procurar por similaridade na configura√ß√£o
        const ojNormalizada = normalizarTexto(ojProblematica);
        const similares = todasOJsConfig.filter(oj => {
          const sim = calcularSimilaridade(ojNormalizada, normalizarTexto(oj));
          return sim > 0.8;
        });

        if (similares.length > 0) {
          console.log(`   üìã OJs similares na configura√ß√£o:`);
          similares.forEach(oj => {
            const sim = calcularSimilaridade(ojNormalizada, normalizarTexto(oj));
            console.log(`      - "${oj}" (${(sim * 100).toFixed(1)}%)`);
          });
        }
      }
    }

  } catch (error) {
    console.log('‚ùå Erro ao carregar configura√ß√£o de OJs:', error.message);
  }
}

// Executar debug
debugOJDetection().catch(console.error);