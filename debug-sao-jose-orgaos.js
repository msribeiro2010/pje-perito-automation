const fs = require('fs');
const path = require('path');

/**
 * Script para debugar o problema dos √≥rg√£os de S√£o Jos√© dos Campos
 * que n√£o est√£o sendo processados completamente
 */

async function debugSaoJoseOrgaos() {
  console.log('üîç === DEBUG: √ìrg√£os de S√£o Jos√© dos Campos ===\n');
  
  try {
    // 1. Verificar arquivo de √≥rg√£os principal
    const orgaosPjePath = path.join(__dirname, 'orgaos_pje.json');
    const orgaosPjeData = JSON.parse(fs.readFileSync(orgaosPjePath, 'utf8'));
    
    console.log('üìã 1. √ìrg√£os no arquivo principal (orgaos_pje.json):');
    const saoJoseOrgaos = orgaosPjeData['S√£o Jos√© dos Campos'] || [];
    console.log(`   Total: ${saoJoseOrgaos.length} √≥rg√£os`);
    saoJoseOrgaos.forEach((orgao, index) => {
      console.log(`   ${index + 1}. "${orgao}"`);
    });
    console.log();
    
    // 2. Verificar arquivo do renderer
    const rendererOrgaosPath = path.join(__dirname, 'src/renderer/orgaos_pje.json');
    const rendererOrgaosData = JSON.parse(fs.readFileSync(rendererOrgaosPath, 'utf8'));
    
    console.log('üìã 2. √ìrg√£os no arquivo do renderer (src/renderer/orgaos_pje.json):');
    const rendererSaoJoseOrgaos = rendererOrgaosData['S√£o Jos√© dos Campos'] || [];
    console.log(`   Total: ${rendererSaoJoseOrgaos.length} √≥rg√£os`);
    rendererSaoJoseOrgaos.forEach((orgao, index) => {
      console.log(`   ${index + 1}. "${orgao}"`);
    });
    console.log();
    
    // 3. Verificar diferen√ßas
    console.log('üîç 3. An√°lise de diferen√ßas:');
    const orgaosProcessados = [
      'Vara do Trabalho de Caraguatatuba',
      'Vara do Trabalho de Ca√ßapava', 
      'Vara do Trabalho de Cruzeiro',
      'Vara do Trabalho de Guaratinguet√°',
      'Vara do Trabalho de Lorena',
      '1¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      'CON1 - S√£o Jos√© dos Campos'
    ];
    
    const orgaosFaltantes = [
      '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos', 
      '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos'
    ];
    
    console.log('   ‚úÖ √ìrg√£os processados com sucesso:');
    orgaosProcessados.forEach((orgao, index) => {
      const existeNoPrincipal = saoJoseOrgaos.includes(orgao);
      const existeNoRenderer = rendererSaoJoseOrgaos.includes(orgao);
      console.log(`   ${index + 1}. "${orgao}" - Principal: ${existeNoPrincipal ? '‚úÖ' : '‚ùå'}, Renderer: ${existeNoRenderer ? '‚úÖ' : '‚ùå'}`);
    });
    
    console.log('\n   ‚ùå √ìrg√£os que faltaram no processamento:');
    orgaosFaltantes.forEach((orgao, index) => {
      const existeNoPrincipal = saoJoseOrgaos.includes(orgao);
      const existeNoRenderer = rendererSaoJoseOrgaos.includes(orgao);
      console.log(`   ${index + 1}. "${orgao}" - Principal: ${existeNoPrincipal ? '‚úÖ' : '‚ùå'}, Renderer: ${existeNoRenderer ? '‚úÖ' : '‚ùå'}`);
    });
    
    // 4. Verificar configura√ß√µes de processamento
    console.log('\nüîß 4. Configura√ß√µes de processamento:');
    
    // Verificar configura√ß√µes do parallel processor
    const parallelProcessorPath = path.join(__dirname, 'src/main/parallel-oj-processor.js');
    const parallelProcessorContent = fs.readFileSync(parallelProcessorPath, 'utf8');
    
    const batchSizeMatch = parallelProcessorContent.match(/this\.batchSize\s*=\s*(\d+)/);
    const maxConcurrencyMatch = parallelProcessorContent.match(/this\.maxConcurrency\s*=\s*(\d+)/);
    
    console.log(`   Batch Size: ${batchSizeMatch ? batchSizeMatch[1] : 'n√£o encontrado'}`);
    console.log(`   Max Concurrency: ${maxConcurrencyMatch ? maxConcurrencyMatch[1] : 'n√£o encontrado'}`);
    
    // 5. Verificar configura√ß√µes do servidor skip detector
    const skipDetectorPath = path.join(__dirname, 'src/utils/servidor-skip-detector.js');
    const skipDetectorContent = fs.readFileSync(skipDetectorPath, 'utf8');
    
    const limiteToleranciaMatch = skipDetectorContent.match(/this\.limiteTolerancia\s*=\s*([\d.]+)/);
    const limiteMinimoMatch = skipDetectorContent.match(/this\.limiteMinimo\s*=\s*(\d+)/);
    
    console.log(`   Limite Toler√¢ncia: ${limiteToleranciaMatch ? (parseFloat(limiteToleranciaMatch[1]) * 100) + '%' : 'n√£o encontrado'}`);
    console.log(`   Limite M√≠nimo: ${limiteMinimoMatch ? limiteMinimoMatch[1] : 'n√£o encontrado'}`);
    
    // 6. An√°lise de poss√≠veis causas
    console.log('\nüéØ 5. Poss√≠veis causas do problema:');
    
    if (saoJoseOrgaos.length === 11 && rendererSaoJoseOrgaos.length === 11) {
      console.log('   ‚úÖ Configura√ß√£o de √≥rg√£os est√° correta (11 √≥rg√£os em ambos os arquivos)');
      console.log('   üîç Problema pode estar em:');
      console.log('      - Cache de OJs j√° vinculados (SmartOJCache)');
      console.log('      - Processamento em lotes (batchSize=5, pode estar parando prematuramente)');
      console.log('      - Timeout ou erro durante processamento');
      console.log('      - Servidor Skip Detector pulando √≥rg√£os por toler√¢ncia');
    } else {
      console.log('   ‚ùå Problema na configura√ß√£o de √≥rg√£os');
      console.log(`      Principal: ${saoJoseOrgaos.length} √≥rg√£os`);
      console.log(`      Renderer: ${rendererSaoJoseOrgaos.length} √≥rg√£os`);
    }
    
    // 7. Recomenda√ß√µes
    console.log('\nüí° 6. Recomenda√ß√µes para resolver:');
    console.log('   1. Limpar cache de OJs antes do processamento');
    console.log('   2. Verificar logs de processamento para timeouts');
    console.log('   3. Aumentar timeout individual por OJ (atualmente 60s)');
    console.log('   4. Verificar se o servidor skip detector est√° pulando √≥rg√£os');
    console.log('   5. Testar processamento sequencial em vez de paralelo');
    
  } catch (error) {
    console.error('‚ùå Erro durante debug:', error.message);
  }
}

// Executar debug
debugSaoJoseOrgaos().catch(console.error);