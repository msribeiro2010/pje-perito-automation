/**
 * üéØ EXEMPLO PR√ÅTICO DE USO DO SISTEMA INTELIGENTE DE VERIFICA√á√ÉO DE OJs
 * 
 * Este exemplo demonstra como o sistema verifica OJs existentes antes de criar novos,
 * especialmente quando um servidor j√° tem o perfil "Assessor" mas precisa do perfil "Diretor de Secretaria".
 */

const SmartOJIntegration = require('./src/utils/smart-oj-integration.js');

/**
 * üß™ SIMULA√á√ÉO PR√ÅTICA DO SISTEMA
 */
class ExemploUsoSmartOJ {
    constructor() {
        this.smartOJ = new SmartOJIntegration();
    }

    /**
     * üìã CEN√ÅRIO 1: Servidor j√° tem perfil "Assessor" mas precisa de "Diretor de Secretaria"
     */
    async exemploServidorComPerfilExistente() {
        console.log('\nüéØ CEN√ÅRIO 1: Servidor com perfil existente');
        console.log('=' .repeat(60));
        
        // Dados do servidor
        const servidor = {
            nome: 'Jo√£o Silva',
            cpf: '123.456.789-00',
            ojsParaCadastrar: [
                { nome: 'Tribunal de Justi√ßa do Estado de S√£o Paulo', perfil: 'Diretor de Secretaria' },
                { nome: 'Tribunal Regional Federal da 3¬™ Regi√£o', perfil: 'Assessor' }
            ]
        };
        
        // OJs j√° existentes no sistema (simula√ß√£o)
        const ojsExistentes = [
            {
                nome: 'Tribunal de Justi√ßa do Estado de S√£o Paulo',
                perfis: ['Assessor'] // J√° tem Assessor, mas precisa de Diretor de Secretaria
            }
        ];
        
        console.log(`üë§ Servidor: ${servidor.nome}`);
        console.log(`üìã OJs para cadastrar: ${servidor.ojsParaCadastrar.length}`);
        console.log(`üèõÔ∏è OJs existentes: ${ojsExistentes.length}`);
        
        // Analisar e filtrar OJs
        const resultadoFiltro = await this.smartOJ.filterOJsForProcessing(
            servidor.ojsParaCadastrar, 
            ojsExistentes
        );
        
        console.log('\nüìä RESULTADO DA AN√ÅLISE:');
        console.log(`‚ú® Criar novos: ${resultadoFiltro.toCreate.length}`);
        console.log(`‚ûï Adicionar perfil: ${resultadoFiltro.toAddRole.length}`);
        console.log(`‚è≠Ô∏è Pular (j√° existe): ${resultadoFiltro.toSkip.length}`);
        
        // Detalhar a√ß√µes
        if (resultadoFiltro.toAddRole.length > 0) {
            console.log('\nüîÑ A√á√ïES DE ADI√á√ÉO DE PERFIL:');
            resultadoFiltro.toAddRole.forEach((oj, index) => {
                console.log(`   ${index + 1}. ${oj.nome}`);
                console.log(`      üìù Perfis existentes: ${oj.existingRoles.join(', ')}`);
                console.log(`      ‚ûï Novo perfil: ${oj.novoRole}`);
            });
        }
        
        if (resultadoFiltro.toCreate.length > 0) {
            console.log('\nüÜï A√á√ïES DE CRIA√á√ÉO:');
            resultadoFiltro.toCreate.forEach((oj, index) => {
                console.log(`   ${index + 1}. ${oj.nome} - ${oj.perfil}`);
            });
        }
        
        return resultadoFiltro;
    }
    
    /**
     * üìã CEN√ÅRIO 2: Servidor sem OJs existentes
     */
    async exemploServidorSemOJsExistentes() {
        console.log('\nüéØ CEN√ÅRIO 2: Servidor sem OJs existentes');
        console.log('=' .repeat(60));
        
        const servidor = {
            nome: 'Maria Santos',
            cpf: '987.654.321-00',
            ojsParaCadastrar: [
                { nome: 'Tribunal de Justi√ßa do Estado do Rio de Janeiro', perfil: 'Assessor' },
                { nome: 'Superior Tribunal de Justi√ßa', perfil: 'Diretor de Secretaria' }
            ]
        };
        
        const ojsExistentes = []; // Nenhum OJ existente
        
        console.log(`üë§ Servidor: ${servidor.nome}`);
        console.log(`üìã OJs para cadastrar: ${servidor.ojsParaCadastrar.length}`);
        console.log(`üèõÔ∏è OJs existentes: ${ojsExistentes.length}`);
        
        const resultadoFiltro = await this.smartOJ.filterOJsForProcessing(
            servidor.ojsParaCadastrar, 
            ojsExistentes
        );
        
        console.log('\nüìä RESULTADO DA AN√ÅLISE:');
        console.log(`‚ú® Criar novos: ${resultadoFiltro.toCreate.length}`);
        console.log(`‚ûï Adicionar perfil: ${resultadoFiltro.toAddRole.length}`);
        console.log(`‚è≠Ô∏è Pular (j√° existe): ${resultadoFiltro.toSkip.length}`);
        
        return resultadoFiltro;
    }
    
    /**
     * üìã CEN√ÅRIO 3: Servidor com m√∫ltiplos perfis complexos
     */
    async exemploServidorComPerfilComplexo() {
        console.log('\nüéØ CEN√ÅRIO 3: Servidor com perfis complexos');
        console.log('=' .repeat(60));
        
        const servidor = {
            nome: 'Carlos Oliveira',
            cpf: '456.789.123-00',
            ojsParaCadastrar: [
                { nome: 'Tribunal de Justi√ßa do Estado de S√£o Paulo', perfil: 'Diretor de Secretaria' },
                { nome: 'Tribunal Regional Federal da 3¬™ Regi√£o', perfil: 'Assessor' },
                { nome: 'Superior Tribunal de Justi√ßa', perfil: 'Diretor de Secretaria' },
                { nome: 'Tribunal de Justi√ßa do Estado do Rio de Janeiro', perfil: 'Assessor' }
            ]
        };
        
        const ojsExistentes = [
            {
                nome: 'Tribunal de Justi√ßa do Estado de S√£o Paulo',
                perfis: ['Assessor'] // Precisa adicionar Diretor de Secretaria
            },
            {
                nome: 'Tribunal Regional Federal da 3¬™ Regi√£o',
                perfis: ['Assessor'] // J√° tem o perfil necess√°rio
            },
            {
                nome: 'Superior Tribunal de Justi√ßa',
                perfis: ['Assessor', 'Diretor de Secretaria'] // J√° tem ambos os perfis
            }
        ];
        
        console.log(`üë§ Servidor: ${servidor.nome}`);
        console.log(`üìã OJs para cadastrar: ${servidor.ojsParaCadastrar.length}`);
        console.log(`üèõÔ∏è OJs existentes: ${ojsExistentes.length}`);
        
        const resultadoFiltro = await this.smartOJ.filterOJsForProcessing(
            servidor.ojsParaCadastrar, 
            ojsExistentes
        );
        
        console.log('\nüìä RESULTADO DA AN√ÅLISE:');
        console.log(`‚ú® Criar novos: ${resultadoFiltro.toCreate.length}`);
        console.log(`‚ûï Adicionar perfil: ${resultadoFiltro.toAddRole.length}`);
        console.log(`‚è≠Ô∏è Pular (j√° existe): ${resultadoFiltro.toSkip.length}`);
        
        // Detalhar cada categoria
        if (resultadoFiltro.toCreate.length > 0) {
            console.log('\nüÜï CRIAR NOVOS OJs:');
            resultadoFiltro.toCreate.forEach((oj, index) => {
                console.log(`   ${index + 1}. ${oj.nome} - ${oj.perfil}`);
            });
        }
        
        if (resultadoFiltro.toAddRole.length > 0) {
            console.log('\n‚ûï ADICIONAR PERFIS:');
            resultadoFiltro.toAddRole.forEach((oj, index) => {
                console.log(`   ${index + 1}. ${oj.nome}`);
                console.log(`      üìù Tem: ${oj.existingRoles.join(', ')}`);
                console.log(`      ‚ûï Adicionar: ${oj.novoRole}`);
            });
        }
        
        if (resultadoFiltro.toSkip.length > 0) {
            console.log('\n‚è≠Ô∏è PULAR (J√Å POSSUI):');
            resultadoFiltro.toSkip.forEach((oj, index) => {
                console.log(`   ${index + 1}. ${oj.nome} - ${oj.reason}`);
                console.log(`      üìù Perfis: ${oj.existingRoles.join(', ')}`);
            });
        }
        
        return resultadoFiltro;
    }
    
    /**
     * üöÄ EXECUTA TODOS OS EXEMPLOS
     */
    async executarExemplos() {
        console.log('üéØ DEMONSTRA√á√ÉO DO SISTEMA INTELIGENTE DE VERIFICA√á√ÉO DE OJs');
        console.log('=' .repeat(80));
        console.log('\nüí° Este sistema resolve o problema de:');
        console.log('   ‚Ä¢ Evitar cadastros duplicados');
        console.log('   ‚Ä¢ Adicionar perfis quando necess√°rio (ex: Assessor ‚Üí Diretor de Secretaria)');
        console.log('   ‚Ä¢ Otimizar o processo de cadastramento');
        
        await this.exemploServidorComPerfilExistente();
        await this.exemploServidorSemOJsExistentes();
        await this.exemploServidorComPerfilComplexo();
        
        console.log('\nüéâ DEMONSTRA√á√ÉO CONCLU√çDA!');
        console.log('\nüí° BENEF√çCIOS DO SISTEMA:');
        console.log('   ‚úÖ Evita cadastros desnecess√°rios');
        console.log('   ‚úÖ Adiciona perfis automaticamente quando necess√°rio');
        console.log('   ‚úÖ Melhora a efici√™ncia do processo');
        console.log('   ‚úÖ Reduz erros manuais');
        console.log('   ‚úÖ Fornece relat√≥rios detalhados');
    }
}

// Executar exemplo se chamado diretamente
if (require.main === module) {
    const exemplo = new ExemploUsoSmartOJ();
    exemplo.executarExemplos()
        .then(() => {
            console.log('\n‚ú® Exemplo executado com sucesso!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå Erro no exemplo:', error);
            process.exit(1);
        });
}

module.exports = ExemploUsoSmartOJ;