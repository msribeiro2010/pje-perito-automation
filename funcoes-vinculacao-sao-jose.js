
/**
 * üîó FUN√á√ïES DE VINCULA√á√ÉO ROBUSTAS PARA S√ÉO JOS√â DOS CAMPOS
 * Resolve problema: Terminal#1032-1058
 */

/**
 * Executa vincula√ß√£o robusta de √≥rg√£o ao perito
 * @param {Object} page - P√°gina do Playwright
 * @param {string} nomeOrgao - Nome do √≥rg√£o a vincular
 * @param {Object} options - Op√ß√µes de configura√ß√£o
 * @returns {Promise<boolean>} - Sucesso da vincula√ß√£o
 */
async function executarVinculacaoRobustaSaoJose(page, nomeOrgao, options = {}) {
    const timeout = options.timeout || 12000;
    const tentativas = options.tentativas || 5;
    
    console.log(`üîó Iniciando vincula√ß√£o robusta para: ${nomeOrgao}`);
    
    for (let tentativa = 1; tentativa <= tentativas; tentativa++) {
        try {
            console.log(`   Tentativa ${tentativa}/${tentativas}`);
            
            // 1. Localizar item do √≥rg√£o nos resultados
            const itemOrgao = await localizarItemOrgaoSaoJose(page, nomeOrgao, timeout);
            if (!itemOrgao) {
                console.log('   ‚ùå Item do √≥rg√£o n√£o encontrado nos resultados');
                continue;
            }
            
            // 2. Executar a√ß√£o de vincula√ß√£o
            const vinculacaoExecutada = await executarAcaoVinculacaoSaoJose(page, itemOrgao, timeout);
            if (!vinculacaoExecutada) {
                console.log('   ‚ùå N√£o foi poss√≠vel executar a vincula√ß√£o');
                continue;
            }
            
            // 3. Confirmar vincula√ß√£o
            const vinculacaoConfirmada = await confirmarVinculacaoSaoJose(page, timeout);
            if (!vinculacaoConfirmada) {
                console.log('   ‚ùå Vincula√ß√£o n√£o foi confirmada');
                continue;
            }
            
            console.log('   ‚úÖ Vincula√ß√£o executada com sucesso');
            return true;
            
        } catch (error) {
            console.log(`   ‚ùå Erro na tentativa ${tentativa}: ${error.message}`);
            if (tentativa < tentativas) {
                await page.waitForTimeout(2000);
            }
        }
    }
    
    console.log('‚ùå Falha em todas as tentativas de vincula√ß√£o');
    return false;
}

/**
 * Localiza item espec√≠fico do √≥rg√£o nos resultados
 */
async function localizarItemOrgaoSaoJose(page, nomeOrgao, timeout) {
    const seletoresLista = [
    ".lista-orgaos",
    ".orgaos-lista",
    ".resultado-orgaos",
    ".search-results-orgaos",
    ".resultado-busca",
    ".lista-resultados",
    ".search-results",
    ".resultados",
    ".mat-list",
    ".mat-table",
    "mat-list",
    "mat-table",
    "table tbody",
    "table.resultados",
    ".table-resultados",
    ".grid-resultados",
    ".results-grid",
    ".grid-row",
    ".results-container",
    ".search-container",
    "[data-testid*=\"results\"]"
];
    const seletoresItem = [
    ".item-orgao",
    ".orgao-item",
    ".resultado-orgao",
    ".resultado-item",
    ".search-item",
    ".list-item",
    "mat-list-item",
    ".mat-list-item",
    "tr",
    "tbody tr",
    ".table-row",
    "div[role=\"button\"]",
    "div[tabindex]",
    ".clickable"
];
    
    // Primeiro, localizar a lista de resultados
    let listaResultados = null;
    for (const seletor of seletoresLista) {
        try {
            listaResultados = await page.waitForSelector(seletor, { 
                timeout: 2000, 
                state: 'visible' 
            });
            if (listaResultados) {
                console.log(`      ‚úÖ Lista encontrada: ${seletor}`);
                break;
            }
        } catch (error) {
            // Continua para pr√≥ximo seletor
        }
    }
    
    if (!listaResultados) {
        console.log('      ‚ùå Lista de resultados n√£o encontrada');
        return null;
    }
    
    // Procurar item espec√≠fico do √≥rg√£o
    for (const seletor of seletoresItem) {
        try {
            const items = await page.$$(seletor);
            for (const item of items) {
                const texto = await item.textContent();
                if (texto && texto.includes(nomeOrgao)) {
                    console.log(`      ‚úÖ Item encontrado: ${seletor}`);
                    return item;
                }
            }
        } catch (error) {
            // Continua para pr√≥ximo seletor
        }
    }
    
    // Fallback: buscar por texto diretamente
    try {
        const itemTexto = await page.locator(`text=${nomeOrgao}`).first();
        if (await itemTexto.isVisible()) {
            console.log('      ‚úÖ Item encontrado via texto');
            return itemTexto;
        }
    } catch (error) {
        // Ignore
    }
    
    return null;
}

/**
 * Executa a√ß√£o de vincula√ß√£o (clique, checkbox, etc.)
 */
async function executarAcaoVinculacaoSaoJose(page, itemOrgao, timeout) {
    const seletores = [
    "button:has-text(\"Vincular ao Perito\")",
    "button:has-text(\"Vincular √ìrg√£o\")",
    "button:has-text(\"Adicionar √ìrg√£o\")",
    "button:has-text(\"Selecionar √ìrg√£o\")",
    "button:has-text(\"Vincular\")",
    "button:has-text(\"Adicionar\")",
    "button:has-text(\"Selecionar\")",
    "button:has-text(\"Confirmar\")",
    "button:has-text(\"OK\")",
    ".btn-vincular",
    ".btn-adicionar",
    ".btn-selecionar",
    ".btn-confirmar",
    ".mat-raised-button",
    "[data-action=\"vincular\"]",
    "[data-action=\"adicionar\"]",
    "[data-action=\"selecionar\"]",
    "input[type=\"checkbox\"]",
    ".checkbox",
    ".mat-checkbox",
    "[role=\"checkbox\"]"
];
    
    // Tentar clicar em bot√£o de vincula√ß√£o pr√≥ximo ao item
    for (const seletor of seletores) {
        try {
            // Buscar bot√£o dentro ou pr√≥ximo ao item
            const botao = await itemOrgao.$(seletor);
            if (botao && await botao.isVisible()) {
                await botao.click();
                console.log(`      ‚úÖ Bot√£o clicado no item: ${seletor}`);
                return true;
            }
            
            // Buscar bot√£o na mesma linha/container
            const container = await itemOrgao.locator('..').first();
            const botaoContainer = await container.$(seletor);
            if (botaoContainer && await botaoContainer.isVisible()) {
                await botaoContainer.click();
                console.log(`      ‚úÖ Bot√£o clicado no container: ${seletor}`);
                return true;
            }
        } catch (error) {
            // Continua para pr√≥ximo seletor
        }
    }
    
    // Fallback: clicar no pr√≥prio item
    try {
        await itemOrgao.click();
        console.log('      ‚úÖ Item clicado diretamente');
        return true;
    } catch (error) {
        console.log('      ‚ùå Falha ao clicar no item');
    }
    
    return false;
}

/**
 * Confirma a vincula√ß√£o (aguarda feedback visual)
 */
async function confirmarVinculacaoSaoJose(page, timeout) {
    // Aguardar indicadores de sucesso
    const indicadoresSucesso = [
        '.success-message',
        '.sucesso',
        '.alert-success',
        '.notification-success',
        'text=sucesso',
        'text=vinculado',
        'text=adicionado'
    ];
    
    for (const indicador of indicadoresSucesso) {
        try {
            await page.waitForSelector(indicador, { 
                timeout: 3000, 
                state: 'visible' 
            });
            console.log(`      ‚úÖ Sucesso confirmado: ${indicador}`);
            return true;
        } catch (error) {
            // Continua para pr√≥ximo indicador
        }
    }
    
    // Aguardar mudan√ßa na URL ou conte√∫do
    await page.waitForTimeout(2000);
    
    // Verificar se houve redirecionamento ou mudan√ßa
    try {
        const url = page.url();
        if (url.includes('sucesso') || url.includes('confirmado')) {
            console.log('      ‚úÖ Sucesso confirmado via URL');
            return true;
        }
    } catch (error) {
        // Ignore
    }
    
    // Assumir sucesso se n√£o houve erro
    console.log('      ‚ö†Ô∏è Sucesso assumido (sem indicadores claros)');
    return true;
}
