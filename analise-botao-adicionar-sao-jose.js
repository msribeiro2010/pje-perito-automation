/**
 * Script para analisar e corrigir o problema do bot√£o "Adicionar √ìrg√£o Julgador"
 * nas varas de S√£o Jos√© dos Campos
 * 
 * Problema identificado: Terminal#1039-1060 mostra falhas no seletor do bot√£o
 * "Adicionar √ìrg√£o Julgador" especificamente para as varas de S√£o Jos√© dos Campos
 */

const fs = require('fs');
const path = require('path');

// Configura√ß√£o espec√≠fica para S√£o Jos√© dos Campos
const SAO_JOSE_CONFIG = {
    varas: [
        '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
        '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos', 
        '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
        '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos'
    ],
    
    // Novos seletores espec√≠ficos baseados na an√°lise dos logs
    seletoresBotaoAdicionar: [
        // Seletores mais espec√≠ficos primeiro
        'mat-expansion-panel[aria-expanded="true"] button:has-text("Adicionar")',
        'mat-expansion-panel-content button:has-text("Adicionar √ìrg√£o Julgador")',
        'div[class*="mat-expansion-panel-content"] button[class*="mat-button"]',
        
        // Seletores por atributos Angular Material
        'button[mat-button]:has-text("Adicionar")',
        'button[mat-raised-button]:has-text("Adicionar")',
        'button[mat-flat-button]:has-text("Adicionar")',
        
        // Seletores por estrutura DOM espec√≠fica
        '#cdk-accordion-child-8 button',
        '[id*="cdk-accordion"] button:has-text("Adicionar")',
        'mat-accordion mat-expansion-panel button',
        
        // Seletores por aria-label
        'button[aria-label*="Adicionar"]',
        'button[aria-label*="√ìrg√£o"]',
        'button[aria-label*="Julgador"]',
        
        // Seletores por data attributes
        'button[data-action="adicionar"]',
        'button[data-target*="orgao"]',
        
        // Seletores CSS mais gen√©ricos
        '.mat-expansion-panel-content .mat-button',
        '.panel-content button',
        '.accordion-content button',
        
        // Fallbacks extremos
        'button:contains("Adicionar")',
        'input[type="button"][value*="Adicionar"]',
        'a[role="button"]:contains("Adicionar")'
    ],
    
    // Estrat√©gias de espera e retry
    timeouts: {
        aguardarPainel: 5000,
        aguardarBotao: 8000,
        entreCliques: 2000,
        verificacao: 1000
    },
    
    tentativas: {
        maximas: 5,
        intervalo: 3000
    }
};

/**
 * Analisa o problema atual dos seletores
 */
function analisarProblema() {
    console.log('üîç AN√ÅLISE DO PROBLEMA - Bot√£o "Adicionar √ìrg√£o Julgador"');
    console.log('=' .repeat(60));
    
    const problemas = {
        seletores_falhando: [
            'button:has-text("Adicionar √ìrg√£o Julgador ao Perito")',
            'button:has-text("Adicionar √ìrg√£o Julgador")',
            'button:has-text("Adicionar")'
        ],
        
        causas_possiveis: [
            'Mudan√ßa na estrutura DOM do Angular Material',
            'Bot√£o sendo renderizado dinamicamente',
            'Painel n√£o expandido completamente',
            'Overlay ou modal bloqueando o elemento',
            'Timing de carregamento inadequado',
            'Seletores muito gen√©ricos causando conflitos'
        ],
        
        varas_afetadas: SAO_JOSE_CONFIG.varas
    };
    
    console.log('üìã Problemas identificados:');
    console.log(JSON.stringify(problemas, null, 2));
    
    return problemas;
}

/**
 * Cria seletores melhorados baseados na an√°lise
 */
function criarSeletoresMelhorados() {
    console.log('\nüîß CRIANDO SELETORES MELHORADOS');
    console.log('=' .repeat(60));
    
    const seletoresMelhorados = {
        // Estrat√©gia 1: Seletores contextuais espec√≠ficos
        contextuais: [
            // Dentro do painel expandido de √ìrg√£os Julgadores
            'mat-expansion-panel[aria-expanded="true"] mat-expansion-panel-content button:has-text("Adicionar")',
            'mat-expansion-panel:has(mat-panel-title:has-text("√ìrg√£os Julgadores")) button',
            
            // Por estrutura Angular Material
            '.mat-expansion-panel-content .mat-button-wrapper:has-text("Adicionar")',
            '.mat-expansion-panel-body button[class*="mat-button"]',
            
            // Por posi√ß√£o no DOM
            'mat-accordion > mat-expansion-panel:nth-child(n) button:has-text("Adicionar")',
            '#cdk-accordion-child-8 > div > div > button'
        ],
        
        // Estrat√©gia 2: Seletores por atributos espec√≠ficos
        atributos: [
            'button[ng-reflect-router-link*="adicionar"]',
            'button[ng-reflect-disabled="false"]:has-text("Adicionar")',
            'button[tabindex="0"]:has-text("Adicionar")',
            'button[type="button"]:has-text("Adicionar √ìrg√£o")'
        ],
        
        // Estrat√©gia 3: Seletores por texto flex√≠vel
        textoFlexivel: [
            'button:contains("Adicionar"):contains("√ìrg√£o")',
            'button:contains("Adicionar"):contains("Julgador")',
            'button[title*="Adicionar"]',
            '*[role="button"]:contains("Adicionar")',
            'a:contains("Adicionar √ìrg√£o")'
        ],
        
        // Estrat√©gia 4: Seletores por hierarquia
        hierarquia: [
            'mat-expansion-panel mat-expansion-panel-content > div > button',
            'mat-accordion mat-expansion-panel div[class*="content"] button',
            '.mat-expansion-panel .mat-expansion-panel-content .mat-button'
        ]
    };
    
    console.log('‚úÖ Seletores melhorados criados:');
    Object.keys(seletoresMelhorados).forEach(categoria => {
        console.log(`\nüìÇ ${categoria.toUpperCase()}:`);
        seletoresMelhorados[categoria].forEach((seletor, index) => {
            console.log(`  ${index + 1}. ${seletor}`);
        });
    });
    
    return seletoresMelhorados;
}

/**
 * Cria estrat√©gias de fallback
 */
function criarEstrategiasFallback() {
    console.log('\nüõ°Ô∏è CRIANDO ESTRAT√âGIAS DE FALLBACK');
    console.log('=' .repeat(60));
    
    const estrategias = {
        // Estrat√©gia 1: Aguardar e expandir painel
        expandirPainel: {
            descricao: 'Garantir que o painel esteja expandido antes de buscar o bot√£o',
            passos: [
                'Localizar header do painel "√ìrg√£os Julgadores"',
                'Verificar se aria-expanded="true"',
                'Se n√£o, clicar para expandir',
                'Aguardar anima√ß√£o de expans√£o',
                'Buscar bot√£o dentro do conte√∫do expandido'
            ]
        },
        
        // Estrat√©gia 2: Limpeza de overlays
        limparOverlays: {
            descricao: 'Remover poss√≠veis overlays que bloqueiam o bot√£o',
            passos: [
                'Fechar dropdowns abertos (mat-select)',
                'Fechar tooltips (mat-tooltip)',
                'Fechar modais (mat-dialog)',
                'Pressionar ESC para limpar estado'
            ]
        },
        
        // Estrat√©gia 3: Scroll e viewport
        ajustarViewport: {
            descricao: 'Garantir que o bot√£o esteja vis√≠vel no viewport',
            passos: [
                'Scroll at√© o painel de √ìrg√£os Julgadores',
                'Aguardar estabiliza√ß√£o',
                'Verificar se bot√£o est√° no viewport',
                'Ajustar zoom se necess√°rio'
            ]
        },
        
        // Estrat√©gia 4: Simula√ß√£o de eventos
        simularEventos: {
            descricao: 'Usar eventos JavaScript diretos se seletores falharem',
            passos: [
                'Localizar elemento por querySelector',
                'Disparar evento click programaticamente',
                'Verificar mudan√ßa de estado',
                'Confirmar abertura de modal'
            ]
        }
    };
    
    console.log('üìã Estrat√©gias de fallback:');
    Object.keys(estrategias).forEach(nome => {
        const estrategia = estrategias[nome];
        console.log(`\nüéØ ${nome.toUpperCase()}:`);
        console.log(`   Descri√ß√£o: ${estrategia.descricao}`);
        console.log(`   Passos:`);
        estrategia.passos.forEach((passo, index) => {
            console.log(`     ${index + 1}. ${passo}`);
        });
    });
    
    return estrategias;
}

/**
 * Gera c√≥digo de corre√ß√£o
 */
function gerarCodigoCorrecao() {
    console.log('\nüíª GERANDO C√ìDIGO DE CORRE√á√ÉO');
    console.log('=' .repeat(60));
    
    const codigoCorrecao = `
// Fun√ß√£o melhorada para encontrar bot√£o "Adicionar √ìrg√£o Julgador"
async function encontrarBotaoAdicionarMelhorado(page, tentativa = 1) {
    console.log(\`üîç Tentativa \${tentativa} - Procurando bot√£o "Adicionar √ìrg√£o Julgador"...\`);
    
    // Estrat√©gia 1: Garantir painel expandido
    await garantirPainelExpandido(page);
    
    // Estrat√©gia 2: Limpar overlays
    await limparOverlaysAngular(page);
    
    // Estrat√©gia 3: Seletores melhorados em ordem de prioridade
    const seletoresPrioritarios = [
        'mat-expansion-panel[aria-expanded="true"] button:has-text("Adicionar")',
        'mat-expansion-panel-content button:has-text("Adicionar √ìrg√£o Julgador")',
        '#cdk-accordion-child-8 button:has-text("Adicionar")',
        'button[mat-button]:has-text("Adicionar")',
        '.mat-expansion-panel-content .mat-button:has-text("Adicionar")'
    ];
    
    for (const seletor of seletoresPrioritarios) {
        try {
            console.log(\`   Testando: \${seletor}\`);
            const botao = page.locator(seletor).first();
            
            // Aguardar elemento aparecer
            await botao.waitFor({ timeout: 3000 });
            
            // Verificar se est√° vis√≠vel
            if (await botao.isVisible()) {
                console.log(\`‚úÖ Bot√£o encontrado com: \${seletor}\`);
                return botao;
            }
        } catch (error) {
            console.log(\`   ‚ùå Falhou: \${error.message}\`);
        }
    }
    
    // Estrat√©gia 4: Fallback com JavaScript
    try {
        const botaoJS = await page.evaluate(() => {
            const botoes = Array.from(document.querySelectorAll('button'));
            return botoes.find(btn => 
                btn.textContent.includes('Adicionar') && 
                (btn.textContent.includes('√ìrg√£o') || btn.textContent.includes('Julgador'))
            );
        });
        
        if (botaoJS) {
            console.log('‚úÖ Bot√£o encontrado via JavaScript');
            return page.locator('button').filter({ hasText: /Adicionar.*√ìrg√£o|Adicionar.*Julgador/ }).first();
        }
    } catch (error) {
        console.log(\`‚ùå Fallback JavaScript falhou: \${error.message}\`);
    }
    
    // Se chegou aqui, n√£o encontrou
    if (tentativa < 3) {
        console.log(\`‚è≥ Aguardando \${SAO_JOSE_CONFIG.tentativas.intervalo}ms antes da pr√≥xima tentativa...\`);
        await page.waitForTimeout(SAO_JOSE_CONFIG.tentativas.intervalo);
        return encontrarBotaoAdicionarMelhorado(page, tentativa + 1);
    }
    
    throw new Error('Bot√£o "Adicionar √ìrg√£o Julgador" n√£o encontrado ap√≥s todas as tentativas');
}

// Fun√ß√£o auxiliar para garantir painel expandido
async function garantirPainelExpandido(page) {
    try {
        const painelHeader = page.locator('mat-expansion-panel-header:has-text("√ìrg√£os Julgadores")');
        await painelHeader.waitFor({ timeout: 5000 });
        
        const isExpanded = await painelHeader.getAttribute('aria-expanded');
        if (isExpanded !== 'true') {
            console.log('üîÑ Expandindo painel de √ìrg√£os Julgadores...');
            await painelHeader.click();
            await page.waitForTimeout(2000); // Aguardar anima√ß√£o
        }
    } catch (error) {
        console.log(\`‚ö†Ô∏è Erro ao expandir painel: \${error.message}\`);
    }
}

// Fun√ß√£o auxiliar para limpar overlays
async function limparOverlaysAngular(page) {
    try {
        // Fechar mat-select abertos
        await page.keyboard.press('Escape');
        await page.waitForTimeout(500);
        
        // Fechar tooltips
        await page.mouse.click(10, 10); // Click em √°rea neutra
        await page.waitForTimeout(500);
    } catch (error) {
        console.log(\`‚ö†Ô∏è Erro ao limpar overlays: \${error.message}\`);
    }
}
`;
    
    console.log('‚úÖ C√≥digo de corre√ß√£o gerado');
    return codigoCorrecao;
}

/**
 * Cria arquivo de configura√ß√£o espec√≠fica
 */
function criarConfiguracaoEspecifica() {
    console.log('\n‚öôÔ∏è CRIANDO CONFIGURA√á√ÉO ESPEC√çFICA');
    console.log('=' .repeat(60));
    
    const configuracao = {
        nome: 'SAO_JOSE_CAMPOS_BOTAO_ADICIONAR_FIX',
        versao: '1.0.0',
        data: new Date().toISOString(),
        
        problema: {
            descricao: 'Bot√£o "Adicionar √ìrg√£o Julgador" n√£o encontrado nas varas de S√£o Jos√© dos Campos',
            terminal_referencia: 'Terminal#1039-1060',
            varas_afetadas: SAO_JOSE_CONFIG.varas
        },
        
        solucao: {
            seletores_melhorados: SAO_JOSE_CONFIG.seletoresBotaoAdicionar,
            timeouts: SAO_JOSE_CONFIG.timeouts,
            tentativas: SAO_JOSE_CONFIG.tentativas,
            estrategias_fallback: [
                'expandir_painel_primeiro',
                'limpar_overlays_angular',
                'usar_seletores_contextuais',
                'fallback_javascript'
            ]
        },
        
        implementacao: {
            arquivos_modificar: [
                'src/vincularOJ.js',
                'src/utils/seletores.js',
                'src/main/servidor-automation-v2.js'
            ],
            funcoes_criar: [
                'encontrarBotaoAdicionarMelhorado',
                'garantirPainelExpandido',
                'limparOverlaysAngular'
            ]
        }
    };
    
    console.log('üìã Configura√ß√£o espec√≠fica:');
    console.log(JSON.stringify(configuracao, null, 2));
    
    return configuracao;
}

/**
 * Executa an√°lise completa e gera relat√≥rio
 */
function executarAnaliseCompleta() {
    console.log('üöÄ INICIANDO AN√ÅLISE COMPLETA');
    console.log('=' .repeat(80));
    
    const timestamp = new Date().toISOString().split('T')[0];
    
    try {
        // 1. Analisar problema
        const problemas = analisarProblema();
        
        // 2. Criar seletores melhorados
        const seletoresMelhorados = criarSeletoresMelhorados();
        
        // 3. Criar estrat√©gias de fallback
        const estrategiasFallback = criarEstrategiasFallback();
        
        // 4. Gerar c√≥digo de corre√ß√£o
        const codigoCorrecao = gerarCodigoCorrecao();
        
        // 5. Criar configura√ß√£o espec√≠fica
        const configuracao = criarConfiguracaoEspecifica();
        
        // 6. Gerar relat√≥rio final
        const relatorio = {
            timestamp: new Date().toISOString(),
            problema_analisado: problemas,
            seletores_melhorados: seletoresMelhorados,
            estrategias_fallback: estrategiasFallback,
            codigo_correcao: codigoCorrecao,
            configuracao: configuracao,
            
            proximos_passos: [
                '1. Implementar seletores melhorados no vincularOJ.js',
                '2. Adicionar estrat√©gias de fallback',
                '3. Testar com as 4 varas de S√£o Jos√© dos Campos',
                '4. Monitorar logs para verificar efic√°cia',
                '5. Ajustar timeouts se necess√°rio'
            ],
            
            arquivos_gerados: [
                `ANALISE-BOTAO-ADICIONAR-SAO-JOSE-${timestamp}.json`,
                'codigo-correcao-botao-adicionar.js'
            ]
        };
        
        // Salvar relat√≥rio
        const nomeRelatorio = `ANALISE-BOTAO-ADICIONAR-SAO-JOSE-${timestamp}.json`;
        fs.writeFileSync(nomeRelatorio, JSON.stringify(relatorio, null, 2));
        
        // Salvar c√≥digo de corre√ß√£o
        fs.writeFileSync('codigo-correcao-botao-adicionar.js', codigoCorrecao);
        
        console.log('\n‚úÖ AN√ÅLISE COMPLETA FINALIZADA');
        console.log('=' .repeat(80));
        console.log(`üìÑ Relat√≥rio salvo: ${nomeRelatorio}`);
        console.log(`üíª C√≥digo salvo: codigo-correcao-botao-adicionar.js`);
        console.log('\nüìã RESUMO:');
        console.log(`   ‚Ä¢ Problema: Bot√£o "Adicionar √ìrg√£o Julgador" n√£o encontrado`);
        console.log(`   ‚Ä¢ Varas afetadas: ${SAO_JOSE_CONFIG.varas.length}`);
        console.log(`   ‚Ä¢ Seletores criados: ${SAO_JOSE_CONFIG.seletoresBotaoAdicionar.length}`);
        console.log(`   ‚Ä¢ Estrat√©gias de fallback: ${Object.keys(estrategiasFallback).length}`);
        console.log('\nüéØ PR√ìXIMOS PASSOS:');
        relatorio.proximos_passos.forEach((passo, index) => {
            console.log(`   ${passo}`);
        });
        
        return relatorio;
        
    } catch (error) {
        console.error('‚ùå Erro durante an√°lise:', error.message);
        throw error;
    }
}

// Executar an√°lise
if (require.main === module) {
    executarAnaliseCompleta();
}

module.exports = {
    SAO_JOSE_CONFIG,
    analisarProblema,
    criarSeletoresMelhorados,
    criarEstrategiasFallback,
    gerarCodigoCorrecao,
    executarAnaliseCompleta
};