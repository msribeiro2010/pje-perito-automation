/**
 * Script de Diagn√≥stico - Timing de Fechamento da P√°gina
 * Identifica exatamente quando e onde a p√°gina est√° sendo fechada
 */

const { chromium } = require('playwright');
const ServidorAutomationV2 = require('./src/main/servidor-automation-v2');

async function debugPageClosureTiming() {
  console.log('üîç === DIAGN√ìSTICO: TIMING DE FECHAMENTO DA P√ÅGINA ===');
  
  let browser = null;
  let context = null;
  let page = null;
  let pageClosedAt = null;
  let contextClosedAt = null;
  let browserClosedAt = null;
  
  try {
    // 1. Configurar monitoramento de eventos
    console.log('\nüìã FASE 1: Configurando monitoramento de eventos...');
    
    browser = await chromium.launch({ 
      headless: false,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    context = await browser.newContext({
      viewport: { width: 1280, height: 720 },
      userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
    });
    
    page = await context.newPage();
    
    // Monitorar eventos de fechamento
    page.on('close', () => {
      pageClosedAt = new Date().toISOString();
      console.log(`‚ùå P√ÅGINA FECHADA EM: ${pageClosedAt}`);
      console.log('üìç Stack trace do fechamento da p√°gina:');
      console.trace();
    });
    
    context.on('close', () => {
      contextClosedAt = new Date().toISOString();
      console.log(`‚ùå CONTEXTO FECHADO EM: ${contextClosedAt}`);
      console.log('üìç Stack trace do fechamento do contexto:');
      console.trace();
    });
    
    browser.on('disconnected', () => {
      browserClosedAt = new Date().toISOString();
      console.log(`‚ùå NAVEGADOR DESCONECTADO EM: ${browserClosedAt}`);
      console.log('üìç Stack trace da desconex√£o do navegador:');
      console.trace();
    });
    
    console.log('‚úÖ Monitoramento configurado');
    
    // 2. Testar navega√ß√£o b√°sica
    console.log('\nüìã FASE 2: Testando navega√ß√£o b√°sica...');
    await page.goto('https://pje.trf1.jus.br/pje/login.seam');
    console.log('‚úÖ Navega√ß√£o para login realizada');
    
    // Verificar se p√°gina ainda est√° ativa
    if (page.isClosed()) {
      console.log('‚ùå P√ÅGINA J√Å FECHADA ap√≥s navega√ß√£o b√°sica!');
      return;
    }
    console.log('‚úÖ P√°gina ainda ativa ap√≥s navega√ß√£o');
    
    // 3. Simular processo de login (sem credenciais reais)
    console.log('\nüìã FASE 3: Simulando processo de login...');
    
    // Aguardar elementos de login aparecerem
    try {
      await page.waitForSelector('#username', { timeout: 10000 });
      console.log('‚úÖ Campo de usu√°rio encontrado');
      
      if (page.isClosed()) {
        console.log('‚ùå P√ÅGINA FECHADA ap√≥s encontrar campo de usu√°rio!');
        return;
      }
      
      // Simular preenchimento (sem submeter)
      await page.fill('#username', 'teste');
      console.log('‚úÖ Campo de usu√°rio preenchido');
      
      if (page.isClosed()) {
        console.log('‚ùå P√ÅGINA FECHADA ap√≥s preencher usu√°rio!');
        return;
      }
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro na simula√ß√£o de login: ${error.message}`);
      if (page.isClosed()) {
        console.log('‚ùå P√ÅGINA FECHADA durante erro de login!');
        return;
      }
    }
    
    // 4. Testar cria√ß√£o de inst√¢ncia de automa√ß√£o
    console.log('\nüìã FASE 4: Testando cria√ß√£o de inst√¢ncia de automa√ß√£o...');
    
    const automation = new ServidorAutomationV2();
    console.log('‚úÖ Inst√¢ncia de automa√ß√£o criada');
    
    if (page.isClosed()) {
      console.log('‚ùå P√ÅGINA FECHADA ap√≥s criar inst√¢ncia de automa√ß√£o!');
      return;
    }
    
    // 5. Testar inicializa√ß√£o do navegador na automa√ß√£o
    console.log('\nüìã FASE 5: Testando inicializa√ß√£o do navegador na automa√ß√£o...');
    
    try {
      // Simular inicializa√ß√£o sem fazer login real
      automation.browser = browser;
      automation.context = context;
      automation.page = page;
      
      console.log('‚úÖ Navegador configurado na automa√ß√£o');
      
      if (page.isClosed()) {
        console.log('‚ùå P√ÅGINA FECHADA ap√≥s configurar navegador na automa√ß√£o!');
        return;
      }
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro na configura√ß√£o da automa√ß√£o: ${error.message}`);
      if (page.isClosed()) {
        console.log('‚ùå P√ÅGINA FECHADA durante erro de configura√ß√£o!');
        return;
      }
    }
    
    // 6. Testar m√©todos espec√≠ficos que podem causar fechamento
    console.log('\nüìã FASE 6: Testando m√©todos espec√≠ficos...');
    
    try {
      // Testar ensureBrowserActive
      console.log('üîç Testando ensureBrowserActive...');
      await automation.ensureBrowserActive();
      console.log('‚úÖ ensureBrowserActive executado');
      
      if (page.isClosed()) {
        console.log('‚ùå P√ÅGINA FECHADA ap√≥s ensureBrowserActive!');
        return;
      }
      
      // Testar stabilizePage
      console.log('üîç Testando stabilizePage...');
      await automation.stabilizePage();
      console.log('‚úÖ stabilizePage executado');
      
      if (page.isClosed()) {
        console.log('‚ùå P√ÅGINA FECHADA ap√≥s stabilizePage!');
        return;
      }
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro nos m√©todos espec√≠ficos: ${error.message}`);
      if (page.isClosed()) {
        console.log('‚ùå P√ÅGINA FECHADA durante erro de m√©todos espec√≠ficos!');
        return;
      }
    }
    
    // 7. Aguardar um tempo para observar comportamento
    console.log('\nüìã FASE 7: Aguardando para observar comportamento...');
    
    for (let i = 1; i <= 10; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      if (page.isClosed()) {
        console.log(`‚ùå P√ÅGINA FECHADA durante aguardo (segundo ${i})!`);
        return;
      }
      
      console.log(`‚è±Ô∏è Segundo ${i}/10 - P√°gina ainda ativa`);
    }
    
    console.log('\n‚úÖ === DIAGN√ìSTICO CONCLU√çDO SEM FECHAMENTO PREMATURO ===');
    
  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error.message);
    console.error('Stack trace:', error.stack);
    
    if (page && page.isClosed()) {
      console.log('‚ùå P√ÅGINA FECHADA durante erro!');
    }
    
  } finally {
    console.log('\nüßπ === LIMPEZA MANUAL ===');
    
    try {
      if (page && !page.isClosed()) {
        console.log('üßπ Fechando p√°gina manualmente...');
        await page.close();
      }
      
      if (context) {
        console.log('üßπ Fechando contexto manualmente...');
        await context.close();
      }
      
      if (browser) {
        console.log('üßπ Fechando navegador manualmente...');
        await browser.close();
      }
      
    } catch (cleanupError) {
      console.log('‚ö†Ô∏è Erro na limpeza:', cleanupError.message);
    }
    
    // Relat√≥rio final
    console.log('\nüìä === RELAT√ìRIO FINAL ===');
    console.log(`P√°gina fechada em: ${pageClosedAt || 'N√£o fechada prematuramente'}`);
    console.log(`Contexto fechado em: ${contextClosedAt || 'N√£o fechado prematuramente'}`);
    console.log(`Navegador desconectado em: ${browserClosedAt || 'N√£o desconectado prematuramente'}`);
  }
}

// Executar diagn√≥stico
debugPageClosureTiming()
  .then(() => {
    console.log('\nüéâ Diagn√≥stico finalizado');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Erro fatal no diagn√≥stico:', error);
    process.exit(1);
  });