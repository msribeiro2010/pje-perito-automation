/**
 * üß™ TESTE ESPEC√çFICO PARA O CASO DO USU√ÅRIO
 * Dirlei Zanini Pereira - CPF: 09750350880
 */

const SmartOJIntegration = require('./src/utils/smart-oj-integration');
const OJProfileValidator = require('./src/utils/oj-profile-validator');

class TesteCasoUsuario {
    constructor() {
        this.integration = new SmartOJIntegration();
        this.validator = new OJProfileValidator();
    }

    /**
     * üîç SIMULA O CASO EXATO DO USU√ÅRIO
     */
    async simularCasoUsuario() {
        console.log('\nüß™ SIMULA√á√ÉO DO CASO DO USU√ÅRIO');
        console.log('=' .repeat(70));
        console.log('üë§ Servidor: Dirlei Zanini Pereira');
        console.log('üìÑ CPF: 09750350880');
        console.log('üé≠ Perfil: Assessor');
        console.log('');

        // Dados do servidor (configura√ß√£o)
        const servidor = {
            nome: 'Dirlei Zanini Pereira',
            cpf: '09750350880',
            perfil: 'Assessor'
        };

        // OJs da configura√ß√£o do servidor
        const ojsConfigurados = [
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia da Circunscri√ß√£o de Ara√ßatuba',
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia da Circunscri√ß√£o de Bauru',
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia da Circunscri√ß√£o de Sorocaba',
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Fernand√≥polis',
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de S√£o Jos√© do Rio Preto',
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Campinas',
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Franca',
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Presidente Prudente',
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Ribeir√£o Preto',
            'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de S√£o Jos√© dos Campos'
        ];

        // OJs existentes no PJe (simulando dados reais)
        const ojsExistentesNoPJe = [
            {
                nome: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Ara√ßatuba',
                perfis: ['Assessor'],
                dataVinculo: '12/09/2025'
            },
            {
                nome: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Bauru',
                perfis: ['Assessor'],
                dataVinculo: '12/09/2025'
            },
            {
                nome: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Campinas',
                perfis: ['Assessor'],
                dataVinculo: '13/09/2025'
            },
            {
                nome: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Fernand√≥polis',
                perfis: ['Assessor'],
                dataVinculo: '12/09/2025'
            },
            {
                nome: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Franca',
                perfis: ['Assessor'],
                dataVinculo: '12/09/2025'
            },
            {
                nome: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Presidente Prudente',
                perfis: ['Assessor'],
                dataVinculo: '13/09/2025'
            },
            {
                nome: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Ribeir√£o Preto',
                perfis: ['Assessor'],
                dataVinculo: '12/09/2025'
            },
            {
                nome: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Sorocaba',
                perfis: ['Assessor'],
                dataVinculo: '13/09/2025'
            },
            {
                nome: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de S√£o Jos√© do Rio Preto',
                perfis: ['Assessor'],
                dataVinculo: '13/09/2025'
            }
        ];

        console.log('üìã AN√ÅLISE DE CORRESPOND√äNCIA:');
        console.log('-'.repeat(70));

        // Converter OJs configurados para formato de processamento
        const ojsParaProcessar = ojsConfigurados.map(nome => ({
            nome: nome,
            perfil: 'Assessor'
        }));

        // Executar filtro
        const resultado = await this.integration.filterOJsForProcessing(ojsParaProcessar, ojsExistentesNoPJe);

        // Exibir resultados detalhados
        console.log('\nüìä RESULTADO DA AN√ÅLISE:');
        console.log('=' .repeat(50));

        console.log(`\n‚úÖ OJs que ser√£o PULADOS (j√° existem): ${resultado.toSkip.length}`);
        resultado.toSkip.forEach((oj, index) => {
            const existente = ojsExistentesNoPJe.find(e => 
                this.integration.normalizeOJName(e.nome) === this.integration.normalizeOJName(oj.nome)
            );
            console.log(`   ${index + 1}. ${oj.nome}`);
            console.log(`      ‚Ü≥ Existe como: "${existente?.nome}"`);
            console.log(`      ‚Ü≥ Data v√≠nculo: ${existente?.dataVinculo}`);
        });

        console.log(`\nüÜï OJs que ser√£o CRIADOS (n√£o existem): ${resultado.toCreate.length}`);
        resultado.toCreate.forEach((oj, index) => {
            console.log(`   ${index + 1}. ${oj.nome}`);
        });

        console.log(`\n‚ûï OJs que ter√£o PAPEL ADICIONADO: ${resultado.toAddRole.length}`);
        resultado.toAddRole.forEach((oj, index) => {
            console.log(`   ${index + 1}. ${oj.nome}`);
        });

        // Calcular estat√≠sticas
        const total = ojsConfigurados.length;
        const jaExistem = resultado.toSkip.length;
        const precisamCriar = resultado.toCreate.length;
        const precisamPapel = resultado.toAddRole.length;

        console.log('\nüìà ESTAT√çSTICAS:');
        console.log('=' .repeat(40));
        console.log(`üìä Total de OJs configurados: ${total}`);
        console.log(`‚úÖ J√° existem no PJe: ${jaExistem} (${((jaExistem/total)*100).toFixed(1)}%)`);
        console.log(`üÜï Precisam ser criados: ${precisamCriar} (${((precisamCriar/total)*100).toFixed(1)}%)`);
        console.log(`‚ûï Precisam de papel: ${precisamPapel} (${((precisamPapel/total)*100).toFixed(1)}%)`);

        // Verificar se o problema foi resolvido
        if (precisamCriar === 0 && precisamPapel === 0) {
            console.log('\nüéâ PROBLEMA RESOLVIDO!');
            console.log('   ‚úÖ Todos os OJs j√° existem no PJe');
            console.log('   ‚úÖ Sistema n√£o tentar√° recadastrar');
            console.log('   ‚úÖ Evitar√° duplica√ß√µes desnecess√°rias');
        } else if (precisamCriar <= 1) {
            console.log('\n‚úÖ PROBLEMA QUASE RESOLVIDO!');
            console.log(`   ‚úÖ ${jaExistem} de ${total} OJs detectados corretamente`);
            console.log(`   ‚ö†Ô∏è Apenas ${precisamCriar} OJ(s) ainda n√£o detectado(s)`);
        } else {
            console.log('\n‚ö†Ô∏è PROBLEMA PARCIALMENTE RESOLVIDO');
            console.log(`   ‚úÖ ${jaExistem} OJs detectados corretamente`);
            console.log(`   ‚ùå ${precisamCriar} OJs ainda n√£o detectados`);
        }

        return {
            total,
            jaExistem,
            precisamCriar,
            precisamPapel,
            taxaSucesso: (jaExistem / total) * 100
        };
    }

    /**
     * üîß TESTA NORMALIZA√á√ÉO ESPEC√çFICA PARA OJs PROBLEM√ÅTICOS
     */
    testarNormalizacaoProblematica() {
        console.log('\nüîß AN√ÅLISE DE OJs PROBLEM√ÅTICOS');
        console.log('=' .repeat(50));

        const casosProblematicos = [
            {
                configurado: 'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de S√£o Jos√© dos Campos',
                pje: 'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de S√£o Jos√© dos Campos'
            }
        ];

        casosProblematicos.forEach((caso, index) => {
            const normalConfigurado = this.integration.normalizeOJName(caso.configurado);
            const normalPJe = this.integration.normalizeOJName(caso.pje);
            const match = normalConfigurado === normalPJe;

            console.log(`\n${index + 1}. CASO PROBLEM√ÅTICO:`);
            console.log(`   Configurado: "${caso.configurado}"`);
            console.log(`   PJe:         "${caso.pje}"`);
            console.log(`   Normal Conf: "${normalConfigurado}"`);
            console.log(`   Normal PJe:  "${normalPJe}"`);
            console.log(`   Match: ${match ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

            if (!match) {
                console.log('   üîç Diferen√ßas encontradas:');
                const diff = this.encontrarDiferencas(normalConfigurado, normalPJe);
                diff.forEach(d => console.log(`      - ${d}`));
            }
        });
    }

    /**
     * üîç ENCONTRA DIFEREN√áAS ENTRE STRINGS NORMALIZADAS
     */
    encontrarDiferencas(str1, str2) {
        const palavras1 = str1.split(' ');
        const palavras2 = str2.split(' ');
        const diferencas = [];

        if (palavras1.length !== palavras2.length) {
            diferencas.push(`N√∫mero de palavras diferente: ${palavras1.length} vs ${palavras2.length}`);
        }

        const maxLength = Math.max(palavras1.length, palavras2.length);
        for (let i = 0; i < maxLength; i++) {
            const p1 = palavras1[i] || '[AUSENTE]';
            const p2 = palavras2[i] || '[AUSENTE]';
            if (p1 !== p2) {
                diferencas.push(`Posi√ß√£o ${i}: "${p1}" vs "${p2}"`);
            }
        }

        return diferencas;
    }

    /**
     * üöÄ EXECUTA TESTE COMPLETO
     */
    async executarTeste() {
        console.log('üß™ TESTE ESPEC√çFICO - CASO DO USU√ÅRIO');
        console.log('=' .repeat(80));

        try {
            // Simular caso do usu√°rio
            const resultado = await this.simularCasoUsuario();

            // Testar casos problem√°ticos
            this.testarNormalizacaoProblematica();

            // Relat√≥rio final
            console.log('\nüéØ RELAT√ìRIO FINAL DO TESTE');
            console.log('=' .repeat(50));
            console.log(`üìä Taxa de detec√ß√£o: ${resultado.taxaSucesso.toFixed(1)}%`);
            console.log(`‚úÖ OJs detectados: ${resultado.jaExistem}/${resultado.total}`);
            console.log(`üÜï OJs para criar: ${resultado.precisamCriar}`);
            console.log(`‚ûï OJs para adicionar papel: ${resultado.precisamPapel}`);

            if (resultado.taxaSucesso >= 90) {
                console.log('\nüéâ EXCELENTE! Sistema funcionando corretamente.');
            } else if (resultado.taxaSucesso >= 70) {
                console.log('\n‚úÖ BOM! Maioria dos casos detectados corretamente.');
            } else {
                console.log('\n‚ö†Ô∏è ATEN√á√ÉO! Sistema precisa de ajustes.');
            }

            return resultado;

        } catch (error) {
            console.error(`‚ùå Erro durante o teste: ${error.message}`);
            throw error;
        }
    }
}

// Executar teste
if (require.main === module) {
    const teste = new TesteCasoUsuario();
    teste.executarTeste();
}

module.exports = TesteCasoUsuario;