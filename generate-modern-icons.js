#!/usr/bin/env node

/**
 * Script para gerar √≠cones modernos em diferentes formatos
 * Converte o SVG moderno para PNG, ICO e ICNS
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

console.log('üé® Gerando √≠cones modernos para PJE Automation...\n');

const assetsDir = path.join(__dirname, 'assets');
const svgFile = path.join(assetsDir, 'pje-icon-modern.svg');

// Verificar se o SVG existe
if (!fs.existsSync(svgFile)) {
    console.error('‚ùå Arquivo SVG moderno n√£o encontrado:', svgFile);
    process.exit(1);
}

console.log('‚úÖ SVG moderno encontrado:', svgFile);

// Fun√ß√£o para converter SVG usando Node.js puro (sem depend√™ncias externas)
function generateModernIcons() {
    console.log('\nüîÑ Gerando √≠cones modernos...\n');
    
    // Ler o conte√∫do do SVG
    const svgContent = fs.readFileSync(svgFile, 'utf8');
    
    // Para sistemas que t√™m ImageMagick instalado, tentar convers√£o
    const conversions = [
        {
            format: 'PNG 256x256',
            command: `convert "${svgFile}" -resize 256x256 "${path.join(assetsDir, 'pje-icon-modern.png')}"`,
            output: 'pje-icon-modern.png'
        },
        {
            format: 'PNG 128x128', 
            command: `convert "${svgFile}" -resize 128x128 "${path.join(assetsDir, 'pje-icon-128.png')}"`,
            output: 'pje-icon-128.png'
        },
        {
            format: 'PNG 64x64',
            command: `convert "${svgFile}" -resize 64x64 "${path.join(assetsDir, 'pje-icon-64.png')}"`,
            output: 'pje-icon-64.png'
        },
        {
            format: 'PNG 32x32',
            command: `convert "${svgFile}" -resize 32x32 "${path.join(assetsDir, 'pje-icon-32.png')}"`,
            output: 'pje-icon-32.png'
        }
    ];
    
    // Verificar se ImageMagick est√° dispon√≠vel
    exec('convert -version', (error, stdout, stderr) => {
        if (error) {
            console.log('‚ö†Ô∏è  ImageMagick n√£o encontrado. Usando m√©todo alternativo...\n');
            generateIconsAlternative();
        } else {
            console.log('‚úÖ ImageMagick encontrado. Gerando √≠cones...\n');
            
            let completed = 0;
            conversions.forEach((conv, index) => {
                exec(conv.command, (error, stdout, stderr) => {
                    completed++;
                    if (error) {
                        console.log(`‚ùå Erro ao gerar ${conv.format}: ${error.message}`);
                    } else {
                        console.log(`‚úÖ ${conv.format} gerado: ${conv.output}`);
                    }
                    
                    if (completed === conversions.length) {
                        console.log('\nüéâ Gera√ß√£o de √≠cones conclu√≠da!');
                        updatePackageConfig();
                        updateShortcutScript();
                    }
                });
            });
        }
    });
}

// M√©todo alternativo sem ImageMagick (copia e renomeia o SVG)
function generateIconsAlternative() {
    console.log('üìù Usando SVG moderno como base para todos os formatos...\n');
    
    try {
        // Copiar SVG moderno como √≠cone principal
        fs.copyFileSync(svgFile, path.join(assetsDir, 'pje-icon-modern.png.svg'));
        console.log('‚úÖ √çcone SVG copiado como: pje-icon-modern.png.svg');
        
        // Atualizar refer√™ncias nos arquivos de configura√ß√£o
        console.log('‚úÖ Usando SVG como formato universal');
        
        console.log('\nüí° Para melhor qualidade, instale ImageMagick:');
        console.log('   macOS: brew install imagemagick');
        console.log('   Ubuntu/Debian: sudo apt-get install imagemagick');
        console.log('   Windows: Download from https://imagemagick.org/\n');
        
        updatePackageConfig();
        updateShortcutScript();
        
    } catch (error) {
        console.error('‚ùå Erro no m√©todo alternativo:', error.message);
    }
}

// Atualizar package.json para usar √≠cones modernos
function updatePackageConfig() {
    console.log('üîÑ Atualizando configura√ß√£o do package.json...');
    
    try {
        const packagePath = path.join(__dirname, 'package.json');
        const packageConfig = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
        
        // Atualizar refer√™ncias de √≠cones para as vers√µes modernas
        if (packageConfig.build && packageConfig.build.win) {
            packageConfig.build.win.icon = 'assets/pje-icon-modern.png';
        }
        if (packageConfig.build && packageConfig.build.mac) {
            packageConfig.build.mac.icon = 'assets/pje-icon-modern.png';
        }
        if (packageConfig.build && packageConfig.build.linux) {
            packageConfig.build.linux.icon = 'assets/pje-icon-modern.png';
        }
        
        fs.writeFileSync(packagePath, JSON.stringify(packageConfig, null, 2));
        console.log('‚úÖ package.json atualizado com √≠cones modernos');
        
    } catch (error) {
        console.log('‚ö†Ô∏è  Erro ao atualizar package.json:', error.message);
    }
}

// Atualizar script de atalho para usar √≠cone moderno
function updateShortcutScript() {
    console.log('üîÑ Atualizando script de cria√ß√£o de atalho...');
    
    try {
        const shortcutPath = path.join(__dirname, 'create-shortcut.js');
        let shortcutContent = fs.readFileSync(shortcutPath, 'utf8');
        
        // Substituir refer√™ncia do √≠cone antigo pelo moderno
        shortcutContent = shortcutContent.replace(
            /assets[\/\\]pje-icon\.svg/g,
            'assets/pje-icon-modern.svg'
        );
        
        fs.writeFileSync(shortcutPath, shortcutContent);
        console.log('‚úÖ Script de atalho atualizado com √≠cone moderno');
        
    } catch (error) {
        console.log('‚ö†Ô∏è  Erro ao atualizar script de atalho:', error.message);
    }
}

// Fun√ß√£o para mostrar preview do √≠cone (se poss√≠vel)
function showPreview() {
    console.log('\nüé® Novo √≠cone moderno criado com:');
    console.log('   ‚Ä¢ Gradiente roxo-azul moderno');
    console.log('   ‚Ä¢ Escudo representando justi√ßa e prote√ß√£o');
    console.log('   ‚Ä¢ Balan√ßa da justi√ßa estilizada');
    console.log('   ‚Ä¢ Engrenagem simbolizando automa√ß√£o');
    console.log('   ‚Ä¢ Elementos de conectividade');
    console.log('   ‚Ä¢ Sombras e brilhos para profundidade');
    console.log('   ‚Ä¢ Texto "PJE" integrado ao design\n');
}

// Executar gera√ß√£o
if (require.main === module) {
    showPreview();
    generateModernIcons();
}

module.exports = { generateModernIcons };