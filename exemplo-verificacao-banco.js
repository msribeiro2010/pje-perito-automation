// Exemplo de uso do sistema de verifica√ß√£o de banco de dados
// Demonstra como usar a verifica√ß√£o inteligente de OJs j√° cadastrados

const SmartDatabaseVerifier = require('./src/utils/smart-database-verifier');

async function exemploUsoSistema() {
  console.log('üöÄ Exemplo de uso do sistema de verifica√ß√£o de banco\n');
  
  const verifier = new SmartDatabaseVerifier();
  
  try {
    // 1. Inicializar sistema
    console.log('1Ô∏è‚É£ Inicializando sistema...');
    const initialized = await verifier.initialize();
    
    if (!initialized) {
      console.log('‚ùå Sistema n√£o p√¥de ser inicializado');
      return;
    }
    
    console.log('‚úÖ Sistema inicializado\n');
    
    // 2. Exemplo de servidores para processar
    const servidores = [
      {
        idUsuario: 30733,
        nome: 'Jo√£o Silva',
        cpf: '12345678901',
        orgaos: [
          '1¬™ Vara do Trabalho de Campinas',
          '2¬™ Vara do Trabalho de Campinas',
          'Vara do Trabalho de Limeira',
          'Vara do Trabalho de S√£o Jos√© dos Campos'
        ]
      },
      {
        idUsuario: 30734,
        nome: 'Maria Santos',
        cpf: '98765432100',
        orgaos: [
          '1¬™ Vara do Trabalho de Bauru',
          '2¬™ Vara do Trabalho de Bauru',
          'Vara do Trabalho de Araraquara'
        ]
      }
    ];
    
    console.log('2Ô∏è‚É£ Processando servidores com verifica√ß√£o inteligente...\n');
    
    // 3. Processar servidores com verifica√ß√£o de banco
    const resultado = await verifier.processarServidoresComVerificacao(servidores);
    
    console.log('üìä RESULTADO DO PROCESSAMENTO:');
    console.log(`   - Servidores processados: ${resultado.servidoresProcessados}`);
    console.log(`   - Servidores pulados: ${resultado.servidoresPulados}`);
    console.log(`   - Total OJs verificados: ${resultado.totalOjsVerificados}`);
    console.log(`   - OJs pulados: ${resultado.totalOjsPulados}`);
    console.log(`   - OJs para processar: ${resultado.totalOjsParaProcessar}`);
    console.log(`   - Tempo economizado: ${Math.round(resultado.tempoEconomizadoTotal / 60)}min\n`);
    
    // 4. Detalhar cada servidor
    console.log('üìã DETALHES POR SERVIDOR:');
    resultado.detalhes.forEach((detalhe, index) => {
      console.log(`\n${index + 1}. ${detalhe.servidor} (Status: ${detalhe.status})`);
      
      if (detalhe.ojsJaCadastrados && detalhe.ojsJaCadastrados.length > 0) {
        console.log('   ‚úÖ OJs j√° cadastrados:');
        detalhe.ojsJaCadastrados.forEach(oj => {
          console.log(`      - ${oj.nome} (ID: ${oj.idOrgaoJulgador})`);
        });
      }
      
      if (detalhe.ojsInativos && detalhe.ojsInativos.length > 0) {
        console.log('   ‚ö†Ô∏è OJs inativos:');
        detalhe.ojsInativos.forEach(oj => {
          console.log(`      - ${oj.nome} (Final: ${oj.dataFinal})`);
        });
      }
      
      if (detalhe.ojsParaProcessar && detalhe.ojsParaProcessar.length > 0) {
        console.log('   üîÑ OJs para processar:');
        detalhe.ojsParaProcessar.forEach(oj => {
          console.log(`      - ${oj}`);
        });
      }
      
      if (detalhe.tempoEconomizado > 0) {
        console.log(`   ‚è±Ô∏è Tempo economizado: ${detalhe.tempoEconomizado}s`);
      }
    });
    
    console.log('\n');
    
    // 5. Exemplo de verifica√ß√£o individual de OJs
    console.log('3Ô∏è‚É£ Exemplo de verifica√ß√£o individual...');
    const ojsParaVerificar = [
      '1¬™ Vara do Trabalho de Campinas',
      'Vara do Trabalho de Limeira',
      'Vara do Trabalho de S√£o Paulo' // Este n√£o deve existir
    ];
    
    const verificacaoIndividual = await verifier.verificarOJsServidor(30733, ojsParaVerificar);
    
    console.log('üìä Verifica√ß√£o individual:');
    console.log(`   - Total: ${verificacaoIndividual.estatisticas.totalVerificados}`);
    console.log(`   - J√° cadastrados: ${verificacaoIndividual.estatisticas.jaCadastrados}`);
    console.log(`   - Para processar: ${verificacaoIndividual.estatisticas.paraProcessar}`);
    console.log(`   - Economia: ${verificacaoIndividual.estatisticas.economiaEstimada}s`);
    
    console.log('\n');
    
    // 6. Exemplo de normaliza√ß√£o de OJ
    console.log('4Ô∏è‚É£ Exemplo de normaliza√ß√£o...');
    const ojsNormalizados = await verifier.normalizarOJ('S√£o Jos√©');
    
    console.log(`üîç OJs encontrados com "S√£o Jos√©": ${ojsNormalizados.length}`);
    ojsNormalizados.slice(0, 3).forEach(oj => {
      console.log(`   - ${oj.ds_orgao_julgador} (ID: ${oj.id_orgao_julgador})`);
    });
    
    console.log('\n');
    
    // 7. Relat√≥rio final de otimiza√ß√£o
    console.log('5Ô∏è‚É£ Relat√≥rio final de otimiza√ß√£o:');
    const relatorioFinal = verifier.gerarRelatorioOtimizacao();
    
    console.log('üìà Sistema:');
    console.log(`   - Inicializado: ${relatorioFinal.sistema.inicializado ? 'Sim' : 'N√£o'}`);
    console.log(`   - Verifica√ß√µes: ${relatorioFinal.sistema.totalVerificacoes}`);
    console.log(`   - OJs pulados: ${relatorioFinal.sistema.ojsPulados}`);
    console.log(`   - Tempo economizado: ${relatorioFinal.sistema.tempoEconomizado}s`);
    
    console.log('\nüìä Cache:');
    console.log(`   - Hit rate: ${relatorioFinal.cache.hitRate}`);
    console.log(`   - Tamanho: ${relatorioFinal.cache.cacheSize}/${relatorioFinal.cache.maxCacheSize}`);
    
    console.log('\nüéØ Efici√™ncia:');
    console.log(`   - Taxa de pulos: ${relatorioFinal.eficiencia.taxaPulados}`);
    console.log(`   - Tempo economizado: ${relatorioFinal.eficiencia.tempoEconomizadoMinutos}min`);
    
    console.log('\n‚úÖ Exemplo conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o exemplo:', error.message);
    console.error('Stack trace:', error.stack);
  } finally {
    // Limpar recursos
    await verifier.cleanup();
    console.log('\nüßπ Recursos limpos');
  }
}

// Executar exemplo
if (require.main === module) {
  exemploUsoSistema().catch(console.error);
}

module.exports = { exemploUsoSistema };

