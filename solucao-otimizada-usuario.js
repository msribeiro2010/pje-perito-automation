/**
 * üéØ SOLU√á√ÉO OTIMIZADA PARA CASO ESPEC√çFICO DO USU√ÅRIO
 * Sistema inteligente para detectar OJs j√° cadastrados e evitar re-cadastramento
 * Implementa detec√ß√£o avan√ßada, cache inteligente e processamento ultra-r√°pido
 */

const IntelligentCacheSystem = require('./src/utils/intelligent-cache-system');
const UltraFastDelayManager = require('./src/utils/ultra-fast-delay-manager');
const OptimizedTimeoutManager = require('./optimized-timeout-manager');

class SolucaoOtimizadaUsuario {
    constructor(options = {}) {
        this.config = {
            // Configura√ß√µes de detec√ß√£o
            detection: {
                similarityThreshold: 0.85,      // 85% de similaridade
                fuzzyMatchEnabled: true,        // Busca fuzzy
                normalizeNames: true,           // Normaliza√ß√£o de nomes
                cacheResults: true,             // Cache de resultados
                smartComparison: true           // Compara√ß√£o inteligente
            },
            
            // Configura√ß√µes de performance
            performance: {
                useCache: true,
                useTurboMode: true,
                useOptimizedTimeouts: true,
                parallelProcessing: true,
                batchSize: 5
            },
            
            // Configura√ß√µes de relat√≥rio
            reporting: {
                detailedLogs: true,
                generateReport: true,
                showStatistics: true,
                exportResults: false
            }
        };
        
        // Inicializar sistemas otimizados
        this.cache = new IntelligentCacheSystem({
            memoryTTL: 600000,  // 10 minutos
            diskCache: true,
            adaptiveTTL: true
        });
        
        this.delayManager = new UltraFastDelayManager({
            mode: 'ultra_fast',
            adaptive: true
        });
        
        this.timeoutManager = new OptimizedTimeoutManager({
            mode: 'critical'
        });
        
        // Dados do caso espec√≠fico do usu√°rio
        this.dadosUsuario = {
            servidor: {
                nome: 'Dirlei Zanini Pereira',
                cpf: '09750350880',
                cargo: 'Assessor'
            },
            ojsServidor: [
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia da Circunscri√ß√£o de Ara√ßatuba',
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia da Circunscri√ß√£o de Bauru',
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia da Circunscri√ß√£o de Sorocaba',
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Fernand√≥polis',
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de S√£o Jos√© do Rio Preto',
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Campinas',
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Franca',
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Presidente Prudente',
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de Ribeir√£o Preto',
                'Juizado Especial da Inf√¢ncia e da Adolesc√™ncia de S√£o Jos√© dos Campos'
            ],
            ojsPje: [
                'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Ara√ßatuba',
                'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Bauru',
                'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Campinas',
                'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Fernand√≥polis',
                'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Franca',
                'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Presidente Prudente',
                'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Ribeir√£o Preto',
                'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de Sorocaba',
                'Juizado Especial da Inf√¢ncia e Adolesc√™ncia de S√£o Jos√© do Rio Preto'
            ]
        };
        
        // Estat√≠sticas
        this.stats = {
            ojsAnalisados: 0,
            ojsDetectados: 0,
            ojsParaCriar: 0,
            ojsParaPular: 0,
            tempoTotal: 0,
            tempoEconomizado: 0,
            operacoesEvitadas: 0
        };
        
        console.log('üéØ [SOLU√á√ÉO] Sistema otimizado inicializado para caso espec√≠fico');
    }

    /**
     * üöÄ EXECUTAR SOLU√á√ÉO COMPLETA
     */
    async executarSolucao() {
        console.log('\nüéØ ========== INICIANDO SOLU√á√ÉO OTIMIZADA ==========');
        const startTime = Date.now();
        
        try {
            // 1. An√°lise inteligente dos OJs
            console.log('\nüîç FASE 1: An√°lise Inteligente dos OJs');
            const analiseResultado = await this.analisarOJsInteligente();
            
            // 2. Detec√ß√£o avan√ßada de correspond√™ncias
            console.log('\nüéØ FASE 2: Detec√ß√£o Avan√ßada de Correspond√™ncias');
            const deteccaoResultado = await this.detectarCorrespondencias(analiseResultado);
            
            // 3. Processamento otimizado
            console.log('\n‚ö° FASE 3: Processamento Otimizado');
            const processamentoResultado = await this.processarOtimizado(deteccaoResultado);
            
            // 4. Gera√ß√£o de relat√≥rio
            console.log('\nüìä FASE 4: Gera√ß√£o de Relat√≥rio');
            const relatorio = await this.gerarRelatorioCompleto(processamentoResultado);
            
            // 5. Estat√≠sticas finais
            this.stats.tempoTotal = Date.now() - startTime;
            this.exibirEstatisticasFinais();
            
            return {
                sucesso: true,
                resultado: processamentoResultado,
                relatorio: relatorio,
                stats: this.stats
            };
            
        } catch (error) {
            console.error('‚ùå [SOLU√á√ÉO] Erro na execu√ß√£o:', error.message);
            return {
                sucesso: false,
                erro: error.message,
                stats: this.stats
            };
        }
    }

    /**
     * üß† AN√ÅLISE INTELIGENTE DOS OJs
     */
    async analisarOJsInteligente() {
        const cacheKey = `analise_ojs_${this.dadosUsuario.servidor.cpf}`;
        
        return await this.cache.getOrCompute(cacheKey, async () => {
            console.log('üîç Analisando OJs do servidor...');
            
            const ojsNormalizados = this.dadosUsuario.ojsServidor.map(oj => ({
                original: oj,
                normalizado: this.normalizarNomeOJ(oj),
                palavrasChave: this.extrairPalavrasChave(oj),
                tipo: this.identificarTipoOJ(oj),
                localidade: this.extrairLocalidade(oj)
            }));
            
            console.log(`‚úÖ ${ojsNormalizados.length} OJs analisados e normalizados`);
            
            return {
                ojsOriginais: this.dadosUsuario.ojsServidor,
                ojsNormalizados: ojsNormalizados,
                totalOJs: ojsNormalizados.length
            };
        }, { ttl: 600000 }); // Cache por 10 minutos
    }

    /**
     * üéØ DETECTAR CORRESPOND√äNCIAS AVAN√áADAS
     */
    async detectarCorrespondencias(analiseResultado) {
        console.log('üéØ Detectando correspond√™ncias com PJe...');
        
        const correspondencias = [];
        const ojsSemCorrespondencia = [];
        
        for (const ojServidor of analiseResultado.ojsNormalizados) {
            await this.delayManager.criticalDelay();
            
            // Buscar correspond√™ncia no PJe
            const correspondencia = await this.buscarCorrespondenciaPJe(ojServidor);
            
            if (correspondencia) {
                correspondencias.push({
                    ojServidor: ojServidor,
                    ojPje: correspondencia.oj,
                    similaridade: correspondencia.similaridade,
                    metodo: correspondencia.metodo,
                    acao: 'PULAR' // J√° existe no PJe
                });
                this.stats.ojsDetectados++;
            } else {
                ojsSemCorrespondencia.push({
                    ojServidor: ojServidor,
                    acao: 'CRIAR' // Precisa ser criado
                });
                this.stats.ojsParaCriar++;
            }
            
            this.stats.ojsAnalisados++;
        }
        
        console.log(`‚úÖ ${correspondencias.length} correspond√™ncias encontradas`);
        console.log(`üìù ${ojsSemCorrespondencia.length} OJs precisam ser criados`);
        
        return {
            correspondencias: correspondencias,
            ojsParaCriar: ojsSemCorrespondencia,
            totalDetectados: correspondencias.length,
            totalParaCriar: ojsSemCorrespondencia.length
        };
    }

    /**
     * üîç BUSCAR CORRESPOND√äNCIA NO PJE
     */
    async buscarCorrespondenciaPJe(ojServidor) {
        // Cache por OJ espec√≠fico
        const cacheKey = `correspondencia_${ojServidor.normalizado}`;
        
        return await this.cache.getOrCompute(cacheKey, async () => {
            let melhorCorrespondencia = null;
            let maiorSimilaridade = 0;
            
            for (const ojPje of this.dadosUsuario.ojsPje) {
                const ojPjeNormalizado = this.normalizarNomeOJ(ojPje);
                
                // M√∫ltiplos m√©todos de compara√ß√£o
                const similaridades = {
                    exata: this.compararExato(ojServidor.normalizado, ojPjeNormalizado),
                    fuzzy: this.calcularSimilaridadeFuzzy(ojServidor.normalizado, ojPjeNormalizado),
                    palavrasChave: this.compararPalavrasChave(ojServidor.palavrasChave, this.extrairPalavrasChave(ojPje)),
                    localidade: this.compararLocalidade(ojServidor.localidade, this.extrairLocalidade(ojPje))
                };
                
                // Calcular similaridade ponderada
                const similaridadePonderada = (
                    similaridades.exata * 0.4 +
                    similaridades.fuzzy * 0.3 +
                    similaridades.palavrasChave * 0.2 +
                    similaridades.localidade * 0.1
                );
                
                if (similaridadePonderada > maiorSimilaridade && 
                    similaridadePonderada >= this.config.detection.similarityThreshold) {
                    maiorSimilaridade = similaridadePonderada;
                    melhorCorrespondencia = {
                        oj: ojPje,
                        similaridade: similaridadePonderada,
                        metodo: this.identificarMetodoDeteccao(similaridades),
                        detalhes: similaridades
                    };
                }
            }
            
            return melhorCorrespondencia;
        }, { ttl: 300000 }); // Cache por 5 minutos
    }

    /**
     * ‚ö° PROCESSAMENTO OTIMIZADO
     */
    async processarOtimizado(deteccaoResultado) {
        console.log('‚ö° Iniciando processamento otimizado...');
        
        const resultado = {
            ojsProcessados: [],
            ojsPulados: [],
            ojsCriados: [],
            tempoProcessamento: 0,
            operacoesRealizadas: 0
        };
        
        const startTime = Date.now();
        
        // Processar correspond√™ncias (pular)
        for (const correspondencia of deteccaoResultado.correspondencias) {
            await this.delayManager.batchDelay();
            
            resultado.ojsPulados.push({
                oj: correspondencia.ojServidor.original,
                motivo: `J√° existe no PJe: ${correspondencia.ojPje}`,
                similaridade: Math.round(correspondencia.similaridade * 100),
                tempoEconomizado: 30000 // 30 segundos por OJ
            });
            
            this.stats.ojsParaPular++;
            this.stats.tempoEconomizado += 30000;
            this.stats.operacoesEvitadas++;
        }
        
        // Processar OJs para criar
        for (const ojParaCriar of deteccaoResultado.ojsParaCriar) {
            await this.delayManager.batchDelay();
            
            resultado.ojsCriados.push({
                oj: ojParaCriar.ojServidor.original,
                acao: 'Criar no PJe',
                prioridade: 'Alta',
                tempoEstimado: 45000 // 45 segundos por cria√ß√£o
            });
            
            resultado.operacoesRealizadas++;
        }
        
        resultado.tempoProcessamento = Date.now() - startTime;
        
        console.log(`‚úÖ Processamento conclu√≠do em ${resultado.tempoProcessamento}ms`);
        console.log(`üö´ ${resultado.ojsPulados.length} OJs pulados (j√° existem)`);
        console.log(`üìù ${resultado.ojsCriados.length} OJs marcados para cria√ß√£o`);
        
        return resultado;
    }

    /**
     * üìä GERAR RELAT√ìRIO COMPLETO
     */
    async gerarRelatorioCompleto(processamentoResultado) {
        console.log('üìä Gerando relat√≥rio completo...');
        
        const relatorio = {
            timestamp: new Date().toISOString(),
            servidor: this.dadosUsuario.servidor,
            resumo: {
                totalOJs: this.dadosUsuario.ojsServidor.length,
                ojsDetectados: this.stats.ojsDetectados,
                ojsParaCriar: this.stats.ojsParaCriar,
                taxaDeteccao: Math.round((this.stats.ojsDetectados / this.dadosUsuario.ojsServidor.length) * 100),
                tempoEconomizado: Math.round(this.stats.tempoEconomizado / 1000),
                operacoesEvitadas: this.stats.operacoesEvitadas
            },
            detalhes: {
                ojsPulados: processamentoResultado.ojsPulados,
                ojsParaCriar: processamentoResultado.ojsCriados
            },
            performance: {
                tempoTotal: this.stats.tempoTotal,
                tempoProcessamento: processamentoResultado.tempoProcessamento,
                cacheStats: this.cache.getStats(),
                delayStats: this.delayManager.getStats()
            },
            recomendacoes: this.gerarRecomendacoes()
        };
        
        return relatorio;
    }

    /**
     * üí° GERAR RECOMENDA√á√ïES
     */
    gerarRecomendacoes() {
        const recomendacoes = [];
        
        const taxaDeteccao = (this.stats.ojsDetectados / this.dadosUsuario.ojsServidor.length) * 100;
        
        if (taxaDeteccao > 90) {
            recomendacoes.push('üéØ Excelente detec√ß√£o! Sistema funcionando perfeitamente.');
        } else if (taxaDeteccao > 70) {
            recomendacoes.push('‚úÖ Boa detec√ß√£o. Considere ajustar threshold de similaridade.');
        } else {
            recomendacoes.push('‚ö†Ô∏è Detec√ß√£o baixa. Revisar algoritmo de normaliza√ß√£o.');
        }
        
        if (this.stats.tempoEconomizado > 60000) {
            recomendacoes.push(`‚ö° Tempo economizado: ${Math.round(this.stats.tempoEconomizado/1000)}s`);
        }
        
        if (this.stats.operacoesEvitadas > 5) {
            recomendacoes.push(`üö´ ${this.stats.operacoesEvitadas} opera√ß√µes desnecess√°rias evitadas`);
        }
        
        return recomendacoes;
    }

    /**
     * üìà EXIBIR ESTAT√çSTICAS FINAIS
     */
    exibirEstatisticasFinais() {
        console.log('\nüìà ========== ESTAT√çSTICAS FINAIS ==========');
        console.log(`üë§ Servidor: ${this.dadosUsuario.servidor.nome}`);
        console.log(`üìä OJs analisados: ${this.stats.ojsAnalisados}`);
        console.log(`üéØ OJs detectados: ${this.stats.ojsDetectados}`);
        console.log(`üìù OJs para criar: ${this.stats.ojsParaCriar}`);
        console.log(`üö´ OJs para pular: ${this.stats.ojsParaPular}`);
        console.log(`‚è∞ Tempo total: ${Math.round(this.stats.tempoTotal / 1000)}s`);
        console.log(`‚ö° Tempo economizado: ${Math.round(this.stats.tempoEconomizado / 1000)}s`);
        console.log(`üö´ Opera√ß√µes evitadas: ${this.stats.operacoesEvitadas}`);
        
        const taxaDeteccao = Math.round((this.stats.ojsDetectados / this.stats.ojsAnalisados) * 100);
        console.log(`\nüèÜ TAXA DE DETEC√á√ÉO: ${taxaDeteccao}%`);
        
        if (taxaDeteccao > 90) {
            console.log('üéØ RESULTADO: EXCELENTE! Sistema detectou corretamente os OJs existentes.');
        } else if (taxaDeteccao > 70) {
            console.log('‚úÖ RESULTADO: BOM! Maioria dos OJs foi detectada corretamente.');
        } else {
            console.log('‚ö†Ô∏è RESULTADO: ATEN√á√ÉO! Muitos OJs n√£o foram detectados.');
        }
    }

    /**
     * üîß M√âTODOS AUXILIARES DE NORMALIZA√á√ÉO E COMPARA√á√ÉO
     */
    
    normalizarNomeOJ(nome) {
        return nome
            .toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/\s+/g, ' ')
            .replace(/[^a-z0-9\s]/g, '')
            .replace(/\b(da|de|do|das|dos|e)\b/g, '')
            .replace(/circunscricao/g, '')
            .replace(/especial/g, 'esp')
            .replace(/infancia/g, 'inf')
            .replace(/adolescencia/g, 'adol')
            .replace(/juizado/g, 'jui')
            .trim()
            .replace(/\s+/g, ' ');
    }
    
    extrairPalavrasChave(nome) {
        const palavrasIgnorar = ['da', 'de', 'do', 'das', 'dos', 'e', 'o', 'a', 'os', 'as'];
        return nome
            .toLowerCase()
            .split(/\s+/)
            .filter(palavra => palavra.length > 2 && !palavrasIgnorar.includes(palavra))
            .slice(0, 5); // M√°ximo 5 palavras-chave
    }
    
    identificarTipoOJ(nome) {
        if (nome.includes('Juizado Especial')) return 'juizado_especial';
        if (nome.includes('Vara')) return 'vara';
        if (nome.includes('Tribunal')) return 'tribunal';
        return 'outros';
    }
    
    extrairLocalidade(nome) {
        const match = nome.match(/de\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/g);
        return match ? match[match.length - 1].replace('de ', '') : '';
    }
    
    compararExato(nome1, nome2) {
        return nome1 === nome2 ? 1.0 : 0.0;
    }
    
    calcularSimilaridadeFuzzy(str1, str2) {
        const len1 = str1.length;
        const len2 = str2.length;
        const matrix = Array(len2 + 1).fill().map(() => Array(len1 + 1).fill(0));
        
        for (let i = 0; i <= len1; i++) matrix[0][i] = i;
        for (let j = 0; j <= len2; j++) matrix[j][0] = j;
        
        for (let j = 1; j <= len2; j++) {
            for (let i = 1; i <= len1; i++) {
                const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(
                    matrix[j - 1][i] + 1,
                    matrix[j][i - 1] + 1,
                    matrix[j - 1][i - 1] + cost
                );
            }
        }
        
        const maxLen = Math.max(len1, len2);
        return maxLen === 0 ? 1.0 : (maxLen - matrix[len2][len1]) / maxLen;
    }
    
    compararPalavrasChave(palavras1, palavras2) {
        if (palavras1.length === 0 || palavras2.length === 0) return 0;
        
        const intersecao = palavras1.filter(p => palavras2.includes(p)).length;
        const uniao = new Set([...palavras1, ...palavras2]).size;
        
        return intersecao / uniao;
    }
    
    compararLocalidade(loc1, loc2) {
        if (!loc1 || !loc2) return 0;
        return this.calcularSimilaridadeFuzzy(loc1.toLowerCase(), loc2.toLowerCase());
    }
    
    identificarMetodoDeteccao(similaridades) {
        if (similaridades.exata === 1.0) return 'Correspond√™ncia Exata';
        if (similaridades.fuzzy > 0.9) return 'Correspond√™ncia Fuzzy Alta';
        if (similaridades.palavrasChave > 0.8) return 'Correspond√™ncia por Palavras-Chave';
        return 'Correspond√™ncia por Localidade';
    }
}

// Executar solu√ß√£o se chamado diretamente
if (require.main === module) {
    (async () => {
        console.log('üöÄ Iniciando Solu√ß√£o Otimizada para Caso do Usu√°rio...');
        
        const solucao = new SolucaoOtimizadaUsuario();
        const resultado = await solucao.executarSolucao();
        
        if (resultado.sucesso) {
            console.log('\nüéâ ========== SOLU√á√ÉO EXECUTADA COM SUCESSO ==========');
            console.log('üìä Relat√≥rio salvo e estat√≠sticas geradas.');
            console.log('‚úÖ Sistema funcionando corretamente!');
        } else {
            console.log('\n‚ùå ========== ERRO NA EXECU√á√ÉO ==========');
            console.log(`Erro: ${resultado.erro}`);
        }
    })();
}

module.exports = SolucaoOtimizadaUsuario;