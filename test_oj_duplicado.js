// Script de teste para verificar comportamento quando OJ j√° est√° vinculado

const { chromium } = require('playwright');
const { vincularOJ } = require('./src/vincularOJ.js');

async function testarOJDuplicado() {
  console.log('üß™ Testando comportamento quando OJ j√° est√° vinculado...');
  
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();
  
  try {
    // Navegar para uma p√°gina de teste (substitua pela URL real do PJE)
    console.log('üìç Navegando para o PJE...');
    await page.goto('https://pje.trt15.jus.br/pje/');
    
    // Aguardar login manual
    console.log('‚è≥ Fa√ßa login manualmente e navegue at√© a p√°gina de cadastro do perito...');
    console.log('‚è≥ Pressione Enter quando estiver na p√°gina correta...');
    
    // Aguardar input do usu√°rio
    await new Promise(resolve => {
      process.stdin.once('data', () => resolve());
    });
    
    // Testar vincula√ß√£o de um OJ que j√° pode estar vinculado
    const ojTeste = 'Vara do Trabalho de Rio Claro';
    
    console.log(`üîó Tentando vincular OJ: ${ojTeste}`);
    
    try {
      await vincularOJ(page, ojTeste);
      console.log('‚úÖ Vincula√ß√£o realizada com sucesso');
    } catch (error) {
      console.log('‚ùå Erro na vincula√ß√£o:', error.message);
      
      // Verificar se √© um erro de duplicata ou outro tipo
      if (error.message.includes('n√£o encontrado')) {
        console.log('üîç Erro: OJ n√£o encontrado na lista');
      } else if (error.message.includes('M√∫ltiplas op√ß√µes')) {
        console.log('üîÄ Erro: M√∫ltiplas op√ß√µes encontradas');
      } else if (error.message.includes('p√°gina foi fechada')) {
        console.log('üö™ Erro: P√°gina foi fechada inesperadamente');
      } else {
        console.log('‚ùì Erro desconhecido - pode ser OJ j√° vinculado ou outro problema');
      }
    }
    
    // Verificar se h√° mensagens de erro na p√°gina
    console.log('üîç Verificando mensagens de erro na p√°gina...');
    
    const possiveisMensagensErro = [
      'j√° vinculado',
      'j√° cadastrado', 
      'duplicado',
      'n√£o √© poss√≠vel vincular',
      'erro',
      'falha',
      'inv√°lido'
    ];
    
    for (const mensagem of possiveisMensagensErro) {
      try {
        const elemento = await page.locator(`text=${mensagem}`).first();
        if (await elemento.isVisible()) {
          const textoCompleto = await elemento.textContent();
          console.log(`‚ö†Ô∏è  Mensagem encontrada: "${textoCompleto}"`);
        }
      } catch {
        // Mensagem n√£o encontrada, continuar
      }
    }
    
    // Verificar alertas ou modais
    console.log('üîç Verificando alertas ou modais...');
    
    const alertas = await page.locator('.alert, .modal, .toast, .notification, [role="alert"]').all();
    for (let i = 0; i < alertas.length; i++) {
      try {
        if (await alertas[i].isVisible()) {
          const texto = await alertas[i].textContent();
          console.log(`üì¢ Alerta ${i + 1}: "${texto.trim()}"`);
        }
      } catch {
        // Continuar se houver erro
      }
    }
    
    console.log('\nüìã RESUMO DO COMPORTAMENTO:');
    console.log('1. O sistema atual n√£o possui valida√ß√£o espec√≠fica para OJs j√° vinculados');
    console.log('2. A automa√ß√£o tentar√° vincular novamente mesmo se j√° estiver vinculado');
    console.log('3. O comportamento depende da resposta do sistema PJE');
    console.log('4. Erros s√£o capturados e reportados como warnings no log');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  } finally {
    console.log('\n‚è≥ Pressione Enter para fechar o navegador...');
    await new Promise(resolve => {
      process.stdin.once('data', () => resolve());
    });
    
    await browser.close();
  }
}

// Executar o teste
if (require.main === module) {
  testarOJDuplicado().catch(console.error);
}

module.exports = { testarOJDuplicado };