#!/usr/bin/env node
/**
 * Teste do Sistema Inteligente de Verifica√ß√£o de OJs
 * Demonstra como o sistema consulta o banco antes de fazer cadastros
 */

const DatabaseConnection = require('./src/utils/database-connection.js');

async function testarVerificacaoInteligente() {
  console.log('üß† TESTE DO SISTEMA INTELIGENTE DE VERIFICA√á√ÉO DE OJs');
  console.log('=' .repeat(60));
  
  const dbConnection = new DatabaseConnection();
  
  try {
    // 1. Conectar ao banco
    console.log('\n1Ô∏è‚É£ Conectando ao banco de dados...');
    const connected = await dbConnection.initialize();
    
    if (!connected) {
      console.log('‚ùå N√£o foi poss√≠vel conectar ao banco. Finalizando teste.');
      return;
    }
    
    // 2. Exemplo de servidor para teste (substitua por um CPF real do seu sistema)
    const cpfTeste = '12345678901'; // Substitua por um CPF real
    console.log(`\n2Ô∏è‚É£ Buscando servidor com CPF: ${cpfTeste}`);
    
    const resultadoServidor = await dbConnection.buscarServidorPorCPF(cpfTeste);
    
    if (!resultadoServidor.existe) {
      console.log(`‚ö†Ô∏è  Servidor com CPF ${cpfTeste} n√£o encontrado.`);
      console.log('üí° Para testar, use um CPF de servidor que j√° existe no sistema.');
      return;
    }
    
    console.log('‚úÖ Servidor encontrado:');
    console.log(`   ID: ${resultadoServidor.servidor.idUsuario}`);
    console.log(`   CPF: ${resultadoServidor.servidor.cpf}`);
    console.log(`   Total OJs j√° cadastrados: ${resultadoServidor.servidor.totalOjsCadastrados}`);
    
    // 3. Lista de exemplo de OJs para verificar
    const ojsParaTeste = [
      '1¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      'Vara C√≠vel de Taubat√©',
      'Tribunal Regional do Trabalho da 15¬™ Regi√£o - TRT15'
    ];
    
    console.log(`\n3Ô∏è‚É£ Verificando ${ojsParaTeste.length} OJs de exemplo...`);
    
    // 4. Realizar verifica√ß√£o inteligente
    const verificacao = await dbConnection.verificarOJsCadastrados(
      resultadoServidor.servidor.idUsuario,
      ojsParaTeste
    );
    
    // 5. Exibir resultados
    console.log('\nüìä RESULTADOS DA VERIFICA√á√ÉO INTELIGENTE:');
    console.log('-'.repeat(50));
    console.log(`   üìã Total verificados: ${verificacao.totalVerificados}`);
    console.log(`   ‚úÖ J√° cadastrados (ativos): ${verificacao.ojsJaCadastrados.length}`);
    console.log(`   ‚è∏Ô∏è  Inativos: ${verificacao.ojsInativos.length}`);
    console.log(`   üîÑ Para processar: ${verificacao.ojsParaProcessar.length}`);
    console.log(`   ‚ö° Economia estimada: ${verificacao.estatisticas.economiaEstimada} segundos`);
    
    if (verificacao.ojsJaCadastrados.length > 0) {
      console.log('\n‚úÖ OJs J√Å CADASTRADOS (n√£o ser√£o processados):');
      verificacao.ojsJaCadastrados.forEach((oj, index) => {
        console.log(`   ${index + 1}. ${oj.nome} (desde ${oj.dataInicio})`);
      });
    }
    
    if (verificacao.ojsInativos.length > 0) {
      console.log('\n‚è∏Ô∏è  OJs INATIVOS (hist√≥rico):');
      verificacao.ojsInativos.forEach((oj, index) => {
        console.log(`   ${index + 1}. ${oj.nome} (${oj.dataInicio} at√© ${oj.dataFinal})`);
      });
    }
    
    if (verificacao.ojsParaProcessar.length > 0) {
      console.log('\nüîÑ OJs QUE SER√ÉO PROCESSADOS:');
      verificacao.ojsParaProcessar.forEach((oj, index) => {
        console.log(`   ${index + 1}. ${oj}`);
      });
    } else {
      console.log('\nüéâ OTIMIZA√á√ÉO M√ÅXIMA: Todos os OJs j√° est√£o cadastrados!');
      console.log('   O sistema pular√° este servidor completamente.');
    }
    
    // 6. Estat√≠sticas da economia
    console.log('\nüí∞ ECONOMIA ESTIMADA:');
    console.log('-'.repeat(30));
    console.log(`   ‚è±Ô∏è  Tempo economizado: ${verificacao.estatisticas.economiaEstimada} segundos`);
    console.log(`   üñ±Ô∏è  Cliques evitados: ~${verificacao.ojsJaCadastrados.length * 3}`);
    console.log(`   üìà Efici√™ncia: ${((verificacao.ojsJaCadastrados.length / verificacao.totalVerificados) * 100).toFixed(1)}% de otimiza√ß√£o`);
    
    console.log('\nüéØ COMO O SISTEMA FUNCIONAR√Å:');
    console.log('   1. Antes de processar cada servidor, consulta o banco');
    console.log('   2. Identifica OJs j√° cadastrados automaticamente');  
    console.log('   3. Processa apenas os OJs que realmente precisam ser cadastrados');
    console.log('   4. Economiza tempo e evita cliques desnecess√°rios');
    console.log('   5. Funciona mesmo se o banco estiver indispon√≠vel (modo fallback)');
    
  } catch (error) {
    console.error('\n‚ùå Erro durante o teste:', error.message);
    console.log('\nüîß SOLU√á√ÉO:');
    console.log('   1. Verifique as credenciais do banco em database.config.js');
    console.log('   2. Certifique-se de que o banco est√° acess√≠vel');
    console.log('   3. Use um CPF de servidor que existe no sistema');
  } finally {
    // Fechar conex√£o
    if (dbConnection) {
      await dbConnection.close();
      console.log('\nüîå Conex√£o com banco fechada.');
    }
  }
}

// Executar teste se chamado diretamente
if (require.main === module) {
  console.log('Para personalizar o teste, edite o CPF na linha 25 deste arquivo.');
  console.log('Use um CPF de servidor que j√° existe no seu sistema PJE.\n');
  
  testarVerificacaoInteligente()
    .then(() => {
      console.log('\n‚úÖ Teste conclu√≠do com sucesso!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Erro no teste:', error.message);
      process.exit(1);
    });
}

module.exports = { testarVerificacaoInteligente };