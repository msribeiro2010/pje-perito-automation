const { SmartOJCache } = require('./src/utils/smart-oj-cache');

// Teste espec√≠fico para o caso do Dirlei Zanini Pereira
async function testesDirleiReal() {
    console.log('üîç Teste espec√≠fico: Dirlei Zanini Pereira com cache sem perfis...\n');

    const cache = new SmartOJCache();

    // Simular exatamente o que est√° no cache persistente (sem perfis)
    const ojsNoCacheReal = [
        {
            oj: "1¬™ Vara do Trabalho de Franca",
            textoEncontrado: "1¬™ Vara do Trabalho de Franca",
            tipoCorrespondencia: "exata_normalizada"
            // Nota: SEM propriedade 'perfil' (cache antigo)
        },
        {
            oj: "1¬™ Vara do Trabalho de Sorocaba",
            textoEncontrado: "1¬™ Vara do Trabalho de Sorocaba",
            tipoCorrespondencia: "exata_normalizada"
            // Nota: SEM propriedade 'perfil' (cache antigo)
        },
        {
            oj: "2¬™ Vara do Trabalho de Araraquara",
            textoEncontrado: "1¬™ Vara do Trabalho de Araraquara",
            tipoCorrespondencia: "similaridade_alta"
            // Nota: SEM propriedade 'perfil' (cache antigo)
        },
        {
            oj: "3¬™ Vara do Trabalho de Piracicaba",
            textoEncontrado: "1¬™ Vara do Trabalho de Piracicaba",
            tipoCorrespondencia: "similaridade_alta"
            // Nota: SEM propriedade 'perfil' (cache antigo)
        }
    ];

    console.log('üì¶ Simulando carregamento do cache persistente (sem perfis)...');

    // Simular o m√©todo carregarCachePersistente reconstruindo o cache
    ojsNoCacheReal.forEach(item => {
        // Usar a l√≥gica corrigida: perfil null para indicar desconhecido
        const perfilExistente = item.perfil || null; // null = perfil desconhecido
        cache.atualizarCache(item.oj, {
            jaVinculado: true,
            textoEncontrado: item.textoEncontrado,
            tipoCorrespondencia: item.tipoCorrespondencia
        }, perfilExistente);
    });

    console.log('‚úÖ Cache reconstru√≠do em mem√≥ria');

    // Verificar conte√∫do do cache
    console.log('\nüìã Conte√∫do do cache ap√≥s reconstru√ß√£o:');
    for (const [key, value] of cache.cache.entries()) {
        console.log(`  ${key}:`);
        console.log(`    Perfil: ${value.perfil || 'null (desconhecido)'}`);
        console.log(`    Vinculado: ${value.jaVinculado}`);
    }

    // Cen√°rio real: usu√°rio configura com perfil diferente
    const ojsDesejadas = [
        "1¬™ Vara do Trabalho de Franca",
        "1¬™ Vara do Trabalho de Sorocaba",
        "2¬™ Vara do Trabalho de Araraquara",
        "3¬™ Vara do Trabalho de Piracicaba",
        "Nova OJ que n√£o est√° no cache"
    ];

    const perfilDesejado = "Estagi√°rio de Central de Atendimento";

    console.log('\nüéØ Cen√°rio real do Dirlei:');
    console.log(`   CPF: 097.503.508-80`);
    console.log(`   Perfil configurado: ${perfilDesejado}`);
    console.log(`   OJs no cache: ${ojsNoCacheReal.length} (sem informa√ß√£o de perfil)`);
    console.log(`   OJs desejadas: ${ojsDesejadas.length}`);

    // Simular o que est√° passado para verificarOJsComPerfilEmLote no sistema real
    const ojsVinculadasDoCache = ojsNoCacheReal.map(item => item.oj);

    console.log('\nüß† Executando an√°lise inteligente...');

    const resultado = cache.verificarOJsComPerfilEmLote(
        ojsDesejadas,
        ojsVinculadasDoCache, // OJs que v√™m do cache (simulando o sistema real)
        perfilDesejado,
        (mensagem, progresso) => {
            console.log(`   üìä ${mensagem} (${progresso}%)`);
        }
    );

    // Mostrar resultados detalhados
    console.log('\nüìä RESULTADOS - CEN√ÅRIO REAL DIRLEI:');
    console.log('=' .repeat(60));

    console.log(`\n‚úÖ OJs com perfil correto (${resultado.ojsJaVinculadosPerfilCorreto.length}):`);
    resultado.ojsJaVinculadosPerfilCorreto.forEach(item => {
        const oj = typeof item === 'object' ? item.oj : item;
        console.log(`   - ${oj} ‚úì`);
    });

    console.log(`\nüîÑ OJs com perfil diferente (${resultado.ojsVinculadosPerfilDiferente.length}):`);
    resultado.ojsVinculadosPerfilDiferente.forEach(item => {
        console.log(`   - ${item.oj}`);
        console.log(`     Atual: "${item.perfilEncontrado}" ‚Üí Desejado: "${item.perfilDesejado}"`);
    });

    console.log(`\n‚ùì OJs com perfil desconhecido (${resultado.ojsVinculadosPerfilDesconhecido.length}):`);
    resultado.ojsVinculadosPerfilDesconhecido.forEach(item => {
        const oj = typeof item === 'object' ? item.oj : item;
        console.log(`   - ${oj} (verificar perfil atual no sistema)`);
    });

    console.log(`\nüÜï OJs novas para vincular (${resultado.ojsParaVincular.length}):`);
    resultado.ojsParaVincular.forEach(oj => {
        console.log(`   - ${oj} (cadastrar com perfil "${perfilDesejado}")`);
    });

    // Estat√≠sticas finais
    const totalParaProcessar = resultado.ojsVinculadosPerfilDiferente.length +
                               resultado.ojsVinculadosPerfilDesconhecido.length +
                               resultado.ojsParaVincular.length;

    console.log('\nüìà DIAGN√ìSTICO FINAL:');
    console.log('=' .repeat(40));
    console.log(`Total de OJs desejadas: ${ojsDesejadas.length}`);
    console.log(`OJs com perfil correto: ${resultado.ojsJaVinculadosPerfilCorreto.length}`);
    console.log(`OJs que precisam de automa√ß√£o: ${totalParaProcessar}`);
    console.log(`  - Perfis diferentes: ${resultado.ojsVinculadosPerfilDiferente.length}`);
    console.log(`  - Perfis desconhecidos: ${resultado.ojsVinculadosPerfilDesconhecido.length}`);
    console.log(`  - Novas para cadastrar: ${resultado.ojsParaVincular.length}`);

    console.log('\nüí° EXPLICA√á√ÉO DO COMPORTAMENTO:');
    if (resultado.ojsVinculadosPerfilDesconhecido.length > 0) {
        console.log('üîç As OJs aparecem como "perfil desconhecido" porque:');
        console.log('   - O cache foi criado antes do sistema de perfis');
        console.log('   - N√£o h√° informa√ß√£o de perfil salva no cache');
        console.log('   - O sistema precisa verificar o perfil atual no PJE');
        console.log(`   - Ap√≥s verifica√ß√£o, detectar√° que o perfil atual √© diferente de "${perfilDesejado}"`);
    }

    if (totalParaProcessar > 0) {
        console.log('\nü§ñ A√á√ÉO RECOMENDADA:');
        console.log(`‚úÖ Executar automa√ß√£o para ${totalParaProcessar} OJs`);
        console.log('   - Verificar√° perfis desconhecidos');
        console.log('   - Atualizar√° perfis diferentes');
        console.log('   - Cadastrar√° novas OJs');
    } else {
        console.log('\n‚ú® Nenhuma automa√ß√£o necess√°ria - todas as OJs j√° est√£o corretas!');
    }

    console.log('\nüß™ Teste espec√≠fico do Dirlei conclu√≠do!');

    return resultado;
}

// Executar teste
if (require.main === module) {
    testesDirleiReal().catch(console.error);
}

module.exports = { testesDirleiReal };