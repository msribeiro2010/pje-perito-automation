#!/usr/bin/env node

/**
 * üîç DETECTOR DE VARAS PROBLEM√ÅTICAS
 * 
 * Sistema autom√°tico para detectar varas que necessitam tratamento especial
 * baseado em padr√µes conhecidos e hist√≥rico de problemas
 */

const fs = require('fs');
const path = require('path');

// Configura√ß√£o de varas conhecidamente problem√°ticas
const VARAS_PROBLEMATICAS_CONHECIDAS = {
  // S√£o Jos√© dos Campos - j√° tem solu√ß√£o implementada
  sao_jose_campos: {
    padroes: [
      '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos'
    ],
    problema: 'entram_mas_nao_buscam_vinculam',
    solucao_disponivel: true,
    tratamento: 'SAO_JOSE_CAMPOS_CONFIG'
  },
  
  // Limeira - solu√ß√£o implementada
  limeira: {
    padroes: [
      '1¬™ Vara do Trabalho de Limeira',
      '2¬™ Vara do Trabalho de Limeira'
    ],
    problema: 'nao_conseguem_buscar_vincular',
    solucao_disponivel: true,
    tratamento: 'LIMEIRA_ESPECIFICO'
  },
  
  // Outras cidades para monitoramento
  hortolandia: {
    padroes: [
      'Vara do Trabalho de Hortol√¢ndia'
    ],
    problema: 'potencial_problema_similar',
    solucao_disponivel: false,
    tratamento: 'MONITORAR'
  },
  
  santa_barbara: {
    padroes: [
      'Vara do Trabalho de Santa B√°rbara D\'Oeste'
    ],
    problema: 'potencial_problema_similar',
    solucao_disponivel: false,
    tratamento: 'MONITORAR'
  },
  
  sao_joao_boa_vista: {
    padroes: [
      'Vara do Trabalho de S√£o Jo√£o da Boa Vista'
    ],
    problema: 'potencial_problema_similar',
    solucao_disponivel: false,
    tratamento: 'MONITORAR'
  },
  
  sumare: {
    padroes: [
      'Vara do Trabalho de Sumar√©'
    ],
    problema: 'potencial_problema_similar',
    solucao_disponivel: false,
    tratamento: 'MONITORAR'
  }
};

// Padr√µes de problemas comuns
const PADROES_PROBLEMAS = {
  timeout_busca: {
    indicadores: ['timeout', 'n√£o encontra campo', 'elemento n√£o localizado'],
    solucao: 'aumentar_timeout_busca'
  },
  
  timeout_vinculacao: {
    indicadores: ['falha na vincula√ß√£o', 'bot√£o n√£o encontrado', 'n√£o consegue adicionar'],
    solucao: 'aumentar_timeout_vinculacao'
  },
  
  seletores_especificos: {
    indicadores: ['seletor gen√©rico falha', 'elemento n√£o √∫nico'],
    solucao: 'implementar_seletores_especificos'
  },
  
  processamento_sequencial: {
    indicadores: ['conflito de recursos', 'm√∫ltiplas inst√¢ncias'],
    solucao: 'forcar_processamento_sequencial'
  }
};

class DetectorVarasProblematicas {
  constructor() {
    this.historico = this.carregarHistorico();
    this.relatorio = {
      timestamp: new Date().toISOString(),
      varas_analisadas: [],
      problemas_detectados: [],
      tratamentos_aplicados: [],
      recomendacoes: []
    };
  }
  
  /**
   * Detecta se uma vara √© problem√°tica
   * @param {string} nomeVara - Nome da vara
   * @returns {Object} - Resultado da detec√ß√£o
   */
  detectarVaraProblematica(nomeVara) {
    console.log(`üîç [DETECTOR] Analisando vara: ${nomeVara}`);
    
    // Verificar varas conhecidamente problem√°ticas
    for (const [categoria, config] of Object.entries(VARAS_PROBLEMATICAS_CONHECIDAS)) {
      for (const padrao of config.padroes) {
        if (nomeVara.includes(padrao) || this.compararSimilaridade(nomeVara, padrao) > 0.8) {
          console.log(`‚ö†Ô∏è [DETECTOR] Vara problem√°tica detectada: ${categoria}`);
          
          return {
            problematica: true,
            categoria,
            problema: config.problema,
            solucao_disponivel: config.solucao_disponivel,
            tratamento: config.tratamento,
            confianca: 0.9
          };
        }
      }
    }
    
    // Verificar hist√≥rico de problemas
    const problemaHistorico = this.verificarHistorico(nomeVara);
    if (problemaHistorico.problematica) {
      console.log('üìä [DETECTOR] Problema detectado no hist√≥rico');
      return problemaHistorico;
    }
    
    // Verificar padr√µes de nome que podem indicar problemas
    const problemasPadrao = this.detectarPadroesSuspeitos(nomeVara);
    if (problemasPadrao.length > 0) {
      console.log('üîç [DETECTOR] Padr√µes suspeitos detectados');
      return {
        problematica: true,
        categoria: 'padrao_suspeito',
        problema: 'potencial_problema_baseado_em_padrao',
        solucao_disponivel: false,
        tratamento: 'MONITORAR_ESPECIAL',
        confianca: 0.6,
        padroes: problemasPadrao
      };
    }
    
    console.log('‚úÖ [DETECTOR] Vara aparenta estar normal');
    return {
      problematica: false,
      categoria: 'normal',
      confianca: 0.8
    };
  }
  
  /**
   * Aplica tratamento espec√≠fico baseado na detec√ß√£o
   * @param {Object} deteccao - Resultado da detec√ß√£o
   * @param {Object} page - P√°gina do Playwright
   * @param {string} nomeVara - Nome da vara
   * @param {string} perfil - Perfil do usu√°rio
   * @returns {Object} - Resultado do tratamento
   */
  async aplicarTratamento(deteccao, page, nomeVara, perfil = 'Assessor') {
    if (!deteccao.problematica) {
      return { aplicado: false, motivo: 'vara_nao_problematica' };
    }
    
    console.log(`üîß [TRATAMENTO] Aplicando tratamento: ${deteccao.tratamento}`);
    
    try {
      switch (deteccao.tratamento) {
      case 'LIMEIRA_ESPECIFICO':
        const { aplicarTratamentoLimeira } = require('../vincularOJ.js');
        return await aplicarTratamentoLimeira(page, nomeVara, perfil);
          
      case 'SAO_JOSE_CAMPOS_CONFIG':
        return await this.aplicarTratamentoSaoJose(page, nomeVara, perfil);
          
      case 'MONITORAR':
      case 'MONITORAR_ESPECIAL':
        return await this.aplicarMonitoramentoEspecial(page, nomeVara, perfil, deteccao);
          
      default:
        console.log(`‚ö†Ô∏è [TRATAMENTO] Tratamento n√£o implementado: ${deteccao.tratamento}`);
        return { aplicado: false, motivo: 'tratamento_nao_implementado' };
      }
    } catch (error) {
      console.log(`‚ùå [TRATAMENTO] Erro ao aplicar tratamento: ${error.message}`);
      return { aplicado: false, erro: error.message };
    }
  }
  
  /**
   * Aplica tratamento para S√£o Jos√© dos Campos
   */
  async aplicarTratamentoSaoJose(page, nomeVara, perfil) {
    console.log('üèõÔ∏è [SAO_JOSE] Aplicando configura√ß√£o espec√≠fica...');
    
    // Implementar l√≥gica espec√≠fica para S√£o Jos√© dos Campos
    // baseada na configura√ß√£o SAO_JOSE_CAMPOS_CONFIG
    
    return {
      aplicado: true,
      metodo: 'sao_jose_especifico',
      detalhes: 'Configura√ß√£o espec√≠fica aplicada para S√£o Jos√© dos Campos'
    };
  }
  
  /**
   * Aplica monitoramento especial para varas suspeitas
   */
  async aplicarMonitoramentoEspecial(page, nomeVara, perfil, deteccao) {
    console.log('üëÅÔ∏è [MONITOR] Aplicando monitoramento especial...');
    
    // Registrar no hist√≥rico para an√°lise futura
    this.registrarNoHistorico(nomeVara, {
      timestamp: new Date().toISOString(),
      categoria: deteccao.categoria,
      problema: deteccao.problema,
      confianca: deteccao.confianca,
      status: 'monitorado'
    });
    
    return {
      aplicado: true,
      metodo: 'monitoramento_especial',
      detalhes: 'Vara adicionada ao monitoramento especial'
    };
  }
  
  /**
   * Verifica hist√≥rico de problemas
   */
  verificarHistorico(nomeVara) {
    const entrada = this.historico[nomeVara];
    if (!entrada) {
      return { problematica: false };
    }
    
    // Verificar se teve problemas recentes
    const problemasRecentes = entrada.filter(p => {
      const diasAtras = (Date.now() - new Date(p.timestamp).getTime()) / (1000 * 60 * 60 * 24);
      return diasAtras <= 30 && p.status === 'problema';
    });
    
    if (problemasRecentes.length > 0) {
      return {
        problematica: true,
        categoria: 'historico',
        problema: 'problemas_recentes_no_historico',
        solucao_disponivel: false,
        tratamento: 'MONITORAR_ESPECIAL',
        confianca: 0.7,
        detalhes: problemasRecentes
      };
    }
    
    return { problematica: false };
  }
  
  /**
   * Detecta padr√µes suspeitos no nome da vara
   */
  detectarPadroesSuspeitos(nomeVara) {
    const padroesSuspeitos = [];
    
    // Varas com numera√ß√£o alta (podem ter problemas espec√≠ficos)
    if (nomeVara.match(/[4-9]¬™ Vara/)) {
      padroesSuspeitos.push('numeracao_alta');
    }
    
    // Varas de cidades menores (podem ter seletores diferentes)
    const cidadesPequenas = ['Limeira', 'Hortol√¢ndia', 'Sumar√©', 'Santa B√°rbara'];
    if (cidadesPequenas.some(cidade => nomeVara.includes(cidade))) {
      padroesSuspeitos.push('cidade_pequena');
    }
    
    return padroesSuspeitos;
  }
  
  /**
   * Compara similaridade entre strings
   */
  compararSimilaridade(str1, str2) {
    const longer = str1.length > str2.length ? str1 : str2;
    const shorter = str1.length > str2.length ? str2 : str1;
    
    if (longer.length === 0) return 1.0;
    
    const editDistance = this.calcularDistanciaEdicao(longer, shorter);
    return (longer.length - editDistance) / longer.length;
  }
  
  /**
   * Calcula dist√¢ncia de edi√ß√£o entre strings
   */
  calcularDistanciaEdicao(str1, str2) {
    const matrix = [];
    
    for (let i = 0; i <= str2.length; i++) {
      matrix[i] = [i];
    }
    
    for (let j = 0; j <= str1.length; j++) {
      matrix[0][j] = j;
    }
    
    for (let i = 1; i <= str2.length; i++) {
      for (let j = 1; j <= str1.length; j++) {
        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
          matrix[i][j] = matrix[i - 1][j - 1];
        } else {
          matrix[i][j] = Math.min(
            matrix[i - 1][j - 1] + 1,
            matrix[i][j - 1] + 1,
            matrix[i - 1][j] + 1
          );
        }
      }
    }
    
    return matrix[str2.length][str1.length];
  }
  
  /**
   * Carrega hist√≥rico de problemas
   */
  carregarHistorico() {
    const caminhoHistorico = path.join(__dirname, '..', '..', 'historico-varas-problematicas.json');
    
    try {
      if (fs.existsSync(caminhoHistorico)) {
        return JSON.parse(fs.readFileSync(caminhoHistorico, 'utf8'));
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è [DETECTOR] Erro ao carregar hist√≥rico: ${error.message}`);
    }
    
    return {};
  }
  
  /**
   * Registra entrada no hist√≥rico
   */
  registrarNoHistorico(nomeVara, entrada) {
    if (!this.historico[nomeVara]) {
      this.historico[nomeVara] = [];
    }
    
    this.historico[nomeVara].push(entrada);
    
    // Manter apenas √∫ltimas 50 entradas por vara
    if (this.historico[nomeVara].length > 50) {
      this.historico[nomeVara] = this.historico[nomeVara].slice(-50);
    }
    
    this.salvarHistorico();
  }
  
  /**
   * Salva hist√≥rico em arquivo
   */
  salvarHistorico() {
    const caminhoHistorico = path.join(__dirname, '..', '..', 'historico-varas-problematicas.json');
    
    try {
      fs.writeFileSync(caminhoHistorico, JSON.stringify(this.historico, null, 2));
    } catch (error) {
      console.log(`‚ö†Ô∏è [DETECTOR] Erro ao salvar hist√≥rico: ${error.message}`);
    }
  }
  
  /**
   * Gera relat√≥rio de detec√ß√£o
   */
  gerarRelatorio() {
    const caminhoRelatorio = path.join(__dirname, '..', '..', `relatorio-detector-${Date.now()}.json`);
    
    try {
      fs.writeFileSync(caminhoRelatorio, JSON.stringify(this.relatorio, null, 2));
      console.log(`üìä [DETECTOR] Relat√≥rio salvo: ${caminhoRelatorio}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è [DETECTOR] Erro ao salvar relat√≥rio: ${error.message}`);
    }
  }
}

module.exports = {
  DetectorVarasProblematicas,
  VARAS_PROBLEMATICAS_CONHECIDAS,
  PADROES_PROBLEMAS
};