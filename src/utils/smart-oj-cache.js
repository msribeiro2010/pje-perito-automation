// Sistema de Cache Inteligente para OJs J√° Vinculados
// Acelera significativamente a vincula√ß√£o ao verificar OJs em lote

const { NormalizadorTexto } = require('./normalizacao');
const { Logger } = require('./Logger');
const fs = require('fs').promises;
const path = require('path');

class SmartOJCache {
  constructor() {
    this.cache = new Map(); // Map<nomeOJNormalizado, { original, jaVinculado, textoEncontrado }>
    this.cacheValido = false;
    this.ultimaAtualizacao = null;
    this.logger = new Logger('SmartOJCache');
    this.cacheFile = path.join(__dirname, '../../data/smart-oj-cache.json');
    this.serverCacheMap = new Map(); // Map<cpfServidor, cacheData>
  }

  /**
   * üéØ NOVO: Verifica em lote quais OJs j√° est√£o vinculados considerando perfis
   * @param {Array} ojsParaVerificar - Lista de OJs para verificar
   * @param {Array} ojsVinculados - Lista de OJs j√° vinculados obtidos do sistema
   * @param {string} perfilDesejado - Perfil que se deseja para o servidor
   * @param {Function} progressCallback - Callback para feedback de progresso
   * @returns {Object} Resultado da verifica√ß√£o em lote com an√°lise de perfis
   */
  verificarOJsComPerfilEmLote(ojsParaVerificar, ojsVinculados, perfilDesejado, progressCallback = null) {
    const startTime = Date.now();

    const resultado = {
      ojsJaVinculadosPerfilCorreto: [], // OJ + perfil correto (pular)
      ojsVinculadosPerfilDiferente: [], // OJ vinculado mas perfil diferente (atualizar)
      ojsVinculadosPerfilDesconhecido: [], // OJ vinculado mas perfil desconhecido (verificar)
      ojsParaVincular: [], // OJ n√£o vinculado (vincular novo)

      estatisticas: {
        jaVinculadosPerfilCorreto: 0,
        vinculadosPerfilDiferente: 0,
        vinculadosPerfilDesconhecido: 0,
        paraVincular: 0,
        tempoProcessamento: 0,
        economiaEstimada: 0,
        totalOJs: ojsParaVerificar.length,
        totalParaProcessar: 0
      }
    };

    // Normalizar lista de OJs vinculados
    const ojsVinculadosNormalizados = new Map();
    ojsVinculados.forEach(oj => {
      const normalizado = this._normalizarTexto(oj);
      ojsVinculadosNormalizados.set(normalizado, oj);
    });

    this.logger.info(`üß† Iniciando verifica√ß√£o INTELIGENTE de ${ojsParaVerificar.length} OJs com perfil: "${perfilDesejado}"`);

    for (let i = 0; i < ojsParaVerificar.length; i++) {
      const oj = ojsParaVerificar[i];

      if (progressCallback) {
        const progresso = Math.round(((i + 1) / ojsParaVerificar.length) * 100);
        progressCallback(
          `üß† An√°lise inteligente ${i + 1}/${ojsParaVerificar.length}: ${oj.substring(0, 35)}${oj.length > 35 ? '...' : ''}`,
          progresso
        );
      }

      const verificacao = this.verificarOJComPerfil(oj, ojsVinculadosNormalizados, perfilDesejado);

      switch (verificacao.acao) {
        case 'pular':
          resultado.ojsJaVinculadosPerfilCorreto.push({
            oj,
            textoEncontrado: verificacao.textoEncontrado,
            perfilEncontrado: verificacao.perfilEncontrado,
            tipoCorrespondencia: verificacao.tipoCorrespondencia
          });
          resultado.estatisticas.jaVinculadosPerfilCorreto++;
          this.logger.info(`‚úÖ OJ + Perfil correto: "${oj}" ‚Üí "${verificacao.textoEncontrado}" (${verificacao.perfilEncontrado})`);
          break;

        case 'atualizar_perfil':
          resultado.ojsVinculadosPerfilDiferente.push({
            oj,
            textoEncontrado: verificacao.textoEncontrado,
            perfilEncontrado: verificacao.perfilEncontrado,
            perfilDesejado: verificacao.perfilDesejado,
            tipoCorrespondencia: verificacao.tipoCorrespondencia
          });
          resultado.estatisticas.vinculadosPerfilDiferente++;
          this.logger.info(`üîÑ Perfil diferente: "${oj}" ‚Üí "${verificacao.perfilEncontrado}" ‚â† "${verificacao.perfilDesejado}"`);
          break;

        case 'verificar_perfil':
          resultado.ojsVinculadosPerfilDesconhecido.push({
            oj,
            textoEncontrado: verificacao.textoEncontrado,
            perfilDesejado: verificacao.perfilDesejado,
            tipoCorrespondencia: verificacao.tipoCorrespondencia
          });
          resultado.estatisticas.vinculadosPerfilDesconhecido++;
          this.logger.info(`‚ùì Perfil desconhecido: "${oj}" ‚Üí Verificar perfil atual`);
          break;

        case 'vincular_novo':
          resultado.ojsParaVincular.push(oj);
          resultado.estatisticas.paraVincular++;
          this.logger.info(`üÜï Novo para vincular: "${oj}" com perfil "${perfilDesejado}"`);
          break;
      }

      // Atualizar cache
      this.atualizarCache(oj, verificacao, perfilDesejado);

      if (progressCallback && i % 5 === 0) {
        const totalParaProcessar = resultado.estatisticas.vinculadosPerfilDiferente +
                                  resultado.estatisticas.vinculadosPerfilDesconhecido +
                                  resultado.estatisticas.paraVincular;
        progressCallback(
          `üìä ${resultado.estatisticas.jaVinculadosPerfilCorreto} corretos, ${totalParaProcessar} precisam automa√ß√£o`,
          Math.round(((i + 1) / ojsParaVerificar.length) * 100)
        );
      }
    }

    const tempoTotal = Date.now() - startTime;
    resultado.estatisticas.tempoProcessamento = tempoTotal;

    // Calcular estat√≠sticas finais
    resultado.estatisticas.totalParaProcessar = resultado.estatisticas.vinculadosPerfilDiferente +
                                               resultado.estatisticas.vinculadosPerfilDesconhecido +
                                               resultado.estatisticas.paraVincular;

    const ojsParaPular = resultado.estatisticas.jaVinculadosPerfilCorreto;
    resultado.estatisticas.economiaEstimada = ojsParaPular * 15000; // ~15s por OJ

    this.logger.info(`üéØ An√°lise INTELIGENTE conclu√≠da em ${tempoTotal}ms:`);
    this.logger.info(`   - ‚úÖ ${resultado.estatisticas.jaVinculadosPerfilCorreto} OJs com perfil correto (pular√£o automa√ß√£o)`);
    this.logger.info(`   - üîÑ ${resultado.estatisticas.vinculadosPerfilDiferente} OJs com perfil diferente (atualizar)`);
    this.logger.info(`   - ‚ùì ${resultado.estatisticas.vinculadosPerfilDesconhecido} OJs com perfil desconhecido (verificar)`);
    this.logger.info(`   - üÜï ${resultado.estatisticas.paraVincular} OJs novos (vincular)`);
    this.logger.info(`   - üéØ TOTAL para processar: ${resultado.estatisticas.totalParaProcessar} OJs`);
    this.logger.info(`   - üí∞ Economia estimada: ${Math.round(resultado.estatisticas.economiaEstimada/1000)}s`);

    return resultado;
  }

  /**
   * Verifica todos os OJs de uma lista em lote
   * @param {Object} page - P√°gina do Playwright
   * @param {Array<string>} ojsParaVerificar - Lista de OJs para verificar
   * @param {Function} progressCallback - Callback para reportar progresso
   * @param {string} cpfServidor - CPF do servidor para cache persistente
   * @returns {Object} Resultado da verifica√ß√£o em lote
   */
  async verificarOJsEmLote(page, ojsParaVerificar, progressCallback = null, cpfServidor = null) {
    this.logger.info(`üöÄ Iniciando verifica√ß√£o em lote de ${ojsParaVerificar.length} OJs...`);
    const startTime = Date.now();

    try {
      // 0. Tentar carregar cache persistente primeiro
      if (cpfServidor) {
        const cacheExistente = await this.carregarCachePersistente(cpfServidor);
        if (cacheExistente) {
          this.logger.info(`üéØ Usando cache persistente para ${cpfServidor} - evitando verifica√ß√£o desnecess√°ria`);

          // Reconstruir o cache em mem√≥ria preservando perfis
          if (cacheExistente.ojsJaVinculados) {
            cacheExistente.ojsJaVinculados.forEach(item => {
              // CORRE√á√ÉO: Preservar perfil do cache ou marcar como desconhecido para an√°lise inteligente
              const perfilExistente = item.perfil || null; // null indica perfil desconhecido
              this.atualizarCache(item.oj, {
                jaVinculado: true,
                textoEncontrado: item.textoEncontrado,
                tipoCorrespondencia: item.tipoCorrespondencia
              }, perfilExistente);
            });
          }

          this.cacheValido = true;
          this.ultimaAtualizacao = new Date(cacheExistente.timestamp);

          if (progressCallback) {
            progressCallback(`Cache carregado: ${cacheExistente.estatisticas?.jaVinculados || 0} OJs j√° cadastrados`, 100);
          }

          return cacheExistente;
        }
      }

      // 1. Carregar todos os OJs j√° vinculados da p√°gina
      if (progressCallback) {
        progressCallback('Carregando OJs j√° vinculados...', 0);
      }

      const ojsJaVinculados = await this.carregarOJsVinculadosDaPagina(page);
      this.logger.info(`üìã Encontrados ${ojsJaVinculados.length} OJs j√° vinculados na p√°gina`);
      
      if (ojsJaVinculados.length > 0) {
        this.logger.info(`üìã Primeiros 5 OJs vinculados: ${ojsJaVinculados.slice(0, 5).join(', ')}`);
        this.logger.info('üìã TODOS os OJs vinculados encontrados:');
        ojsJaVinculados.forEach((oj, index) => {
          this.logger.info(`   ${index + 1}. "${oj}"`);
        });
      } else {
        this.logger.warn('‚ö†Ô∏è NENHUM OJ vinculado encontrado na p√°gina! Isso pode indicar um problema.');
      }

      // 2. Normalizar todos os OJs vinculados para compara√ß√£o r√°pida
      const ojsVinculadosNormalizados = new Map();
      ojsJaVinculados.forEach(oj => {
        const normalizado = NormalizadorTexto.normalizar(oj);
        ojsVinculadosNormalizados.set(normalizado, oj);
      });

      // 3. Verificar cada OJ da lista contra os j√° vinculados
      const resultado = {
        ojsJaVinculados: [],
        ojsParaVincular: [],
        estatisticas: {
          totalVerificados: ojsParaVerificar.length,
          jaVinculados: 0,
          paraVincular: 0,
          tempoProcessamento: 0
        }
      };

      for (let i = 0; i < ojsParaVerificar.length; i++) {
        const oj = ojsParaVerificar[i];
        
        if (progressCallback) {
          const progresso = Math.round(((i + 1) / ojsParaVerificar.length) * 100);
          progressCallback(
            `üîç Analisando OJ ${i + 1}/${ojsParaVerificar.length}: ${oj.substring(0, 50)}${oj.length > 50 ? '...' : ''}`, 
            progresso
          );
        }

        const verificacao = this.verificarOJContraCache(oj, ojsVinculadosNormalizados);
        
        if (verificacao.jaVinculado) {
          resultado.ojsJaVinculados.push({
            oj,
            textoEncontrado: verificacao.textoEncontrado,
            tipoCorrespondencia: verificacao.tipoCorrespondencia
          });
          resultado.estatisticas.jaVinculados++;
          
          this.logger.info(`‚úÖ OJ j√° vinculado: "${oj}" ‚Üí "${verificacao.textoEncontrado}"`);
          
          if (progressCallback && i % 5 === 0) { // Feedback a cada 5 OJs
            progressCallback(
              `‚úÖ ${resultado.estatisticas.jaVinculados} j√° vinculados, ${resultado.estatisticas.paraVincular} para processar`, 
              Math.round(((i + 1) / ojsParaVerificar.length) * 100)
            );
          }
        } else {
          resultado.ojsParaVincular.push(oj);
          resultado.estatisticas.paraVincular++;
          
          this.logger.info(`üîÑ OJ para vincular: "${oj}"`);
          
          if (progressCallback && i % 10 === 0) { // Feedback a cada 10 OJs
            progressCallback(
              `‚è≥ ${resultado.estatisticas.paraVincular} OJs precisar√£o ser vinculados`, 
              Math.round(((i + 1) / ojsParaVerificar.length) * 100)
            );
          }
        }

        // Atualizar cache
        this.atualizarCache(oj, verificacao);
      }

      const tempoTotal = Date.now() - startTime;
      resultado.estatisticas.tempoProcessamento = tempoTotal;

      this.logger.info(`üéØ Verifica√ß√£o em lote conclu√≠da em ${tempoTotal}ms:`);
      this.logger.info(`   - ${resultado.estatisticas.jaVinculados} OJs j√° vinculados (pular√£o processamento)`);
      this.logger.info(`   - ${resultado.estatisticas.paraVincular} OJs para vincular`);
      this.logger.info(`   - Economia estimada: ${resultado.estatisticas.jaVinculados * 5}s de processamento`);

      this.cacheValido = true;
      this.ultimaAtualizacao = new Date();

      // Salvar cache persistente para este servidor
      await this.salvarCachePersistente(cpfServidor, resultado);

      return resultado;

    } catch (error) {
      this.logger.error(`‚ùå Erro na verifica√ß√£o em lote: ${error.message}`);
      throw error;
    }
  }

  /**
   * Carrega cache persistente para um servidor espec√≠fico
   * @param {string} cpfServidor - CPF do servidor
   * @returns {Object|null} Cache salvo ou null se n√£o encontrado
   */
  /**
   * Normaliza CPF para uso consistente como chave do cache
   * @param {string} cpf - CPF formatado ou n√£o
   * @returns {string} - CPF normalizado (apenas n√∫meros)
   */
  _normalizarCPF(cpf) {
    if (!cpf) return '';
    return cpf.replace(/\D/g, ''); // Remove tudo que n√£o for d√≠gito
  }

  async carregarCachePersistente(cpfServidor) {
    try {
      const data = await fs.readFile(this.cacheFile, 'utf8');
      const cacheData = JSON.parse(data);

      // Normalizar CPF para busca
      const cpfNormalizado = this._normalizarCPF(cpfServidor);

      // Procurar por CPF normalizado ou formatado
      let servidorCache = null;

      // Primeiro, tentar com CPF exato como fornecido
      if (cacheData[cpfServidor]) {
        servidorCache = cacheData[cpfServidor];
      }
      // Se n√£o encontrar, procurar por chaves que sejam o mesmo CPF normalizado
      else {
        for (const [chaveCPF, dados] of Object.entries(cacheData)) {
          if (this._normalizarCPF(chaveCPF) === cpfNormalizado) {
            servidorCache = dados;
            break;
          }
        }
      }

      if (servidorCache) {
        const ageSince = Date.now() - servidorCache.timestamp;
        const maxAge = 24 * 60 * 60 * 1000; // 24 horas

        if (ageSince < maxAge) {
          this.logger.info(`üì¶ Cache persistente carregado para ${cpfServidor}: ${servidorCache.ojsJaVinculados?.length || 0} OJs j√° cadastrados`);
          return servidorCache;
        } else {
          this.logger.info(`‚è∞ Cache persistente expirado para ${cpfServidor} (${Math.round(ageSince / 1000 / 60 / 60)}h)`);
        }
      }

      return null;
    } catch (error) {
      if (error.code !== 'ENOENT') {
        this.logger.warn(`‚ö†Ô∏è Erro ao carregar cache persistente: ${error.message}`);
      }
      return null;
    }
  }

  /**
   * Salva cache persistente para um servidor espec√≠fico
   * @param {string} cpfServidor - CPF do servidor
   * @param {Object} dadosVerificacao - Dados da verifica√ß√£o a serem salvos
   */
  async salvarCachePersistente(cpfServidor, dadosVerificacao) {
    try {
      // Garantir que o diret√≥rio existe
      const dir = path.dirname(this.cacheFile);
      await fs.mkdir(dir, { recursive: true });

      let cacheData = {};
      try {
        const data = await fs.readFile(this.cacheFile, 'utf8');
        cacheData = JSON.parse(data);
      } catch (error) {
        // Arquivo n√£o existe, come√ßar com objeto vazio
      }

      // Normalizar CPF para chave consistente
      const cpfNormalizado = this._normalizarCPF(cpfServidor);

      // Salvar dados do servidor usando CPF normalizado
      cacheData[cpfNormalizado] = {
        ...dadosVerificacao,
        timestamp: Date.now(),
        version: '1.0'
      };

      await fs.writeFile(this.cacheFile, JSON.stringify(cacheData, null, 2));
      this.logger.info(`üíæ Cache persistente salvo para ${cpfNormalizado}: ${dadosVerificacao.estatisticas?.jaVinculados || 0} OJs j√° cadastrados`);

    } catch (error) {
      this.logger.error(`‚ùå Erro ao salvar cache persistente: ${error.message}`);
    }
  }

  /**
   * Carrega todos os OJs j√° vinculados da p√°gina atual
   * @param {Object} page - P√°gina do Playwright
   * @returns {Array<string>} Lista de OJs j√° vinculados
   */
  async carregarOJsVinculadosDaPagina(page) {
    try {
      const ojsVinculados = [];
      const ojsNormalizados = new Set(); // Para evitar duplicatas

      this.logger.info('üîç [DEBUG] Iniciando busca por OJs vinculados na p√°gina...');

      // Seletores espec√≠ficos para a interface do PJE
      const seletoresOJs = [
        // Tabelas principais do PJE
        'table tbody tr td:first-child', // Primeira coluna das tabelas (geralmente cont√©m o nome do OJ)
        'table tbody tr td[data-label="√ìrg√£o Julgador"]',
        'table tbody tr td[data-label="Orgao Julgador"]', 
        '.mat-table .mat-cell:first-child',
        '.mat-table .mat-cell[data-label*="rgao"]',
        // Listas e cards
        '.mat-list-item .mat-line',
        '.mat-card-content',
        '.card-body',
        // Seletores gen√©ricos
        'table tbody tr td',
        '.mat-table .mat-cell',
        '.table tbody tr td',
        'ul li',
        '.list-group-item',
        '.panel-body p',
        '.mat-expansion-panel-content div',
        // Seletores mais espec√≠ficos para OJs
        '[class*="orgao"]',
        '[class*="julgador"]',
        // Seletores para elementos que podem conter nomes de varas
        'td:contains("Vara")',
        'td:contains("Tribunal")',
        'span:contains("Vara")',
        'div:contains("Vara")'
      ];

      this.logger.info(`üîç [DEBUG] Testando ${seletoresOJs.length} seletores diferentes...`);

      // Palavras-chave que indicam um √≥rg√£o julgador
      const palavrasChaveOJ = [
        'vara', 'tribunal', 'juizado', 'turma', 'c√¢mara', 'se√ß√£o',
        'comarca', 'foro', 'inst√¢ncia', 'supremo', 'superior',
        'regional', 'federal', 'estadual', 'militar', 'eleitoral',
        'trabalho', 'justi√ßa'
      ];

      for (let i = 0; i < seletoresOJs.length; i++) {
        const seletor = seletoresOJs[i];
        try {
          const elementos = await page.locator(seletor).all();
          this.logger.info(`üîç [DEBUG] Seletor ${i+1}/${seletoresOJs.length} "${seletor}": ${elementos.length} elementos encontrados`);

          for (const elemento of elementos) {
            try {
              const texto = await elemento.textContent();
              if (texto && texto.trim()) {
                const textoLimpo = texto.trim();
                const textoNormalizado = NormalizadorTexto.normalizar(textoLimpo);

                // Log de debug MELHORADO para textos encontrados
                if (textoLimpo.length > 10 && textoLimpo.length < 200) {
                  // Debug espec√≠fico para OJs da DEISE
                  const ojsDeise = [
                    '1¬™ Vara do Trabalho de Limeira',
                    '2¬™ Vara do Trabalho de Limeira', 
                    'Vara do Trabalho de Hortol√¢ndia',
                    'Vara do Trabalho de Sumar√©',
                    'Vara do Trabalho de Santa B√°rbara D\'Oeste',
                    'Vara do Trabalho de S√£o Jo√£o da Boa Vista'
                  ];
                  
                  const deiseMatch = ojsDeise.find(oj => 
                    textoLimpo.includes(oj) || oj.includes(textoLimpo) || 
                    NormalizadorTexto.saoEquivalentes(textoLimpo, oj, 0.8)
                  );
                  
                  if (deiseMatch) {
                    this.logger.info(`üéØ [DEISE-DEBUG] TEXTO RELEVANTE ENCONTRADO: "${textoLimpo}" match com "${deiseMatch}"`);
                    this.logger.info(`üîç [DEBUG] Texto encontrado: "${textoLimpo}"`);
                  } else {
                    // Log normal apenas se n√£o for debug da Deise
                    this.logger.info(`üîç [DEBUG] Texto encontrado: "${textoLimpo}"`);
                  }
                }

                // Verificar se parece ser um nome de √≥rg√£o julgador
                const contemPalavraChave = palavrasChaveOJ.some(palavra => 
                  textoNormalizado.includes(palavra)
                );

                if (contemPalavraChave && 
                    textoLimpo.length > 10 && 
                    textoLimpo.length < 200 && // Evitar textos muito longos
                    !ojsNormalizados.has(textoNormalizado) &&
                    this.validarOrgaoJulgador(textoLimpo)) {

                  // Verificar se n√£o √© duplicata usando similaridade
                  const ehDuplicata = ojsVinculados.some(ojExistente => 
                    NormalizadorTexto.saoEquivalentes(textoLimpo, ojExistente, 0.90)
                  );

                  if (!ehDuplicata) {
                    this.logger.info(`‚úÖ [DEBUG] OJ vinculado detectado: "${textoLimpo}"`);
                    ojsVinculados.push(textoLimpo);
                    ojsNormalizados.add(textoNormalizado);
                    
                    // Debug espec√≠fico para OJs da DEISE
                    const ojsDeise = [
                      '1¬™ Vara do Trabalho de Limeira',
                      '2¬™ Vara do Trabalho de Limeira', 
                      'Vara do Trabalho de Hortol√¢ndia',
                      'Vara do Trabalho de Sumar√©',
                      'Vara do Trabalho de Santa B√°rbara D\'Oeste',
                      'Vara do Trabalho de S√£o Jo√£o da Boa Vista'
                    ];
                    
                    const deiseMatch = ojsDeise.find(oj => 
                      NormalizadorTexto.saoEquivalentes(textoLimpo, oj, 0.8)
                    );
                    
                    if (deiseMatch) {
                      this.logger.info(`üéØ [DEISE-DEBUG] OJ DA DEISE ENCONTRADO: "${textoLimpo}" ‚âà "${deiseMatch}"`);
                    }
                  } else {
                    this.logger.info(`üîÑ [DEBUG] OJ duplicado ignorado: "${textoLimpo}"`);
                  }
                }
              }
            } catch (error) {
              // Continuar se houver erro
            }
          }
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è [DEBUG] Erro no seletor "${seletor}": ${error.message}`);
        }
      }

      return ojsVinculados;

    } catch (error) {
      this.logger.error(`‚ùå Erro ao carregar OJs da p√°gina: ${error.message}`);
      return [];
    }
  }

  /**
   * üéØ NOVO: Verifica um OJ espec√≠fico considerando tamb√©m o perfil
   * @param {string} oj - Nome do OJ para verificar
   * @param {Map} ojsVinculadosNormalizados - Map de OJs j√° vinculados normalizados
   * @param {string} perfilDesejado - Perfil que se deseja verificar
   * @returns {Object} Resultado da verifica√ß√£o inteligente
   */
  verificarOJComPerfil(oj, ojsVinculadosNormalizados, perfilDesejado) {
    const ojNormalizado = this._normalizarTexto(oj);

    // 1. Verifica√ß√£o exata normalizada COM perfil
    for (const [ojVinculadoNormalizado, ojVinculadoOriginal] of ojsVinculadosNormalizados) {
      if (ojVinculadoNormalizado === ojNormalizado) {
        // OJ encontrado! Agora verificar perfil
        const cacheEntry = this.cache.get(ojNormalizado);

        if (cacheEntry && cacheEntry.perfil) {
          if (cacheEntry.perfil === perfilDesejado) {
            // Perfil IGUAL: OJ j√° vinculado com o perfil correto
            return {
              jaVinculado: true,
              perfilCorreto: true,
              textoEncontrado: ojVinculadoOriginal,
              tipoCorrespondencia: 'exata',
              perfilEncontrado: cacheEntry.perfil,
              perfilDesejado: perfilDesejado,
              acao: 'pular' // N√£o precisa processar
            };
          } else {
            // Perfil DIFERENTE: OJ vinculado mas com perfil errado
            return {
              jaVinculado: true,
              perfilCorreto: false,
              textoEncontrado: ojVinculadoOriginal,
              tipoCorrespondencia: 'exata',
              perfilEncontrado: cacheEntry.perfil,
              perfilDesejado: perfilDesejado,
              acao: 'atualizar_perfil' // Precisa atualizar o perfil
            };
          }
        } else {
          // OJ vinculado mas sem informa√ß√£o de perfil
          return {
            jaVinculado: true,
            perfilCorreto: false,
            textoEncontrado: ojVinculadoOriginal,
            tipoCorrespondencia: 'exata',
            perfilEncontrado: 'desconhecido',
            perfilDesejado: perfilDesejado,
            acao: 'verificar_perfil' // Precisa verificar o perfil atual
          };
        }
      }
    }

    // 2. Verifica√ß√µes de similaridade (existentes)
    const resultadoSimilaridade = this.verificarOJContraCache(oj, ojsVinculadosNormalizados);

    if (resultadoSimilaridade.jaVinculado) {
      return {
        ...resultadoSimilaridade,
        perfilCorreto: false,
        perfilEncontrado: 'desconhecido',
        perfilDesejado: perfilDesejado,
        acao: 'verificar_perfil'
      };
    }

    // 3. OJ n√£o encontrado - precisa vincular
    return {
      jaVinculado: false,
      perfilCorreto: false,
      textoEncontrado: null,
      tipoCorrespondencia: null,
      perfilEncontrado: null,
      perfilDesejado: perfilDesejado,
      acao: 'vincular_novo' // Precisa vincular OJ + perfil
    };
  }

  /**
   * Verifica um OJ espec√≠fico contra o cache de OJs vinculados (m√©todo original)
   * @param {string} oj - Nome do OJ para verificar
   * @param {Map} ojsVinculadosNormalizados - Map de OJs j√° vinculados normalizados
   * @returns {Object} Resultado da verifica√ß√£o
   */
  verificarOJContraCache(oj, ojsVinculadosNormalizados) {
    const ojNormalizado = this._normalizarTexto(oj);

    // 1. Verifica√ß√£o exata normalizada
    for (const [ojVinculadoNormalizado, ojVinculadoOriginal] of ojsVinculadosNormalizados) {
      if (ojVinculadoNormalizado === ojNormalizado) {
        return {
          jaVinculado: true,
          textoEncontrado: ojVinculadoOriginal,
          tipoCorrespondencia: 'exata_normalizada'
        };
      }
    }

    // 2. Verifica√ß√£o por similaridade alta usando algoritmo otimizado
    for (const [ojVinculadoNormalizado, ojVinculadoOriginal] of ojsVinculadosNormalizados) {
      const similaridade = this._calcularSimilaridade(ojNormalizado, ojVinculadoNormalizado);
      if (similaridade >= 0.95) {
        return {
          jaVinculado: true,
          textoEncontrado: ojVinculadoOriginal,
          tipoCorrespondencia: 'similaridade_alta'
        };
      }
    }

    // 3. Verifica√ß√£o por inclus√£o inteligente (para casos como "Vara" vs "1¬™ Vara")
    for (const [ojVinculadoNormalizado, ojVinculadoOriginal] of ojsVinculadosNormalizados) {
      if (this._verificarInclusaoInteligente(ojNormalizado, ojVinculadoNormalizado)) {
        return {
          jaVinculado: true,
          textoEncontrado: ojVinculadoOriginal,
          tipoCorrespondencia: 'inclusao_inteligente'
        };
      }
    }

    // 4. Verifica√ß√£o por palavras-chave principais
    for (const [ojVinculadoNormalizado, ojVinculadoOriginal] of ojsVinculadosNormalizados) {
      if (this._verificarPalavrasChave(ojNormalizado, ojVinculadoNormalizado)) {
        return {
          jaVinculado: true,
          textoEncontrado: ojVinculadoOriginal,
          tipoCorrespondencia: 'palavras_chave'
        };
      }
    }

    return {
      jaVinculado: false,
      textoEncontrado: null,
      tipoCorrespondencia: null
    };
  }

  /**
   * Atualiza o cache com o resultado de uma verifica√ß√£o
   * @param {string} oj - Nome do OJ
   * @param {Object} verificacao - Resultado da verifica√ß√£o
   */
  atualizarCache(oj, verificacao, perfilAtual = null) {
    const ojNormalizado = NormalizadorTexto.normalizar(oj);
    this.cache.set(ojNormalizado, {
      original: oj,
      jaVinculado: verificacao.jaVinculado,
      textoEncontrado: verificacao.textoEncontrado,
      tipoCorrespondencia: verificacao.tipoCorrespondencia,
      perfil: perfilAtual, // NOVO: Armazenar o perfil associado
      timestamp: Date.now()
    });
  }

  /**
   * Verifica se um OJ espec√≠fico j√° est√° no cache
   * @param {string} oj - Nome do OJ
   * @returns {Object|null} Resultado do cache ou null se n√£o encontrado
   */
  verificarCache(oj) {
    if (!this.cacheValido) return null;
    
    const ojNormalizado = NormalizadorTexto.normalizar(oj);
    return this.cache.get(ojNormalizado) || null;
  }

  /**
   * Verifica se um OJ j√° est√° vinculado (m√©todo principal para verifica√ß√£o individual)
   * @param {string} oj - Nome do OJ para verificar
   * @returns {boolean} True se j√° vinculado, false caso contr√°rio
   */
  isOJVinculado(oj) {
    try {
      // Validar entrada
      if (!oj || typeof oj !== 'string') {
        this.logger.warn(`‚ö†Ô∏è OJ inv√°lido fornecido para verifica√ß√£o: ${oj}`);
        return false;
      }
      
      const ojTrimmed = oj.trim();
      if (ojTrimmed.length === 0) {
        this.logger.warn('‚ö†Ô∏è OJ vazio fornecido para verifica√ß√£o');
        return false;
      }
      
      const resultado = this.verificarCache(ojTrimmed);
      return resultado ? resultado.jaVinculado : false;
    } catch (error) {
      this.logger.error(`‚ùå Erro verificando OJ "${oj}": ${error.message}`);
      return false;
    }
  }

  /**
   * Adiciona um OJ como vinculado ao cache
   * @param {string} oj - Nome do OJ vinculado
   */
  adicionarOJVinculado(oj) {
    const ojNormalizado = this._normalizarTexto(oj);
    this.cache.set(ojNormalizado, {
      original: oj,
      jaVinculado: true,
      textoEncontrado: oj,
      tipoCorrespondencia: 'vinculacao_manual'
    });
    this.ultimaAtualizacao = Date.now();
    this.logger.info(`‚úÖ OJ "${oj}" adicionado ao cache como vinculado`);
  }

  /**
   * Limpa o cache (usado entre diferentes servidores)
   * @param {boolean} preservarPersistente - Se true, n√£o limpa dados persistentes
   */
  limparCache(preservarPersistente = true) {
    // Apenas limpar cache em mem√≥ria, preservando persistente por padr√£o
    this.cache.clear();
    this.cacheValido = false;
    this.ultimaAtualizacao = null;

    if (preservarPersistente) {
      this.logger.info('üßπ Cache em mem√≥ria limpo (dados persistentes preservados)');
    } else {
      this.logger.info('üßπ Cache de OJs limpo completamente');
      // Debug espec√≠fico para DEISE - garantir limpeza total
      this.logger.info('üéØ [DEISE-DEBUG] Cache SmartOJ completamente resetado - pronto para novo servidor');
    }
  }

  /**
   * For√ßa limpeza completa incluindo cache persistente
   * @param {string} cpfServidor - Se fornecido, limpa apenas este servidor
   */
  async limparCacheCompleto(cpfServidor = null) {
    this.limparCache(false);

    if (cpfServidor) {
      // Limpar apenas um servidor espec√≠fico
      try {
        const data = await fs.readFile(this.cacheFile, 'utf8');
        const cacheData = JSON.parse(data);
        delete cacheData[cpfServidor];
        await fs.writeFile(this.cacheFile, JSON.stringify(cacheData, null, 2));
        this.logger.info(`üóëÔ∏è Cache persistente removido para ${cpfServidor}`);
      } catch (error) {
        // Arquivo n√£o existe, tudo bem
      }
    } else {
      // Limpar tudo
      try {
        await fs.unlink(this.cacheFile);
        this.logger.info('üóëÔ∏è Arquivo de cache persistente removido completamente');
      } catch (error) {
        // Arquivo n√£o existe, tudo bem
      }
    }
  }

  /**
   * Valida se um texto representa um √≥rg√£o julgador v√°lido
   * @param {string} texto - Texto para validar
   * @returns {boolean} True se v√°lido
   */
  validarOrgaoJulgador(texto) {
    if (!texto || typeof texto !== 'string') return false;
    
    const textoLimpo = texto.trim();
    
    // Debug espec√≠fico para OJs da DEISE - ACEITAR SEMPRE
    const ojsDeise = [
      '1¬™ Vara do Trabalho de Limeira',
      '2¬™ Vara do Trabalho de Limeira', 
      'Vara do Trabalho de Hortol√¢ndia',
      'Vara do Trabalho de Sumar√©',
      'Vara do Trabalho de Santa B√°rbara D\'Oeste',
      'Vara do Trabalho de S√£o Jo√£o da Boa Vista',
      'Posto Avan√ßado da Justi√ßa do Trabalho de S√£o Jo√£o da Boa Vista em Esp√≠rito Santo Do Pinhal',
      'CEJUSC LIMEIRA - JT Centro Judici√°rio de M√©todos Consensuais de Solu√ß√£o de Disputas da Justi√ßa do Trabalho'
    ];
    
    const deiseMatch = ojsDeise.find(oj => 
      NormalizadorTexto.saoEquivalentes(textoLimpo, oj, 0.7)
    );
    
    if (deiseMatch) {
      this.logger.info(`üéØ [DEISE-DEBUG] VALIDACAO FORCADA PARA: "${textoLimpo}" ‚âà "${deiseMatch}"`);
      return true; // For√ßar valida√ß√£o para OJs da DEISE
    }
    
    // Crit√©rios de valida√ß√£o normais
    const criterios = {
      // Tamanho adequado
      tamanhoValido: textoLimpo.length >= 15 && textoLimpo.length <= 150,
      
      // Cont√©m palavras-chave de √≥rg√£o julgador
      contemPalavraChave: /\b(vara|tribunal|juizado|turma|camara|secao|comarca|foro|instancia|supremo|superior|regional|federal|estadual|militar|eleitoral|trabalho|justica)\b/i.test(textoLimpo),
      
      // N√£o cont√©m palavras que indicam que n√£o √© um OJ
      naoContemExclusoes: !/\b(adicionar|vincular|selecionar|escolher|buscar|pesquisar|filtrar|ordenar|classificar|salvar|cancelar|confirmar|voltar|proximo|anterior|pagina|total|resultado|encontrado|nenhum|vazio|carregando|aguarde)\b/i.test(textoLimpo),
      
      // N√£o √© apenas n√∫meros ou caracteres especiais
      naoEhApenasNumeros: !/^[\d\s\-\.\,\(\)]+$/.test(textoLimpo),
      
      // Cont√©m pelo menos uma letra
      contemLetras: /[a-zA-Z√Ä-√ø]/.test(textoLimpo)
    };
    
    const valido = Object.values(criterios).every(criterio => criterio === true);
    
    // Debug para OJs que falharam na valida√ß√£o
    if (!valido && textoLimpo.includes('Vara')) {
      this.logger.warn(`‚ö†Ô∏è [DEBUG] OJ com 'Vara' rejeitado na valida√ß√£o: "${textoLimpo}"`);
      this.logger.warn(`‚ö†Ô∏è [DEBUG] Crit√©rios: ${JSON.stringify(criterios)}`);
    }
    
    return valido;
  }

  /**
   * Normaliza texto para compara√ß√£o (vers√£o otimizada)
   * @param {string} texto 
   * @returns {string}
   */
  _normalizarTexto(texto) {
    // Usar a mesma normaliza√ß√£o do sistema principal para consist√™ncia
    return NormalizadorTexto.normalizar(texto);
  }

  /**
   * Calcula similaridade entre dois textos usando algoritmo otimizado
   * @param {string} texto1 
   * @param {string} texto2 
   * @returns {number} Valor entre 0 e 1
   */
  _calcularSimilaridade(texto1, texto2) {
    if (texto1 === texto2) return 1;
    if (!texto1 || !texto2) return 0;

    // Algoritmo de dist√¢ncia de Levenshtein otimizado
    const len1 = texto1.length;
    const len2 = texto2.length;
    
    if (len1 === 0) return len2 === 0 ? 1 : 0;
    if (len2 === 0) return 0;

    const matrix = Array(len2 + 1).fill().map(() => Array(len1 + 1).fill(0));
    
    for (let i = 0; i <= len1; i++) matrix[0][i] = i;
    for (let j = 0; j <= len2; j++) matrix[j][0] = j;
    
    for (let j = 1; j <= len2; j++) {
      for (let i = 1; i <= len1; i++) {
        const cost = texto1[i - 1] === texto2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j - 1][i] + 1,     // deletion
          matrix[j][i - 1] + 1,     // insertion
          matrix[j - 1][i - 1] + cost // substitution
        );
      }
    }
    
    const maxLen = Math.max(len1, len2);
    return (maxLen - matrix[len2][len1]) / maxLen;
  }

  /**
   * Verifica inclus√£o inteligente entre textos
   * @param {string} texto1 
   * @param {string} texto2 
   * @returns {boolean}
   */
  _verificarInclusaoInteligente(texto1, texto2) {
    const minLength = 15; // Tamanho m√≠nimo para evitar correspond√™ncias muito gen√©ricas
    
    if (Math.min(texto1.length, texto2.length) < minLength) {
      return false;
    }

    // Verifica√ß√£o especial para CEJUSCs - devem ser id√™nticos
    const isCejusc1 = texto1.toLowerCase().includes('cejusc');
    const isCejusc2 = texto2.toLowerCase().includes('cejusc');
    
    if (isCejusc1 || isCejusc2) {
      // Para CEJUSCs, exige correspond√™ncia exata ap√≥s normaliza√ß√£o
      const texto1Norm = texto1.replace(/\s+/g, ' ').trim();
      const texto2Norm = texto2.replace(/\s+/g, ' ').trim();
      return texto1Norm === texto2Norm;
    }

    // Verificar se um cont√©m o outro
    const contemCompleto = texto1.includes(texto2) || texto2.includes(texto1);
    if (contemCompleto) return true;

    // Verificar inclus√£o de palavras principais
    const palavras1 = texto1.split(' ').filter(p => p.length > 3);
    const palavras2 = texto2.split(' ').filter(p => p.length > 3);
    
    if (palavras1.length === 0 || palavras2.length === 0) return false;

    const palavrasComuns = palavras1.filter(p1 => 
      palavras2.some(p2 => p1.includes(p2) || p2.includes(p1))
    );

    // Se mais de 80% das palavras principais coincidem (aumentado de 70%)
    const percentualComum = palavrasComuns.length / Math.min(palavras1.length, palavras2.length);
    return percentualComum >= 0.8;
  }

  /**
   * Verifica correspond√™ncia por palavras-chave principais
   * @param {string} texto1 
   * @param {string} texto2 
   * @returns {boolean}
   */
  _verificarPalavrasChave(texto1, texto2) {
    // Verifica√ß√£o especial para CEJUSCs - devem ser id√™nticos
    const isCejusc1 = texto1.toLowerCase().includes('cejusc');
    const isCejusc2 = texto2.toLowerCase().includes('cejusc');
    
    if (isCejusc1 || isCejusc2) {
      // Para CEJUSCs, s√≥ considera correspond√™ncia se forem exatamente iguais
      const texto1Norm = texto1.replace(/\s+/g, ' ').trim().toLowerCase();
      const texto2Norm = texto2.replace(/\s+/g, ' ').trim().toLowerCase();
      return texto1Norm === texto2Norm;
    }
    
    // Extrair palavras-chave importantes (substantivos de √≥rg√£os julgadores)
    const palavrasChave = [
      'vara', 'tribunal', 'juizado', 'turma', 'camara', 'secao',
      'comarca', 'foro', 'instancia', 'supremo', 'superior',
      'regional', 'federal', 'estadual', 'militar', 'eleitoral',
      'trabalho', 'justica', 'civil', 'criminal', 'fazenda'
    ];

    const extrairChaves = (texto) => {
      return palavrasChave.filter(chave => texto.includes(chave));
    };

    const chaves1 = extrairChaves(texto1);
    const chaves2 = extrairChaves(texto2);

    if (chaves1.length === 0 || chaves2.length === 0) return false;

    // Verificar se h√° sobreposi√ß√£o significativa de palavras-chave
    const chavesComuns = chaves1.filter(chave => chaves2.includes(chave));
    const percentualComum = chavesComuns.length / Math.min(chaves1.length, chaves2.length);
    
    return percentualComum >= 0.6 && chavesComuns.length >= 2;
  }

  /**
   * Retorna estat√≠sticas do cache
   * @returns {Object} Estat√≠sticas do cache
   */
  obterEstatisticas() {
    return {
      tamanhoCache: this.cache.size,
      cacheValido: this.cacheValido,
      ultimaAtualizacao: this.ultimaAtualizacao,
      ojsJaVinculados: Array.from(this.cache.values()).filter(item => item.jaVinculado).length,
      ojsParaVincular: Array.from(this.cache.values()).filter(item => !item.jaVinculado).length
    };
  }
}

module.exports = { SmartOJCache };