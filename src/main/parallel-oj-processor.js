/**
 * Processador Paralelo de √ìrg√£os Julgadores (OJs)
 * Implementa estrat√©gias de busca e processamento paralelo para otimizar performance
 */

const ContextualDelayManager = require('./contextual-delay-manager');
const SmartRetryManager = require('./smart-retry-manager');
const TimeoutManager = require('../utils/timeouts.js');
const { SmartOJCache } = require('../utils/smart-oj-cache.js');

class ParallelOJProcessor {
  constructor(page, timeoutManager, config, domCache = null) {
    this.page = page;
    this.timeoutManager = timeoutManager;
    this.config = config;
    this.delayManager = new ContextualDelayManager(timeoutManager);
    this.retryManager = new SmartRetryManager(timeoutManager);
    this.domCache = domCache;
    this.ojCache = new Set();
    this.smartOJCache = new SmartOJCache(); // Usar SmartOJCache para verifica√ß√£o inteligente
    this.results = [];
    this.maxConcurrency = 3; // M√°ximo de OJs processados simultaneamente
    this.batchSize = 5; // Tamanho do lote para processamento
  }

  /**
   * Processa OJs em paralelo com controle de concorr√™ncia
   */
  async processOJsInParallel(orgaos) {
    console.log(`üöÄ Iniciando processamento paralelo de ${orgaos.length} OJs`);
    
    // Normalizar e filtrar OJs
    const ojsNormalizados = orgaos.map(orgao => ({
      original: orgao,
      normalized: this.normalizeOrgaoName(orgao)
    }));
    
    // Verificar OJs j√° cadastrados em paralelo
    await this.loadExistingOJsParallel();
    
    // Filtrar OJs que precisam ser processados
    const ojsToProcess = ojsNormalizados.filter(oj => !this.ojCache.has(oj.normalized));
    
    console.log(`üìä ${ojsToProcess.length} OJs para processar, ${this.ojCache.size} j√° cadastrados`);
    
    if (ojsToProcess.length === 0) {
      console.log('‚úÖ Todos os OJs j√° est√£o cadastrados');
      return this.results;
    }
    
    // Processar em lotes com concorr√™ncia controlada
    const batches = this.createBatches(ojsToProcess, this.batchSize);
    
    for (let i = 0; i < batches.length; i++) {
      const batch = batches[i];
      console.log(`üîÑ Processando lote ${i + 1}/${batches.length} (${batch.length} OJs)`);
      
      await this.processBatchWithConcurrency(batch);
      
      // Pausa entre lotes para n√£o sobrecarregar o sistema
      if (i < batches.length - 1) {
        await this.delayManager.smartDelay('betweenOJs', { priority: 'high' });
      }
    }
    
    return this.results;
  }

  /**
   * Carrega OJs existentes usando SmartOJCache para verifica√ß√£o inteligente
   */
  async loadExistingOJsParallel() {
    console.log('üîç [PARALLEL] Carregando OJs existentes usando SmartOJCache...');
    
    try {
      // Usar SmartOJCache para carregar OJs vinculados da p√°gina
      const ojsVinculados = await this.smartOJCache.carregarOJsVinculadosDaPagina(this.page);
      
      console.log(`üéØ [PARALLEL] SmartOJCache encontrou ${ojsVinculados.length} OJs j√° vinculados`);
      
      if (ojsVinculados.length > 0) {
        console.log(`üìã [PARALLEL] Primeiros 5 OJs vinculados: ${ojsVinculados.slice(0, 5).join(', ')}`);
        console.log(`üìã [PARALLEL] TODOS os OJs vinculados encontrados:`);
        ojsVinculados.forEach((oj, index) => {
          console.log(`   ${index + 1}. "${oj}"`);
        });
      } else {
        console.log(`‚ö†Ô∏è [PARALLEL] NENHUM OJ vinculado encontrado na p√°gina!`);
      }
      
      // Normalizar e adicionar ao cache local
      ojsVinculados.forEach(oj => {
        const ojNormalizado = this.normalizeOrgaoName(oj);
        this.ojCache.add(ojNormalizado);
      });
      
      console.log(`üéØ [PARALLEL] Cache local atualizado: ${this.ojCache.size} OJs j√° cadastrados`);
      
    } catch (error) {
      console.error(`‚ùå [PARALLEL] Erro ao carregar OJs existentes:`, error.message);
      // Fallback para estrat√©gias antigas se SmartOJCache falhar
      await this.loadExistingOJsParallelFallback();
    }
  }

  /**
   * Fallback para carregamento de OJs usando estrat√©gias antigas
   */
  async loadExistingOJsParallelFallback() {
    console.log('üîÑ [PARALLEL] Usando fallback para carregamento de OJs...');
    
    const strategies = [
      this.loadFromTable.bind(this),
      this.loadFromMaterialTable.bind(this),
      this.loadFromDataTable.bind(this),
      this.loadFromAriaRows.bind(this)
    ];
    
    // Executar estrat√©gias em paralelo
    const results = await Promise.allSettled(
      strategies.map(strategy => this.executeWithTimeout(strategy, 8000))
    );
    
    // Consolidar resultados
    const allOJs = new Set();
    results.forEach((result, index) => {
      if (result.status === 'fulfilled' && result.value) {
        result.value.forEach(oj => allOJs.add(oj));
        console.log(`‚úÖ [PARALLEL] Estrat√©gia ${index + 1}: ${result.value.size} OJs encontrados`);
      } else {
        console.log(`‚ö†Ô∏è [PARALLEL] Estrat√©gia ${index + 1} falhou: ${result.reason?.message || 'Timeout'}`);
      }
    });
    
    // Atualizar cache
    allOJs.forEach(oj => this.ojCache.add(oj));
    console.log(`üéØ [PARALLEL] Total de OJs j√° cadastrados (fallback): ${this.ojCache.size}`);
  }

  /**
   * Processa um lote de OJs com controle de concorr√™ncia
   */
  async processBatchWithConcurrency(batch) {
    const semaphore = new Semaphore(this.maxConcurrency);
    const batchTimeout = 300000; // 5 minutos por lote
    
    console.log(`üîÑ Processando lote com ${batch.length} OJs (timeout: ${batchTimeout/1000}s)`);
    
    const promises = batch.map(async (oj, index) => {
      console.log(`üîÑ [LOTE] Aguardando sem√°foro para OJ ${index + 1}/${batch.length}: ${oj.original}`);
      await semaphore.acquire();
      console.log(`üöÄ [LOTE] Iniciando processamento do OJ ${index + 1}/${batch.length}: ${oj.original}`);
      
      try {
        // Timeout individual por OJ
        const result = await Promise.race([
          this.processOJWithRetry(oj),
          new Promise((_, reject) => 
            setTimeout(() => {
              console.log(`‚è∞ [LOTE] Timeout de 60s atingido para OJ: ${oj.original}`);
              reject(new Error(`Timeout no OJ ${oj.original} ap√≥s 60s`));
            }, 60000)
          )
        ]);
        
        console.log(`‚úÖ [LOTE] OJ ${index + 1}/${batch.length} conclu√≠do: ${oj.original}`);
        return result;
      } catch (error) {
        console.log(`‚ùå [LOTE] Erro no OJ ${index + 1}/${batch.length} (${oj.original}): ${error.message}`);
        return {
          orgao: oj.original,
          status: 'Erro',
          erro: error.message,
          timestamp: new Date().toISOString()
        };
      } finally {
        console.log(`üîì [LOTE] Liberando sem√°foro para OJ: ${oj.original}`);
        semaphore.release();
      }
    });
    
    // Timeout para o lote inteiro
    const batchPromise = Promise.allSettled(promises);
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error(`Timeout no lote ap√≥s ${batchTimeout/1000}s`)), batchTimeout)
    );
    
    let results;
    try {
      results = await Promise.race([batchPromise, timeoutPromise]);
    } catch (timeoutError) {
      console.log(`‚è∞ ${timeoutError.message} - for√ßando conclus√£o`);
      // Aguardar mais 10s para conclus√µes pendentes
      await new Promise(resolve => setTimeout(resolve, 10000));
      results = await Promise.allSettled(promises);
    }
    
    // Processar resultados
    let sucessos = 0;
    let erros = 0;
    
    results.forEach((result, index) => {
      const oj = batch[index];
      if (result.status === 'fulfilled' && result.value?.status !== 'Erro') {
        this.results.push(result.value);
        this.ojCache.add(oj.normalized);
        console.log(`‚úÖ OJ processado: ${oj.original}`);
        sucessos++;
      } else {
        const errorMsg = result.status === 'rejected' ? result.reason?.message : result.value?.erro;
        console.error(`‚ùå Erro ao processar OJ ${oj.original}:`, errorMsg);
        this.results.push({
          orgao: oj.original,
          status: 'Erro',
          erro: errorMsg || 'Erro desconhecido',
          timestamp: new Date().toISOString()
        });
        erros++;
      }
    });
    
    console.log(`üìä Lote conclu√≠do: ${sucessos} sucessos, ${erros} erros`);
  }

  /**
   * Processa um OJ individual com retry inteligente
   */
  async processOJWithRetry(oj, maxRetries = 2) {
    let lastError;
    const startTime = Date.now();
    
    console.log(`üéØ [RETRY] Iniciando processamento com retry para OJ: ${oj.original}`);
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      const attemptStartTime = Date.now();
      try {
        console.log(`üîÑ [RETRY] Tentativa ${attempt}/${maxRetries} para OJ ${oj.original}`);
        
        // Verificar se j√° passou muito tempo
        const totalElapsed = Date.now() - startTime;
        if (totalElapsed > 45000) { // 45s limite por OJ
          console.log(`‚è∞ [RETRY] Timeout geral para OJ ${oj.original} ap√≥s ${totalElapsed/1000}s`);
          throw new Error(`Timeout geral ap√≥s ${totalElapsed/1000}s`);
        }
        
        console.log(`üöÄ [RETRY] Chamando processOJOptimized para ${oj.original}...`);
        const result = await this.processOJOptimized(oj);
        
        const attemptDuration = Date.now() - attemptStartTime;
        const totalDuration = Date.now() - startTime;
        
        if (attempt > 1) {
          console.log(`‚úÖ [RETRY] OJ ${oj.original} processado com sucesso na tentativa ${attempt} (tentativa: ${attemptDuration}ms, total: ${totalDuration}ms)`);
        } else {
          console.log(`‚úÖ [RETRY] OJ ${oj.original} processado com sucesso na primeira tentativa (${attemptDuration}ms)`);
        }
        
        return result;
        
      } catch (error) {
        lastError = error;
        const attemptDuration = Date.now() - attemptStartTime;
        const totalElapsed = Date.now() - startTime;
        
        console.log(`‚ö†Ô∏è [RETRY] Tentativa ${attempt}/${maxRetries} falhou para OJ ${oj.original} ap√≥s ${attemptDuration}ms: ${error.message}`);
        console.log(`üìä [RETRY] Tempo total decorrido: ${totalElapsed/1000}s`);
        
        // Se √© erro cr√≠tico, n√£o tentar novamente
        if (error.message.includes('closed') || 
            error.message.includes('Navigation') ||
            error.message.includes('Timeout geral') ||
            totalElapsed > 40000) {
          console.log(`üö´ [RETRY] Erro cr√≠tico detectado para ${oj.original}, parando tentativas`);
          break;
        }
        
        if (attempt < maxRetries) {
          // Backoff exponencial reduzido
          const delay = Math.min(1000 * Math.pow(2, attempt - 1), 3000); // Max 3s
          console.log(`‚è≥ [RETRY] Aguardando ${delay}ms antes da pr√≥xima tentativa para ${oj.original}...`);
          await this.delay(delay);
          
          // Tentar recupera√ß√£o r√°pida
          console.log(`üîÑ [RETRY] Executando recupera√ß√£o r√°pida para ${oj.original}...`);
          await this.quickRecovery();
          console.log(`‚úÖ [RETRY] Recupera√ß√£o r√°pida conclu√≠da para ${oj.original}`);
        }
      }
    }
    
    const duration = Date.now() - startTime;
    console.log(`‚ùå [RETRY] OJ ${oj.original} falhou definitivamente ap√≥s ${duration}ms e ${maxRetries} tentativas`);
    throw lastError;
  }

  /**
   * Processamento otimizado de OJ individual
   */
  async processOJOptimized(oj) {
    const startTime = Date.now();
    
    try {
      // Verificar se p√°gina ainda est√° ativa
      if (this.page && this.page.isClosed()) {
        throw new Error('P√°gina fechada antes do processamento');
      }
      
      // Timeout mais agressivo para evitar travamentos
      const baseTimeout = TimeoutManager.obterTimeout('pje', 'vincularOJ');
      const timeout = Math.min(baseTimeout, 25000); // M√°ximo 25s
      
      console.log(`‚ö° Iniciando processamento otimizado do OJ ${oj.original} (timeout: ${timeout/1000}s)`);
      
      // Executar a√ß√µes em sequ√™ncia otimizada com logs detalhados
      await this.executeWithTimeout(async () => {
        console.log(`üîÑ [${oj.original}] Etapa 1/5: Clicando no bot√£o adicionar...`);
        await this.clickAddLocationButtonOptimized();
        
        console.log(`üîÑ [${oj.original}] Etapa 2/5: Selecionando √≥rg√£o julgador...`);
        await this.selectOrgaoJulgadorOptimized(oj.original);
        
        console.log(`üîÑ [${oj.original}] Etapa 3/5: Configurando papel e visibilidade...`);
        await this.configurePapelVisibilidadeOptimized();
        
        console.log(`üîÑ [${oj.original}] Etapa 4/5: Salvando configura√ß√£o...`);
        await this.saveConfigurationOptimized();
        
        console.log(`üîÑ [${oj.original}] Etapa 5/5: Verificando sucesso...`);
        await this.verifySuccessOptimized();
        
        console.log(`‚úÖ [${oj.original}] Todas as etapas conclu√≠das com sucesso`);
      }, timeout);
      
      const duration = Date.now() - startTime;
      
      // Registrar performance para timeouts adaptativos
      TimeoutManager.registrarPerformance('vincularOJ', startTime, true);
      
      console.log(`üìä OJ ${oj.original} processado em ${duration}ms`);
      
      return {
        orgao: oj.original,
        status: 'Vinculado com Sucesso',
        erro: null,
        perfil: this.config.perfil,
        cpf: this.config.cpf,
        timestamp: new Date().toISOString(),
        duration
      };
      
    } catch (error) {
      const duration = Date.now() - startTime;
      TimeoutManager.registrarPerformance('vincularOJ', startTime, false);
      
      console.log(`‚ùå Erro no processamento otimizado do OJ ${oj.original} ap√≥s ${duration}ms: ${error.message}`);
      
      // Tentar limpeza r√°pida em caso de erro
      try {
        if (this.page && !this.page.isClosed()) {
          await this.page.evaluate(() => {
            // Fechar qualquer modal aberto
            const modals = document.querySelectorAll('mat-dialog-container, .cdk-overlay-container');
            modals.forEach(modal => {
              const closeBtn = modal.querySelector('[mat-dialog-close], .mat-dialog-close, .close');
              if (closeBtn) closeBtn.click();
            });
          });
        }
      } catch (cleanupError) {
        console.log(`‚ö†Ô∏è Erro na limpeza: ${cleanupError.message}`);
      }
      
      throw error;
    }
  }

  // === ESTRAT√âGIAS DE CARREGAMENTO DE OJs ===
  
  async loadFromTable() {
    const ojs = new Set();
    try {
      const rows = await this.page.$$('table tbody tr');
      for (const row of rows.slice(0, 20)) { // Limitar para performance
        const text = await row.textContent();
        this.extractOJsFromText(text, ojs);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao carregar da tabela padr√£o:', error.message);
    }
    return ojs;
  }
  
  async loadFromMaterialTable() {
    const ojs = new Set();
    try {
      const rows = await this.page.$$('.mat-table .mat-row');
      for (const row of rows.slice(0, 20)) {
        const text = await row.textContent();
        this.extractOJsFromText(text, ojs);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao carregar da tabela Material:', error.message);
    }
    return ojs;
  }
  
  async loadFromDataTable() {
    const ojs = new Set();
    try {
      const rows = await this.page.$$('.datatable tbody tr');
      for (const row of rows.slice(0, 20)) {
        const text = await row.textContent();
        this.extractOJsFromText(text, ojs);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao carregar da DataTable:', error.message);
    }
    return ojs;
  }
  
  async loadFromAriaRows() {
    const ojs = new Set();
    try {
      const rows = await this.page.$$('[role="row"]');
      for (const row of rows.slice(0, 20)) {
        const text = await row.textContent();
        this.extractOJsFromText(text, ojs);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao carregar das ARIA rows:', error.message);
    }
    return ojs;
  }

  // === A√á√ïES OTIMIZADAS ===
  
  async clickAddLocationButtonOptimized() {
    console.log('üéØ ASSERTIVO: Verificando se modal j√° est√° aberto...');
    
    // 1. PRIMEIRO: Verificar se o modal j√° est√° aberto
    const modalJaAberto = await this.page.locator('mat-dialog-container, [role="dialog"]').isVisible();
    if (modalJaAberto) {
      console.log('‚úÖ Modal j√° est√° aberto - PULANDO clique no bot√£o');
      return;
    }
    
    console.log('üéØ Modal fechado - clicando bot√£o Adicionar UMA VEZ...');
    
    // 2. SEGUNDO: Clicar UMA √öNICA VEZ no bot√£o mais espec√≠fico
    const seletorEspecifico = 'button:has-text("Adicionar Localiza√ß√£o/Visibilidade"):not([disabled])';
    
    try {
      // Aguardar elemento espec√≠fico aparecer
      await this.page.waitForSelector(seletorEspecifico, { timeout: 3000 });
      
      // Clicar UMA vez apenas usando retry manager
      await this.retryManager.retryClick(
          async (selector) => {
            const element = await this.page.$(selector);
            if (element) {
              await element.click();
            } else {
              throw new Error('Element not found');
            }
          },
          seletorEspecifico
        );
      console.log('‚úÖ CLIQUE √öNICO realizado no bot√£o Adicionar');
      
      // 3. TERCEIRO: Aguardar modal abrir de forma assertiva
      console.log('üéØ Aguardando modal abrir...');
      await this.page.waitForSelector('mat-dialog-container, [role="dialog"]', { timeout: 5000 });
      console.log('‚úÖ Modal CONFIRMADO aberto');
      
      return;
      
    } catch (error) {
      console.log(`‚ùå Falha no clique assertivo: ${error.message}`);
      throw new Error(`Bot√£o Adicionar n√£o encontrado: ${error.message}`);
    }
  }
  
  async clickAddLocationButtonOptimizedFallback() {
    // Verificar se a p√°gina foi fechada
    if (this.page.isClosed()) {
      throw new Error('P√°gina foi fechada antes de clicar no bot√£o Adicionar');
    }
    
    console.log('üîÑ Procurando bot√£o "Adicionar Localiza√ß√£o/Visibilidade"...');
    
    // Aguardar estabiliza√ß√£o da p√°gina
    await this.delayManager.smartDelay('pageStabilization', { priority: 'medium' });
    
    const selectors = [
      'button:has-text("Adicionar Localiza√ß√£o/Visibilidade"):not([disabled])',
      'button:has-text("Adicionar Localiza√ß√£o"):not([disabled])',
      'button:has-text("Adicionar"):not([disabled]):visible',
      '.btn-adicionar:not([disabled])',
      '[data-action="add"]:not([disabled])',
      '.mat-button:has-text("Adicionar"):not([disabled])',
      'button[title*="Adicionar"]:not([disabled])',
      'input[value*="Adicionar"]:not([disabled])',
      // Seletores mais espec√≠ficos para o PJE
      'button.btn.btn-primary:has-text("Adicionar"):not([disabled])',
      'button.mat-raised-button:has-text("Adicionar"):not([disabled])',
      'button[type="button"]:has-text("Adicionar"):not([disabled])',
      // Seletores por posi√ß√£o e contexto
      'fieldset:has-text("√ìrg√£os Julgadores") button:has-text("Adicionar"):not([disabled])',
      'div:has-text("√ìrg√£os Julgadores") button:has-text("Adicionar"):not([disabled])',
      // Seletores alternativos
      'button:contains("Adicionar"):not([disabled])',
      '[role="button"]:has-text("Adicionar"):not([disabled])'
    ];
    
    let addButton = null;
    
    for (const selector of selectors) {
      try {
        // Verificar se a p√°gina ainda est√° aberta
        if (this.page.isClosed()) {
          throw new Error('P√°gina foi fechada durante a busca do bot√£o');
        }
        
        console.log(`üîç Testando seletor: ${selector}`);
        
        const element = await this.retryManager.retryElementSearch(
          async (sel) => {
            // Verificar novamente se a p√°gina est√° aberta
            if (this.page.isClosed()) {
              throw new Error('P√°gina fechada durante waitForSelector');
            }
            return await this.page.waitForSelector(sel, { 
              timeout: TimeoutManager.obterTimeout('interacao', 'aguardarElemento'),
              state: 'visible'
            });
          },
          selector
        );
        
        if (element && await element.isVisible()) {
          addButton = element;
          console.log(`‚úÖ Bot√£o encontrado: ${selector}`);
          break;
        }
      } catch (error) {
        console.log(`‚ùå Seletor ${selector} falhou: ${error.message}`);
        continue;
      }
    }
    
    if (!addButton) {
      console.log('üîç Bot√£o n√£o encontrado com seletores padr√£o, tentando estrat√©gias de fallback...');
      
      // Estrat√©gia de fallback 1: Buscar por qualquer bot√£o com texto "Adicionar"
      try {
        const fallbackButtons = await this.page.$$('button');
        for (const button of fallbackButtons) {
          const text = await button.textContent();
          const isVisible = await button.isVisible();
          const isEnabled = await button.isEnabled();
          
          if (text && text.toLowerCase().includes('adicionar') && isVisible && isEnabled) {
            console.log(`‚úÖ Bot√£o encontrado via fallback: "${text}"`);
            addButton = button;
            break;
          }
        }
      } catch (fallbackError) {
        console.log(`‚ùå Fallback 1 falhou: ${fallbackError.message}`);
      }
      
      // Estrat√©gia de fallback 2: Buscar por inputs com value "Adicionar"
      if (!addButton) {
        try {
          const fallbackInputs = await this.page.$$('input[type="button"], input[type="submit"]');
          for (const input of fallbackInputs) {
            const value = await input.getAttribute('value');
            const isVisible = await input.isVisible();
            const isEnabled = await input.isEnabled();
            
            if (value && value.toLowerCase().includes('adicionar') && isVisible && isEnabled) {
              console.log(`‚úÖ Input encontrado via fallback: "${value}"`);
              addButton = input;
              break;
            }
          }
        } catch (fallbackError) {
          console.log(`‚ùå Fallback 2 falhou: ${fallbackError.message}`);
        }
      }
      
      if (!addButton) {
        // Debug: listar todos os bot√µes vis√≠veis
        try {
          console.log('üîç DEBUG: Listando todos os bot√µes vis√≠veis na p√°gina...');
          const allButtons = await this.page.$$('button:visible, input[type="button"]:visible, input[type="submit"]:visible');
          for (let i = 0; i < Math.min(allButtons.length, 10); i++) {
            try {
              const text = await allButtons[i].textContent() || await allButtons[i].getAttribute('value');
              const classes = await allButtons[i].getAttribute('class');
              console.log(`  Bot√£o ${i + 1}: "${text}" [${classes}]`);
            } catch (e) {
              console.log(`  Bot√£o ${i + 1}: Erro ao obter informa√ß√µes`);
            }
          }
        } catch (debugError) {
          console.log(`‚ö†Ô∏è Erro no debug: ${debugError.message}`);
        }
        
        throw new Error('Bot√£o "Adicionar Localiza√ß√£o/Visibilidade" n√£o encontrado ap√≥s todas as tentativas');
      }
    }
    
    // Verificar se a p√°gina ainda est√° aberta antes de clicar
    if (this.page.isClosed()) {
      throw new Error('P√°gina foi fechada antes do clique no bot√£o');
    }
    
    console.log('üñ±Ô∏è Tentando clicar no bot√£o Adicionar...');
    
    // M√∫ltiplas estrat√©gias de clique
    const clickStrategies = [
      {
        name: 'click normal',
        action: async () => {
          await addButton.click({ timeout: 8000 });
        }
      },
      {
        name: 'click com force',
        action: async () => {
          await addButton.click({ force: true, timeout: 8000 });
        }
      },
      {
        name: 'click ap√≥s scroll',
        action: async () => {
          await addButton.scrollIntoViewIfNeeded();
          await this.delayManager.smartDelay('scroll', { priority: 'low' });
          await addButton.click({ timeout: 8000 });
        }
      },
      {
        name: 'click via JavaScript',
        action: async () => {
          await addButton.evaluate(button => button.click());
        }
      }
    ];
    
    let clickSuccessful = false;
    let lastError = null;
    
    for (const strategy of clickStrategies) {
      try {
        // Verificar se a p√°gina ainda est√° aberta
        if (this.page.isClosed()) {
          throw new Error('P√°gina foi fechada antes da estrat√©gia de clique');
        }
        
        console.log(`üîÑ Tentando: ${strategy.name}...`);
        await strategy.action();
        clickSuccessful = true;
        console.log(`‚úÖ ${strategy.name} bem-sucedido!`);
        break;
      } catch (clickError) {
        console.log(`‚ùå ${strategy.name} falhou: ${clickError.message}`);
        lastError = clickError;
        
        // Aguardar um pouco antes da pr√≥xima tentativa
        await this.delayManager.smartDelay('retryClick', { priority: 'low' });
      }
    }
    
    if (!clickSuccessful) {
      throw new Error(`Falha ao clicar no bot√£o Adicionar: ${lastError?.message}`);
    }
    
    // Aguardar modal/formul√°rio carregar
    await this.delayManager.smartDelay('modalLoad', { priority: 'medium' });
    console.log('‚úÖ Bot√£o Adicionar clicado com sucesso');
  }
  
  async selectOrgaoJulgadorOptimized(orgao) {
    console.log(`üéØ ASSERTIVO: Sele√ß√£o direta de OJ: ${orgao}`);
    
    try {
      // Verificar se a p√°gina foi fechada
      if (this.page.isClosed()) {
        throw new Error('P√°gina foi fechada antes de selecionar o √ìrg√£o Julgador');
      }
      
      // 1. DIRETO: Encontrar e clicar no mat-select de √ìrg√£o Julgador
      console.log('üéØ Procurando mat-select de √ìrg√£o Julgador...');
      
      // Seletores expandidos para maior compatibilidade (copiado da vers√£o sequencial)
      const matSelectSelectors = [
        'mat-dialog-container mat-select[placeholder="√ìrg√£o Julgador"]',
        'mat-dialog-container mat-select[placeholder="Orgao Julgador"]',
        '[role="dialog"] mat-select[placeholder="√ìrg√£o Julgador"]',
        'mat-dialog-container mat-select[name="idOrgaoJulgadorSelecionado"]',
        'mat-dialog-container mat-select[placeholder*="√ìrg√£o"]',
        '[role="dialog"] mat-select[placeholder*="√ìrg√£o"]',
        'mat-dialog-container mat-select',
        '[role="dialog"] mat-select'
      ];
      
      let matSelectElement = null;
      for (const selector of matSelectSelectors) {
        try {
          console.log(`üîç Testando seletor: ${selector}`);
          await this.page.waitForSelector(selector, { timeout: 2000 });
          matSelectElement = selector;
          console.log(`‚úÖ Mat-select encontrado: ${selector}`);
          break;
        } catch (e) {
          console.log(`‚ùå Seletor falhou: ${selector}`);
        }
      }
      
      if (!matSelectElement) {
        throw new Error('Mat-select de √ìrg√£o Julgador n√£o encontrado no modal');
      }
      
      // Verificar se a p√°gina ainda est√° aberta antes de clicar
      if (this.page.isClosed()) {
        throw new Error('P√°gina foi fechada antes de clicar no mat-select');
      }
      
      // Clicar no mat-select usando retry manager
      await this.retryManager.retryClick(
        async (selector) => {
          const element = await this.page.$(selector);
          if (element) {
            await element.click();
          } else {
            throw new Error('Element not found');
          }
        },
        matSelectElement
      );
      console.log('‚úÖ Mat-select de OJ clicado');
      
      // 2. AGUARDAR: Op√ß√µes aparecerem
      console.log('üéØ Aguardando op√ß√µes do dropdown...');
      await this.page.waitForSelector('mat-option', { timeout: 3000 });
      
      // Verificar se a p√°gina ainda est√° aberta
      if (this.page.isClosed()) {
        throw new Error('P√°gina foi fechada ap√≥s aguardar op√ß√µes');
      }
      
      // 3. SELECIONAR: Buscar op√ß√£o exata
      console.log(`üéØ Procurando op√ß√£o: ${orgao}`);
      const opcoes = this.page.locator('mat-option');
      const numOpcoes = await opcoes.count();
      
      console.log(`üìã ${numOpcoes} op√ß√µes dispon√≠veis`);
      
      let opcaoEncontrada = false;
      for (let i = 0; i < numOpcoes; i++) {
        // Verificar se a p√°gina ainda est√° aberta a cada itera√ß√£o
        if (this.page.isClosed()) {
          throw new Error('P√°gina foi fechada durante busca de op√ß√µes');
        }
        
        const textoOpcao = await opcoes.nth(i).textContent();
        if (textoOpcao && textoOpcao.includes(orgao)) {
          await opcoes.nth(i).click();
          console.log(`‚úÖ OJ selecionado: ${textoOpcao.trim()}`);
          opcaoEncontrada = true;
          break;
        }
      }
      
      if (!opcaoEncontrada) {
        throw new Error(`OJ "${orgao}" n√£o encontrado nas op√ß√µes dispon√≠veis`);
      }
      
      // 4. AGUARDAR: Processamento da sele√ß√£o com delay contextual
      await this.delay(1000); // Delay simples para processamento da sele√ß√£o
      console.log('‚úÖ Sele√ß√£o de OJ conclu√≠da');
      
    } catch (error) {
      console.error(`‚ùå Erro na sele√ß√£o assertiva de OJ: ${error.message}`);
      throw error;
    }
  }
  
  async configurePapelVisibilidadeOptimized() {
    // Verificar se a p√°gina foi fechada
    if (this.page.isClosed()) {
      throw new Error('P√°gina foi fechada antes de configurar papel e visibilidade');
    }
    
    console.log('üîß Configurando papel e visibilidade...');
    
    try {
      // Aguardar modal carregar
      await this.page.waitForTimeout(1500);
      
      // 1. CONFIGURAR PAPEL - SEMPRE SERVIDOR (SEGURAN√áA CR√çTICA)
      const papelConfigurado = 'Servidor'; // FIXO para seguran√ßa - nunca alterar
      console.log(`üîí SEGURAN√áA: Configurando papel fixo: ${papelConfigurado}`);
      console.log(`‚ö†Ô∏è AVISO: Papel sempre ser√° 'Servidor' por seguran√ßa, ignorando config: ${this.config.perfil || 'N/A'}`);
      const seletoresPapel = [
        'mat-dialog-container mat-select[placeholder*="Papel"]',
        'mat-dialog-container mat-select[formcontrolname*="papel"]',
        'mat-dialog-container mat-select[aria-label*="Papel"]',
        'mat-select[placeholder*="Papel"]',
        'mat-select:has-text("Papel")',
        '.mat-select-trigger:has-text("Papel")',
        // Seletores adicionais da vers√£o sequencial
        'mat-select[formcontrolname="papel"]',
        'mat-select[ng-reflect-name="papel"]',
        'select[name="papel"]',
        `mat-select:has(mat-option:has-text("${papelConfigurado}"))`,
        '[placeholder*="Papel"]',
        'mat-select[aria-label*="papel"]',
        'mat-select[placeholder*="papel" i]',
        '.mat-select:has(.mat-select-placeholder:contains("Papel"))',
        '.mat-form-field:has(mat-label:contains("Papel")) mat-select'
      ];
      
      let matSelectPapel = null;
      let tentativasPapel = 0;
      const maxTentativasPapel = 3;
      
      while (!matSelectPapel && tentativasPapel < maxTentativasPapel) {
        tentativasPapel++;
        console.log(`üîÑ Tentativa ${tentativasPapel} de encontrar campo de papel...`);
        
        for (const seletor of seletoresPapel) {
          try {
            if (this.page.isClosed()) {
              throw new Error('P√°gina fechada durante busca do papel');
            }
            
            const elemento = await this.page.waitForSelector(seletor, { timeout: 3000 });
            if (elemento && await elemento.isVisible() && await elemento.isEnabled()) {
              matSelectPapel = elemento;
              console.log(`‚úÖ Campo Papel encontrado: ${seletor}`);
              break;
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è Seletor papel n√£o encontrado: ${seletor}`);
          }
        }
        
        if (!matSelectPapel) {
          console.log(`‚ö†Ô∏è Tentativa ${tentativasPapel} falhou, aguardando antes da pr√≥xima...`);
          await this.delayManager.smartDelay('retryPapel', { priority: 'medium' });
        }
      }
      
      if (matSelectPapel) {
        // Clicar no mat-select usando retry manager
        await this.retryManager.retryClick(
          async () => {
            await matSelectPapel.click();
          },
          'campo de papel'
        );
        await this.page.waitForTimeout(1000);
        
        // Procurar op√ß√£o do papel configurado com m√∫ltiplas estrat√©gias
        const opcoesPapel = this.page.locator('mat-option');
        const totalOpcoes = await opcoesPapel.count();
        console.log(`üìã ${totalOpcoes} op√ß√µes de papel dispon√≠veis`);
        
        let perfilSelecionado = false;
        
        // Estrat√©gia 1: Busca exata pelo papel configurado
        for (let i = 0; i < totalOpcoes; i++) {
          if (this.page.isClosed()) {
            throw new Error('P√°gina fechada durante sele√ß√£o do papel');
          }
          
          const opcao = opcoesPapel.nth(i);
          const texto = await opcao.textContent();
          
          if (texto && texto.trim().toLowerCase() === papelConfigurado.toLowerCase()) {
            await opcao.click();
            console.log(`‚úÖ Papel selecionado (busca exata): ${texto.trim()}`);
            perfilSelecionado = true;
            break;
          }
        }
        
        // Estrat√©gia 2: Busca por inclus√£o do papel configurado
        if (!perfilSelecionado) {
          for (let i = 0; i < totalOpcoes; i++) {
            const opcao = opcoesPapel.nth(i);
            const texto = await opcao.textContent();
            
            if (texto && texto.toLowerCase().includes(papelConfigurado.toLowerCase())) {
              await opcao.click();
              console.log(`‚úÖ Papel selecionado (busca por inclus√£o): ${texto.trim()}`);
              perfilSelecionado = true;
              break;
            }
          }
        }
        
        // Estrat√©gia 3: APENAS SERVIDOR (SEGURAN√áA CR√çTICA)
        if (!perfilSelecionado) {
          // BUSCAR APENAS POR 'SERVIDOR' - NUNCA ADMINISTRADOR OU OUTROS
          for (let i = 0; i < totalOpcoes; i++) {
            const opcao = opcoesPapel.nth(i);
            const texto = await opcao.textContent();
            if (texto && texto.trim().toLowerCase().includes('servidor')) {
              await opcao.click();
              console.log(`üîí SEGURAN√áA: Papel SERVIDOR selecionado: ${texto.trim()}`);
              perfilSelecionado = true;
              break;
            }
          }
        }
        
        // Estrat√©gia 4: BLOQUEAR se n√£o encontrar SERVIDOR
        if (!perfilSelecionado) {
          console.log(`üö® ERRO CR√çTICO: Papel 'Servidor' n√£o encontrado! Listando op√ß√µes dispon√≠veis:`);
          for (let i = 0; i < totalOpcoes; i++) {
            const opcao = opcoesPapel.nth(i);
            const texto = await opcao.textContent();
            console.log(`   - Op√ß√£o ${i + 1}: "${texto?.trim()}"`);
          }
          throw new Error('SEGURAN√áA: Papel \'Servidor\' n√£o encontrado. Processo interrompido para evitar sele√ß√£o de papel inadequado.');
        }
      } else {
        console.log('‚ö†Ô∏è Campo Papel n√£o encontrado ap√≥s m√∫ltiplas tentativas');
      }
      
      await this.page.waitForTimeout(1000);
      
      // 2. VERIFICAR VISIBILIDADE ATUAL ANTES DE CLICAR (OTIMIZA√á√ÉO)
      console.log('üîç Verificando estado atual da visibilidade...');
      const visibilidadeAtual = await this.verificarVisibilidadeAtual();
      
      if (visibilidadeAtual === 'TODOS' || visibilidadeAtual === 'P√∫blico') {
        console.log(`‚úÖ Visibilidade j√° est√° correta: ${visibilidadeAtual}. Pulando configura√ß√£o desnecess√°ria.`);
      } else {
        console.log(`üéØ Configurando visibilidade de '${visibilidadeAtual}' para 'P√∫blico'...`);
        await this.configurarVisibilidade('P√∫blico');
      }
      
      await this.page.waitForTimeout(1000);
      console.log('‚úÖ Configura√ß√£o de papel e visibilidade conclu√≠da');
      
    } catch (error) {
      throw new Error(`Erro ao configurar papel/visibilidade: ${error.message}`);
    }
  }
  
  async verificarVisibilidadeAtual() {
    const seletoresVisibilidade = [
      '#mat-dialog-2 mat-select[placeholder="Localiza√ß√£o"]',
      'pje-modal-localizacao-visibilidade mat-select[placeholder="Localiza√ß√£o"]',
      '#mat-select-44',
      'mat-select[aria-labelledby*="mat-form-field-label-99"]',
      'mat-select[id="mat-select-44"]',
      'mat-dialog-container mat-select[placeholder="Localiza√ß√£o"]',
      '[role="dialog"] mat-select[placeholder="Localiza√ß√£o"]',
      '.mat-dialog-container mat-select[placeholder="Localiza√ß√£o"]',
      '.campo-localizacao mat-select',
      'mat-select[placeholder="Localiza√ß√£o"]',
      '.mat-form-field.campo-localizacao mat-select',
      'mat-select[placeholder*="Visibilidade"]',
      'mat-select[placeholder*="Localiza√ß√£o"]'
    ];
    
    try {
      for (const seletor of seletoresVisibilidade) {
        try {
          const elemento = await this.page.locator(seletor).first();
          if (await elemento.isVisible({ timeout: 1000 })) {
            const textoAtual = await elemento.textContent();
            if (textoAtual && textoAtual.trim()) {
              console.log(`üîç Visibilidade atual detectada: "${textoAtual.trim()}"`);
              return textoAtual.trim();
            }
          }
        } catch (e) {
          // Continua para pr√≥ximo seletor
        }
      }
      console.log(`‚ö†Ô∏è N√£o foi poss√≠vel detectar visibilidade atual`);
      return 'DESCONHECIDO';
    } catch (error) {
      console.log(`‚ùå Erro ao verificar visibilidade atual: ${error.message}`);
      return 'ERRO';
    }
  }

  async configurarVisibilidade(visibilidade) {
    console.log(`DEBUG: Iniciando configura√ß√£o da visibilidade: ${visibilidade}`);
    
    // Aguardar um pouco para garantir que a modal carregou
    await this.page.waitForTimeout(1000);
    
    // Timeout geral para evitar loop infinito
    const startTime = Date.now();
    const maxTimeout = 30000; // 30 segundos
    
    const seletoresVisibilidade = [
      // Seletores espec√≠ficos para modal de Localiza√ß√£o/Visibilidade
      '#mat-dialog-2 mat-select[placeholder="Localiza√ß√£o"]',
      'pje-modal-localizacao-visibilidade mat-select[placeholder="Localiza√ß√£o"]',
      '#mat-select-44',
      'mat-select[aria-labelledby*="mat-form-field-label-99"]',
      'mat-select[id="mat-select-44"]',
      // Seletores gen√©ricos mais amplos
      'mat-dialog-container mat-select[placeholder="Localiza√ß√£o"]',
      '[role="dialog"] mat-select[placeholder="Localiza√ß√£o"]',
      '.mat-dialog-container mat-select[placeholder="Localiza√ß√£o"]',
      '.campo-localizacao mat-select',
      'mat-select[placeholder="Localiza√ß√£o"]',
      '.mat-form-field.campo-localizacao mat-select',
      'mat-select[placeholder*="Visibilidade"]',
      'mat-select[placeholder*="Localiza√ß√£o"]',
      'select[name*="visibilidade"]',
      'select[name*="localizacao"]',
      'label:has-text("Visibilidade") + * mat-select',
      'label:has-text("Localiza√ß√£o") + * mat-select',
      'label:has-text("Visibilidade") ~ * mat-select',
      'label:has-text("Localiza√ß√£o") ~ * mat-select',
      '.mat-form-field:has(label:has-text("Visibilidade")) mat-select',
      '.mat-form-field:has(label:has-text("Localiza√ß√£o")) mat-select'
    ];
    
    for (const seletor of seletoresVisibilidade) {
      // Verificar timeout
      if (Date.now() - startTime > maxTimeout) {
        console.log(`DEBUG: Timeout atingido (${maxTimeout}ms), interrompendo configura√ß√£o de visibilidade`);
        break;
      }
      
      try {
        console.log(`DEBUG: Tentando configurar visibilidade com seletor: ${seletor}`);
        
        // Verificar se o elemento existe antes de tentar clicar
        const elemento = await this.page.$(seletor);
        if (!elemento) {
          console.log(`DEBUG: Elemento n√£o encontrado para seletor: ${seletor}`);
          continue;
        }
        
        console.log(`DEBUG: Elemento encontrado, tentando clicar...`);
        
        // Verificar se √© um mat-select
        if (seletor.includes('mat-select')) {
          // Tentar diferentes estrat√©gias de clique
          try {
            // Estrat√©gia 1: Clique direto
            await this.page.click(seletor, { force: true });
            console.log(`DEBUG: Clique direto realizado`);
          } catch (e1) {
            try {
              // Estrat√©gia 2: Clique no trigger
              await this.page.click(`${seletor} .mat-select-trigger`, { force: true });
              console.log(`DEBUG: Clique no trigger realizado`);
            } catch (e2) {
              console.log(`DEBUG: Falha ao clicar no mat-select: ${e2.message}`);
              continue;
            }
          }
        } else {
          // Para selects normais
          await this.page.click(seletor);
        }
        
        // Aguardar as op√ß√µes aparecerem
        await this.page.waitForTimeout(500);
        
        // Buscar pelas op√ß√µes
        const opcoes = await this.page.$$('mat-option');
        console.log(`DEBUG: ${opcoes.length} op√ß√µes encontradas`);
        
        if (opcoes.length === 0) {
          console.log(`DEBUG: Nenhuma op√ß√£o encontrada, tentando pr√≥ximo seletor`);
          continue;
        }
        
        // Procurar pela op√ß√£o desejada
        let opcaoEncontrada = false;
        for (const opcao of opcoes) {
          try {
            const texto = await opcao.textContent();
            console.log(`DEBUG: Verificando op√ß√£o: "${texto}"`);
            
            if (texto && texto.trim().toLowerCase().includes(visibilidade.toLowerCase())) {
              console.log(`DEBUG: Op√ß√£o encontrada: "${texto}", clicando...`);
              await opcao.click();
              opcaoEncontrada = true;
              break;
            }
          } catch (e) {
            console.log(`DEBUG: Erro ao verificar op√ß√£o: ${e.message}`);
            continue;
          }
        }
        
        if (opcaoEncontrada) {
          console.log(`DEBUG: Visibilidade configurada com sucesso: ${visibilidade}`);
          return true;
        } else {
          console.log(`DEBUG: Op√ß√£o "${visibilidade}" n√£o encontrada, tentando pr√≥ximo seletor`);
        }
        
      } catch (error) {
        console.log(`DEBUG: Erro ao tentar seletor ${seletor}: ${error.message}`);
        continue;
      }
    }
    
    console.log(`DEBUG: N√£o foi poss√≠vel configurar a visibilidade: ${visibilidade}`);
    return false;
  }

  async saveConfigurationOptimized() {
    console.log('üéØ ASSERTIVO: Salvamento direto...');
    
    try {
      if (this.page.isClosed()) {
        throw new Error('P√°gina fechada durante salvamento');
      }
      
      // Usar a mesma estrat√©gia da vers√£o sequencial
      const seletoresBotaoGravar = [
        // PRIMEIRO: Bot√£o espec√≠fico para peritos (PRIORIDADE M√ÅXIMA)
        'mat-dialog-container button:has-text("Vincular √ìrg√£o Julgador ao Perito")',
        '[role="dialog"] button:has-text("Vincular √ìrg√£o Julgador ao Perito")',
        '.mat-dialog-container button:has-text("Vincular √ìrg√£o Julgador ao Perito")',
        
        // SEGUNDO: Bot√µes de vincular gen√©ricos
        'mat-dialog-container button:has-text("Vincular")',
        '[role="dialog"] button:has-text("Vincular")',
        
        // TERCEIRO: Bot√µes de gravar/salvar para servidores  
        'mat-dialog-container button:has-text("Gravar")',
        '[role="dialog"] button:has-text("Gravar")',
        '.mat-dialog-container button:has-text("Gravar")',
        'mat-dialog-container button:has-text("Salvar")',
        '[role="dialog"] button:has-text("Salvar")',
        'mat-dialog-container button:has-text("Confirmar")',
        
        // Fallbacks globais (√∫ltima op√ß√£o)
        'button:has-text("Vincular √ìrg√£o Julgador ao Perito")',
        'button:has-text("Vincular")',
        'button:has-text("Gravar")',
        'button:has-text("Salvar")',
        'button:has-text("Confirmar")',
        'input[type="submit"]',
        'input[type="button"][value*="Gravar"]',
        'input[type="button"][value*="Salvar"]'
      ];
      
      let botaoEncontrado = false;
      for (const seletor of seletoresBotaoGravar) {
        try {
          console.log(`üîç Testando bot√£o: ${seletor}`);
          const botao = this.page.locator(seletor);
          if (await botao.count() > 0 && await botao.first().isVisible({ timeout: 2000 })) {
            console.log(`‚úÖ Bot√£o encontrado: ${seletor}`);
            await botao.first().click({ force: true });
            botaoEncontrado = true;
            console.log('‚úÖ Clique no bot√£o Gravar realizado');
            break;
          } else {
            console.log(`‚ùå Bot√£o ${seletor} n√£o vis√≠vel ou n√£o encontrado`);
          }
        } catch (e) {
          console.log(`‚ùå Seletor ${seletor} falhou: ${e.message}`);
        }
      }
      
      if (!botaoEncontrado) {
        // Tentar buscar por role no modal
        try {
          console.log('üîç Tentando buscar bot√£o por role no modal...');
          const botaoRole = this.page.getByRole('button', { name: /Gravar|Salvar|Confirmar|Vincular/i });
          if (await botaoRole.count() > 0 && await botaoRole.first().isVisible({ timeout: 2000 })) {
            await botaoRole.first().click({ force: true });
            botaoEncontrado = true;
            console.log('‚úÖ Bot√£o encontrado por role e clicado');
          }
        } catch (e) {
          console.log('‚ùå Busca por role tamb√©m falhou:', e.message);
        }
      }
      
      if (!botaoEncontrado) {
        // Debug: listar todos os bot√µes no modal
        try {
          console.log('üîç DEBUG: Listando bot√µes no modal...');
          const botoesModal = await this.page.locator('mat-dialog-container button, [role="dialog"] button').all();
          for (let i = 0; i < botoesModal.length; i++) {
            try {
              const texto = await botoesModal[i].textContent();
              const isVisible = await botoesModal[i].isVisible();
              console.log(`  Bot√£o ${i + 1}: "${texto}" (vis√≠vel: ${isVisible})`);
            } catch (e) {
              console.log(`  Bot√£o ${i + 1}: Erro ao obter informa√ß√µes`);
            }
          }
        } catch (debugError) {
          console.log(`‚ö†Ô∏è Erro no debug de bot√µes: ${debugError.message}`);
        }
        
        throw new Error('Bot√£o Gravar/Salvar n√£o encontrado no modal');
      }
      
      // Aguardar processamento e verificar resultado
      console.log('Aguardando processamento da vincula√ß√£o...');
      await this.page.waitForTimeout(2000);
      
      // Verificar se apareceu modal de confirma√ß√£o
      try {
        const modalConfirmacao = await this.page.locator('text=/certeza.*vincular.*√ìrg√£o Julgador.*Perito/i').first().isVisible({ timeout: 3000 });
        if (modalConfirmacao) {
          console.log('‚úì Modal de confirma√ß√£o detectado, clicando em "Sim"...');
          
          // Procurar bot√£o "Sim"
          const seletoresSim = [
            'button:has-text("Sim")',
            'button:has-text("OK")',
            'button:has-text("Confirmar")',
            'button[class*="confirm"]',
            '.btn-success:has-text("Sim")',
            '.btn-primary:has-text("Sim")'
          ];
          
          let simClicado = false;
          for (const seletor of seletoresSim) {
            try {
              const botaoSim = this.page.locator(seletor);
              if (await botaoSim.first().isVisible({ timeout: 2000 })) {
                await botaoSim.first().click({ force: true });
                simClicado = true;
                console.log('‚úì Confirma√ß√£o realizada');
                break;
              }
            } catch (e) {
              continue;
            }
          }
          
          if (!simClicado) {
            console.log('‚ö†Ô∏è Bot√£o Sim n√£o encontrado no modal de confirma√ß√£o');
          }
        }
      } catch (error) {
        console.log('Modal de confirma√ß√£o n√£o detectado ou erro:', error.message);
      }
      
      console.log('‚úÖ Salvamento confirmado');
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro no salvamento: ${error.message}`);
      throw error;
    }
  }
  
  async verifySuccessOptimized() {
    const timeout = TimeoutManager.obterTimeout('pje', 'aguardarProcessamento');
    
    try {
      // Aguardar indicadores de sucesso
      const successSelectors = [
        '.success-message',
        '.alert-success',
        '.mat-snack-bar-container',
        '[role="alert"]:has-text("sucesso")',
        '.notification-success'
      ];
      
      const successPromise = Promise.race(
        successSelectors.map(selector => 
          this.page.waitForSelector(selector, { timeout })
        )
      );
      
      await successPromise;
      await this.delayManager.smartDelay('verification', { priority: 'medium' });
      
    } catch (error) {
      // Se n√£o encontrar mensagem de sucesso, verificar se n√£o h√° erro
      const errorSelectors = [
        '.error-message',
        '.alert-danger',
        '.mat-error',
        '[role="alert"]:has-text("erro")'
      ];
      
      for (const selector of errorSelectors) {
        const errorElement = await this.page.$(selector);
        if (errorElement && await errorElement.isVisible()) {
          const errorText = await errorElement.textContent();
          throw new Error(`Erro na opera√ß√£o: ${errorText}`);
        }
      }
      
      // Se n√£o h√° erro vis√≠vel, assumir sucesso
      console.log('‚ö†Ô∏è Mensagem de sucesso n√£o encontrada, mas sem erros detectados');
    }
  }

  // === UTILIT√ÅRIOS ===
  
  extractOJsFromText(text, ojSet) {
    if (!text) return;
    
    const patterns = [
      /EXE\d+/gi,
      /LIQ\d+/gi,
      /CON\d+/gi,
      /DIVEX/gi,
      /[\d¬∫]+¬™?\s*Vara\s+do\s+Trabalho/gi
    ];
    
    patterns.forEach(pattern => {
      const matches = text.match(pattern);
      if (matches) {
        matches.forEach(match => {
          const normalized = this.normalizeOrgaoName(match.trim());
          ojSet.add(normalized);
        });
      }
    });
  }
  
  normalizeOrgaoName(orgao) {
    return orgao
      .trim()
      .toUpperCase()
      .replace(/\s+/g, ' ')
      .replace(/[^A-Z0-9\s]/g, '');
  }
  
  createBatches(array, batchSize) {
    const batches = [];
    for (let i = 0; i < array.length; i += batchSize) {
      batches.push(array.slice(i, i + batchSize));
    }
    return batches;
  }
  
  async executeWithTimeout(fn, timeout) {
    return new Promise((resolve, reject) => {
      let completed = false;
      const startTime = Date.now();
      
      const timer = setTimeout(() => {
        if (!completed) {
          completed = true;
          const elapsed = Date.now() - startTime;
          console.log(`‚è∞ Timeout de ${timeout}ms atingido ap√≥s ${elapsed}ms - opera√ß√£o cancelada`);
          reject(new Error(`Opera√ß√£o excedeu timeout de ${timeout}ms`));
        }
      }, timeout);
      
      fn().then(result => {
        if (!completed) {
          completed = true;
          clearTimeout(timer);
          const elapsed = Date.now() - startTime;
          console.log(`‚úÖ Opera√ß√£o conclu√≠da em ${elapsed}ms (timeout: ${timeout}ms)`);
          resolve(result);
        }
      }).catch(error => {
        if (!completed) {
          completed = true;
          clearTimeout(timer);
          const elapsed = Date.now() - startTime;
          console.log(`‚ùå Opera√ß√£o falhou ap√≥s ${elapsed}ms: ${error.message}`);
          reject(error);
        }
      });
    });
  }
  
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  async quickRecovery() {
    try {
      if (this.page && !this.page.isClosed()) {
        console.log('üîÑ Iniciando recupera√ß√£o r√°pida...');
        
        // Fechar qualquer modal aberto
        await this.page.evaluate(() => {
          const modals = document.querySelectorAll('mat-dialog-container, .cdk-overlay-container, .modal-backdrop');
          modals.forEach(modal => {
            const closeBtn = modal.querySelector('[mat-dialog-close], .mat-dialog-close, .close, .btn-close');
            if (closeBtn) {
              closeBtn.click();
            }
          });
          
          // Limpar qualquer overlay ou backdrop
          const overlays = document.querySelectorAll('.cdk-overlay-backdrop, .mat-dialog-backdrop, .modal-backdrop');
          overlays.forEach(overlay => overlay.remove());
        });
        
        // Pressionar ESC para fechar modais
        await this.page.keyboard.press('Escape');
        
        // Aguardar um pouco para a p√°gina se estabilizar
        await this.delay(200);
        
        // Verificar se ainda h√° elementos de loading com timeout reduzido
        await this.page.waitForFunction(
          () => {
            const loadingElements = document.querySelectorAll('.loading, .spinner, [class*="loading"]');
            return loadingElements.length === 0;
          },
          { timeout: 1500 }
        ).catch(() => {
          console.log('‚ö†Ô∏è Elementos de loading ainda presentes ap√≥s recovery');
        });
        
        console.log('‚úÖ Recupera√ß√£o r√°pida conclu√≠da');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro durante quick recovery: ${error.message}`);
    }
  }
  
  // M√©todos de sele√ß√£o de OJ (mantidos para compatibilidade)
  async selectByValue(orgao) {
    // Para mat-select do Angular Material
    try {
      // Aguardar mat-select ficar habilitado
      await this.waitForMatSelectEnabled();
      
      // Primeiro clicar no mat-select para abrir
      await this.page.click('mat-select');
      await this.page.waitForTimeout(1000);
      
      // Procurar pela op√ß√£o com o valor
      const option = this.page.locator(`mat-option:has-text("${orgao}")`);
      await option.click();
    } catch (error) {
      throw new Error(`Erro ao selecionar por valor: ${error.message}`);
    }
  }
  
  async selectByText(orgao) {
    // Para mat-select do Angular Material
    try {
      // Aguardar mat-select ficar habilitado
      await this.waitForMatSelectEnabled();
      
      // Primeiro clicar no mat-select para abrir
      const matSelect = this.page.locator('mat-select').first();
      await matSelect.click();
      await this.page.waitForTimeout(1000);
      
      // Procurar pela op√ß√£o com o texto exato
      const option = this.page.locator(`mat-option:has-text("${orgao}")`);
      await option.click();
    } catch (error) {
      throw new Error(`Erro ao selecionar por texto: ${error.message}`);
    }
  }
  
  async selectByPartialMatch(orgao) {
    try {
      // Aguardar mat-select ficar habilitado
      await this.waitForMatSelectEnabled();
      
      // Primeiro clicar no mat-select para abrir
      const matSelect = this.page.locator('mat-select').first();
      await matSelect.click();
      await this.page.waitForTimeout(1000);
      
      // Procurar por todas as op√ß√µes
      const options = await this.page.locator('mat-option').all();
      for (const option of options) {
        const text = await option.textContent();
        if (text && text.includes(orgao)) {
          await option.click();
          return;
        }
      }
      throw new Error('Op√ß√£o n√£o encontrada');
    } catch (error) {
      throw new Error(`Erro ao selecionar por correspond√™ncia parcial: ${error.message}`);
    }
  }
  
  async waitForMatSelectEnabled() {
    console.log('üîÑ Aguardando mat-select ficar habilitado...');
    
    try {
      // Aguardar at√© 15 segundos para o mat-select ficar habilitado
      await this.page.waitForFunction(
        () => {
          const matSelect = document.querySelector('mat-select');
          if (!matSelect) return false;
          
          // Verifica√ß√µes mais rigorosas compat√≠veis com Playwright
          const isAriaDisabled = matSelect.getAttribute('aria-disabled') === 'true';
          const isDisabledAttr = matSelect.hasAttribute('disabled');
          const isVisible = matSelect.offsetParent !== null;
          const computedStyle = window.getComputedStyle(matSelect);
          const isDisplayed = computedStyle.display !== 'none';
          const isVisibilityHidden = computedStyle.visibility === 'hidden';
          const isPointerEventsNone = computedStyle.pointerEvents === 'none';
          const tabIndex = matSelect.getAttribute('tabindex');
          const isTabIndexNegative = tabIndex && parseInt(tabIndex) < 0;
          
          // Verificar se o elemento est√° realmente interativo
          const isInteractive = !isAriaDisabled && 
                               !isDisabledAttr && 
                               isVisible && 
                               isDisplayed && 
                               !isVisibilityHidden && 
                               !isPointerEventsNone && 
                               !isTabIndexNegative;
          
          console.log('Mat-select estado detalhado:', {
            ariaDisabled: isAriaDisabled,
            disabledAttr: isDisabledAttr,
            visible: isVisible,
            displayed: isDisplayed,
            visibilityHidden: isVisibilityHidden,
            pointerEvents: computedStyle.pointerEvents,
            tabIndex: tabIndex,
            isInteractive: isInteractive,
            id: matSelect.id,
            classes: matSelect.className
          });
          
          return isInteractive;
        },
        { timeout: 15000 }
      );
      
      console.log('‚úÖ Mat-select est√° habilitado e pronto para intera√ß√£o');
      
      // Aguardar um pouco mais para garantir estabilidade
      await this.page.waitForTimeout(1000);
      
    } catch (error) {
      console.log('‚ö†Ô∏è Timeout aguardando mat-select ficar habilitado, verificando estado atual...');
      
      // Verificar estado atual do mat-select
      const currentState = await this.page.evaluate(() => {
        const matSelect = document.querySelector('mat-select');
        if (!matSelect) return { found: false };
        
        const computedStyle = window.getComputedStyle(matSelect);
        return {
          found: true,
          ariaDisabled: matSelect.getAttribute('aria-disabled'),
          disabled: matSelect.hasAttribute('disabled'),
          display: computedStyle.display,
          visibility: computedStyle.visibility,
          pointerEvents: computedStyle.pointerEvents,
          tabIndex: matSelect.getAttribute('tabindex'),
          classes: matSelect.className
        };
      });
      
      console.log('Estado atual do mat-select:', currentState);
      
      // Aguardar um pouco mais e tentar prosseguir
      await this.page.waitForTimeout(3000);
    }
  }
}

/**
 * Sem√°foro para controle de concorr√™ncia
 */
class Semaphore {
  constructor(maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
    this.currentConcurrency = 0;
    this.queue = [];
  }
  
  async acquire() {
    return new Promise((resolve) => {
      if (this.currentConcurrency < this.maxConcurrency) {
        this.currentConcurrency++;
        resolve();
      } else {
        this.queue.push(resolve);
      }
    });
  }
  
  release() {
    this.currentConcurrency--;
    if (this.queue.length > 0) {
      const next = this.queue.shift();
      this.currentConcurrency++;
      next();
    }
  }
}

module.exports = ParallelOJProcessor;