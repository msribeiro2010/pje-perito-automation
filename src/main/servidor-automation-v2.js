const { chromium } = require('playwright');
const { ipcMain } = require('electron');
const fs = require('fs');
const path = require('path');
const { login } = require('../login.js');
const { loadConfig } = require('../util.js');
const ParallelOJProcessor = require('./parallel-oj-processor.js');
const TimeoutManager = require('../utils/timeouts.js');
const ContextualDelayManager = require('./contextual-delay-manager.js');
const UltraFastDelayManager = require('../utils/ultra-fast-delay-manager.js');
const DOMCacheManager = require('./dom-cache-manager.js');
const SmartRetryManager = require('./smart-retry-manager.js');
const NavigationOptimizer = require('./navigation-optimizer.js');
const PerformanceMonitor = require('./performance-monitor.js');
const PJEResilienceManager = require('./pje-resilience-manager.js');
const { SmartOJCache } = require('../utils/smart-oj-cache.js');
const { VerificacaoOJPapel } = require('../utils/verificacao-oj-papel.js');
const { ServidorSkipDetector } = require('../utils/servidor-skip-detector.js');
const IntelligentCacheManager = require('../utils/intelligent-cache-manager.js');
const TurboModeProcessor = require('./turbo-mode-processor.js');
const SmartOJIntegration = require('../utils/smart-oj-integration.js');
const DatabaseConnection = require('../utils/database-connection.js');
const { verificarEProcessarLocalizacoesFaltantes, isVaraLimeira, aplicarTratamentoLimeira } = require('../vincularOJ.js');
const { resolverProblemaVarasLimeira, SolucaoLimeiraCompleta } = require('../../solucao-limeira-completa.js');
const { DetectorVarasProblematicas } = require('../utils/detector-varas-problematicas.js');

/**
 * Automa√ß√£o moderna para vincula√ß√£o de OJs a servidores
 * Baseada no documento automacao.md com melhorias implementadas
 */
class ServidorAutomationV2 {
  constructor() {
    this.isRunning = false;
    this.currentProgress = 0;
    this.totalOrgaos = 0;
    this.mainWindow = null;
    this.browser = null;
    this.page = null;
    this.config = null;
    this.results = [];
    this.ojCache = new Set(); // Cache para OJs j√° cadastrados
    this.smartOJCache = new SmartOJCache(); // Cache inteligente para verifica√ß√£o de OJs
    this.verificacaoOJPapel = new VerificacaoOJPapel(); // Sistema de verifica√ß√£o OJ + papel
    this.servidorSkipDetector = new ServidorSkipDetector(); // Detector de servidores para pular
    this.intelligentCache = new IntelligentCacheManager(); // Cache inteligente HIPER-OTIMIZADO
    this.turboProcessor = null; // Processador TURBO para m√°xima velocidade
    this.smartOJIntegration = new SmartOJIntegration(); // Sistema inteligente de verifica√ß√£o e integra√ß√£o de OJs
    this.currentServidor = null; // Servidor sendo processado atualmente
    this.isProduction = process.env.NODE_ENV === 'production';
    this.timeoutManager = new TimeoutManager();
    this.delayManager = new ContextualDelayManager(this.timeoutManager);
    this.ultraFastDelayManager = new UltraFastDelayManager({ mode: 'ultra_fast', adaptive: true });
    this.retryManager = new SmartRetryManager(this.timeoutManager);
    this.navigationOptimizer = new NavigationOptimizer(this.timeoutManager, this.retryManager);
    this.performanceMonitor = new PerformanceMonitor();
    this.resilienceManager = new PJEResilienceManager();
    this.domCache = null;
    this.parallelProcessor = null;
    this.detectorVaras = new DetectorVarasProblematicas(); // Detector autom√°tico de varas problem√°ticas
    this.dbConnection = null; // Conex√£o com banco de dados para verifica√ß√£o inteligente
    this.forcedOJsNormalized = null; // OJs que DEVEM ser processadas (normalizadas)
  }

  setMainWindow(window) {
    this.mainWindow = window;
  }

  /**
   * Inicializa a conex√£o com o banco de dados
   */
  async initializeDatabaseConnection() {
    try {
      this.sendStatus('info', 'üîó Inicializando conex√£o com banco de dados...', 0, 'Configurando sistema inteligente');
      
      this.dbConnection = new DatabaseConnection();
      const connected = await this.dbConnection.initialize();
      
      if (connected) {
        this.sendStatus('success', '‚úÖ Conex√£o com banco estabelecida - Sistema inteligente ativado!', 0, 'Verifica√ß√£o de OJs otimizada');
        return true;
      } else {
        this.sendStatus('warning', '‚ö†Ô∏è Banco n√£o dispon√≠vel - Funcionando no modo tradicional', 0, 'Sem otimiza√ß√£o de verifica√ß√£o');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro ao conectar banco:', error.message);
      this.sendStatus('warning', '‚ö†Ô∏è Erro na conex√£o com banco - Modo tradicional ativado', 0, 'Sistema funcionando normalmente');
      return false;
    }
  }

  /**
   * Verifica OJs j√° cadastrados para um servidor antes da automa√ß√£o
   * @param {string} cpfServidor - CPF do servidor
   * @param {Array} ojsParaProcessar - Lista de OJs que seriam processados
   * @returns {Object} Resultado da verifica√ß√£o inteligente
   */
  async verificarOJsInteligente(cpfServidor, ojsParaProcessar) {
    console.log(`üîç [DEBUG] DIRLEI VERIFICA√á√ÉO - Iniciando verificarOJsInteligente`);
    console.log(`üîç [DEBUG] DIRLEI VERIFICA√á√ÉO - CPF: ${cpfServidor}`);
    console.log(`üîç [DEBUG] DIRLEI VERIFICA√á√ÉO - OJs para processar: ${JSON.stringify(ojsParaProcessar)}`);

    // CORRE√á√ÉO: Integrar com SmartOJCache para usar dados do cache persistente
    console.log(`üîç [DEBUG] INTEGRA√á√ÉO CACHE - Verificando cache persistente primeiro...`);
    const cacheCarregado = await this.smartOJCache.carregarCachePersistente(cpfServidor);

    if (cacheCarregado && cacheCarregado.ojsJaVinculados) {
      console.log(`üì¶ [DEBUG] CACHE ENCONTRADO - ${cacheCarregado.ojsJaVinculados.length} OJs j√° vinculadas no cache`);

      // Separar OJs baseado no cache
      const ojsJaVinculadasDoCache = cacheCarregado.ojsJaVinculados.map(item => item.oj);
      const ojsParaProcessarFinal = ojsParaProcessar.filter(oj =>
        !ojsJaVinculadasDoCache.some(ojCache =>
          this.smartOJCache._normalizarTexto(oj) === this.smartOJCache._normalizarTexto(ojCache)
        )
      );

      console.log(`üéØ [DEBUG] RESULTADO CACHE:`);
      console.log(`   - OJs j√° vinculadas: ${ojsJaVinculadasDoCache.length}`);
      console.log(`   - OJs para processar: ${ojsParaProcessarFinal.length}`);

      const economiaCalculada = {
        tempo: ojsJaVinculadasDoCache.length * 5, // 5s por OJ
        cliques: ojsJaVinculadasDoCache.length * 3,
        ojsEvitados: ojsJaVinculadasDoCache.length
      };

      return {
        inteligenciaAtiva: true,
        servidorExiste: true,
        fonte: 'cache_persistente',
        totalVerificados: ojsParaProcessar.length,
        ojsParaProcessar: ojsParaProcessarFinal,
        ojsJaCadastrados: cacheCarregado.ojsJaVinculados,
        economia: economiaCalculada,
        mensagem: `Cache persistente: ${ojsParaProcessarFinal.length}/${ojsParaProcessar.length} OJs precisam ser processados`
      };
    }

    if (!this.dbConnection || !this.dbConnection.isConnected) {
      console.log(`‚ùå [DEBUG] DIRLEI VERIFICA√á√ÉO - Banco n√£o conectado!`);
      return {
        inteligenciaAtiva: false,
        ojsParaProcessar: ojsParaProcessar,
        ojsJaCadastrados: [],
        economia: { tempo: 0, cliques: 0 },
        mensagem: 'Banco n√£o conectado - processando todos os OJs'
      };
    }

    try {
      this.sendStatus('info', 'üß† Verifica√ß√£o inteligente: consultando OJs cadastrados...', 0, 'Analisando situa√ß√£o do servidor');

      // Buscar servidor por CPF
      console.log(`üîç [DEBUG] DIRLEI VERIFICA√á√ÉO - Buscando servidor por CPF...`);
      const resultadoServidor = await this.dbConnection.buscarServidorPorCPF(cpfServidor);
      console.log(`üîç [DEBUG] DIRLEI VERIFICA√á√ÉO - Resultado busca servidor:`, {
        existe: resultadoServidor.existe,
        servidor: resultadoServidor.servidor ? {
          idUsuario: resultadoServidor.servidor.idUsuario,
          nome: resultadoServidor.servidor.nome
        } : null
      });

      if (!resultadoServidor.existe) {
        console.log(`‚ùå [DEBUG] DIRLEI VERIFICA√á√ÉO - Servidor n√£o encontrado no BD!`);
        return {
          inteligenciaAtiva: true,
          servidorExiste: false,
          ojsParaProcessar: ojsParaProcessar,
          ojsJaCadastrados: [],
          economia: { tempo: 0, cliques: 0 },
          mensagem: `Servidor CPF ${cpfServidor} n√£o encontrado no sistema`
        };
      }

      // Verificar OJs j√° cadastrados
      console.log(`üîç [DEBUG] DIRLEI VERIFICA√á√ÉO - Verificando OJs cadastrados para idUsuario: ${resultadoServidor.servidor.idUsuario}`);
      const verificacao = await this.dbConnection.verificarOJsCadastrados(
        resultadoServidor.servidor.idUsuario,
        ojsParaProcessar
      );

      console.log(`üîç [DEBUG] DIRLEI VERIFICA√á√ÉO - Resultado da consulta BD:`, {
        totalVerificados: verificacao.totalVerificados,
        ojsParaProcessar: verificacao.ojsParaProcessar,
        ojsJaCadastrados: verificacao.ojsJaCadastrados,
        estatisticas: verificacao.estatisticas
      });

      const economiaCalculada = {
        tempo: verificacao.estatisticas.economiaEstimada,
        cliques: verificacao.estatisticas.jaCadastrados * 3, // ~3 cliques por OJ
        ojsEvitados: verificacao.estatisticas.jaCadastrados
      };

      this.sendStatus('success', 
        `üéØ Verifica√ß√£o conclu√≠da: ${verificacao.ojsParaProcessar.length} OJs para processar, ${verificacao.ojsJaCadastrados.length} j√° cadastrados`, 
        0, 
        `Economia: ${economiaCalculada.tempo}s e ${economiaCalculada.cliques} cliques`
      );

      const resultadoFinal = {
        inteligenciaAtiva: true,
        servidorExiste: true,
        servidor: resultadoServidor.servidor,
        totalVerificados: verificacao.totalVerificados,
        ojsParaProcessar: verificacao.ojsParaProcessar,
        ojsJaCadastrados: verificacao.ojsJaCadastrados,
        ojsInativos: verificacao.ojsInativos,
        economia: economiaCalculada,
        estatisticas: verificacao.estatisticas,
        mensagem: `Sistema inteligente: ${verificacao.ojsParaProcessar.length}/${verificacao.totalVerificados} OJs precisam ser processados`
      };

      console.log(`üîç [DEBUG] DIRLEI VERIFICA√á√ÉO - Resultado FINAL que ser√° retornado:`, {
        inteligenciaAtiva: resultadoFinal.inteligenciaAtiva,
        ojsParaProcessar: resultadoFinal.ojsParaProcessar,
        ojsJaCadastrados: resultadoFinal.ojsJaCadastrados?.length || 0
      });

      return resultadoFinal;

    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o inteligente:', error.message);
      this.sendStatus('warning', '‚ö†Ô∏è Erro na verifica√ß√£o inteligente - processando todos os OJs', 0, 'Fallback para modo tradicional');
      
      return {
        inteligenciaAtiva: false,
        erro: error.message,
        ojsParaProcessar: ojsParaProcessar,
        ojsJaCadastrados: [],
        economia: { tempo: 0, cliques: 0 },
        mensagem: `Erro na verifica√ß√£o: ${error.message}`
      };
    }
  }

  /**
   * Formata os detalhes dos OJs para exibi√ß√£o ao usu√°rio
   * @param {Object} resultadoVerificacao - Resultado da verifica√ß√£o inteligente
   * @returns {Object} Detalhes formatados
   */
  formatarDetalhesOJs(resultadoVerificacao) {
    const resumo = [
      `üìä Total: ${resultadoVerificacao.totalVerificados} OJs`,
      `‚úÖ J√° cadastrados: ${resultadoVerificacao.ojsJaCadastrados.length}`,
      `üîÑ Para processar: ${resultadoVerificacao.ojsParaProcessar.length}`,
      `‚ö° Economia: ${resultadoVerificacao.economia.tempo}s`
    ].join(' | ');

    let detalhes = '';
    
    if (resultadoVerificacao.ojsJaCadastrados.length > 0) {
      detalhes += `\n‚úÖ OJs J√Å CADASTRADOS (ser√£o pulados):\n`;
      resultadoVerificacao.ojsJaCadastrados.forEach((oj, index) => {
        detalhes += `   ${index + 1}. ${oj.nome}\n`;
      });
    }
    
    if (resultadoVerificacao.ojsParaProcessar.length > 0) {
      detalhes += `\nüîÑ OJs QUE SER√ÉO PROCESSADOS:\n`;
      resultadoVerificacao.ojsParaProcessar.forEach((oj, index) => {
        detalhes += `   ${index + 1}. ${oj}\n`;
      });
    }

    return { resumo, detalhes };
  }

  /**
   * Solicita confirma√ß√£o do usu√°rio via modal
   * @param {string} titulo - T√≠tulo do modal
   * @param {string} mensagem - Mensagem principal
   * @param {string} detalhes - Detalhes adicionais
   * @param {string} pergunta - Pergunta para confirma√ß√£o
   * @returns {Promise<boolean>} True se confirmado
   */
  async solicitarConfirmacaoUsuario(titulo, mensagem, detalhes, pergunta) {
    return new Promise((resolve) => {
      if (!this.mainWindow || !this.mainWindow.webContents) {
        console.log('‚ö†Ô∏è MainWindow n√£o dispon√≠vel, continuando automaticamente...');
        resolve(true);
        return;
      }

      // Enviar dados para o modal de confirma√ß√£o
      this.mainWindow.webContents.executeJavaScript(`
        if (typeof showConfirmationModal === 'function') {
          showConfirmationModal({
            titulo: '${titulo.replace(/'/g, '\\\'')}',
            mensagem: '${mensagem.replace(/'/g, '\\\'')}',
            detalhes: \`${detalhes.replace(/`/g, '\\`')}\`,
            pergunta: '${pergunta.replace(/'/g, '\\\'')}',
            callback: 'confirmacaoAutomacao'
          });
        } else {
          console.log('Modal de confirma√ß√£o n√£o dispon√≠vel');
        }
      `).catch(err => {
        console.log('‚ö†Ô∏è Erro ao exibir modal:', err.message);
        resolve(true); // Continuar em caso de erro
      });

      // Registrar callback IPC para receber resposta do renderer
      let finished = false;
      const cleanup = () => {
        finished = true;
        // Garantir que n√£o h√° listeners residuais
        ipcMain.removeAllListeners('confirmacao-resultado');
      };

      ipcMain.once('confirmacao-resultado', (event, confirmado /*, forcado */) => {
        try {
          cleanup();
        } catch {}
        resolve(Boolean(confirmado));
      });

      // Timeout de 30 segundos - continuar automaticamente se n√£o houver resposta
      setTimeout(() => {
        if (finished) return;
        cleanup();
        console.log('‚è∞ Timeout na confirma√ß√£o - continuando automaticamente...');
        resolve(true);
      }, 30000);
    });
  }

  /**
   * Inicializa o cache DOM quando a p√°gina estiver dispon√≠vel
   */
  initializeDOMCache() {
    if (this.page && !this.domCache) {
      this.domCache = new DOMCacheManager(this.page, this.timeoutManager);
      console.log('‚úÖ Cache DOM inicializado');
    }
  }

  // Fun√ß√£o helper para delay contextual ULTRA-OTIMIZADO
  async delay(ms, context = 'default') {
    if (context === 'default') {
      // Para delays fixos, usar o UltraFast quando poss√≠vel
      if (ms <= 100) {
        return await this.ultraFastDelayManager.criticalDelay({ priority: 'critical' });
      } else if (ms <= 500) {
        return await this.ultraFastDelayManager.clickDelay({ priority: 'critical' });
      } else if (ms <= 1000) {
        return await this.ultraFastDelayManager.navigationDelay({ priority: 'critical' });
      }
      // Fallback para delays longos
      return new Promise(resolve => setTimeout(resolve, Math.min(ms, 2000))); // M√°ximo 2s
    }

    // Usar UltraFastDelayManager para contextos espec√≠ficos
    if (context === 'hyperFastBetweenOJs' || context === 'critical') {
      return await this.ultraFastDelayManager.criticalDelay({ priority: 'critical', context: context });
    }
    if (context === 'click' || context === 'form') {
      return await this.ultraFastDelayManager.clickDelay({ priority: 'critical', context: context });
    }
    if (context === 'navigation') {
      return await this.ultraFastDelayManager.navigationDelay({ priority: 'critical', context: context });
    }
    if (context === 'search') {
      return await this.ultraFastDelayManager.searchDelay({ priority: 'critical', context: context });
    }

    // Fallback para outros contextos
    return await this.delayManager.smartDelay(context, { priority: 'normal' });
  }
  
  // Novo m√©todo para delay contextual com op√ß√µes
  async contextualDelay(context, options = {}) {
    return await this.delayManager.smartDelay(context, options);
  }

  // Normalizar nomes de √≥rg√£os julgadores para corrigir erros de digita√ß√£o
  normalizeOrgaoName(orgao) {
    return orgao
      .replace(/\s+/g, ' ')  // Normalizar espa√ßos m√∫ltiplos
      .replace(/[‚Äì‚Äî‚àí]/g, '-')  // Normalizar travess√µes (‚Äì, ‚Äî, ‚àí) para h√≠fen (-)
      .replace(/doTrabalho/g, 'do Trabalho')  // Corrigir "doTrabalho" ‚Üí "do Trabalho"
      .replace(/daTrabalho/g, 'da Trabalho')  // Corrigir "daTrabalho" ‚Üí "da Trabalho"  
      .replace(/deTrabalho/g, 'de Trabalho')  // Corrigir "deTrabalho" ‚Üí "de Trabalho"
      .replace(/Trrabalho/g, 'Trabalho')  // Corrigir "Trrabalho" ‚Üí "Trabalho" (duplo R)
      .replace(/trrabalho/g, 'trabalho')  // Corrigir vers√£o min√∫scula
      .trim();
  }

  // NOVA FUN√á√ÉO: Busca inteligente por palavras-chave
  findBestOJMatch(targetOJ, availableOptions) {
    const targetWords = this.extractKeywords(targetOJ);
    let bestMatch = null;
    let bestScore = 0;
    
    console.log(`üîç Palavras-chave do OJ procurado: [${targetWords.join(', ')}]`);
    
    for (const option of availableOptions) {
      const optionWords = this.extractKeywords(option.text);
      const score = this.calculateMatchScore(targetWords, optionWords);
      
      console.log(`üîç "${option.text}" - Score: ${score} - Palavras: [${optionWords.join(', ')}]`);
      
      if (score > bestScore) {
        bestScore = score;
        bestMatch = option;
      }
    }
    
    console.log(`üéØ Melhor match encontrado: "${bestMatch?.text}" com score ${bestScore}`);
    return { match: bestMatch, score: bestScore };
  }
  
  // Extrair palavras-chave relevantes
  extractKeywords(text) {
    const normalized = text.toLowerCase()
      .replace(/[^a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s]/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    
    // Palavras irrelevantes que devem ser ignoradas
    const stopWords = ['de', 'da', 'do', 'das', 'dos', 'e', 'em', 'na', 'no', 'nas', 'nos', 'a', 'o', 'as', 'os', 'para', 'com', 'por'];
    
    return normalized.split(' ')
      .filter(word => word.length > 2 && !stopWords.includes(word))
      .slice(0, 8); // Limitar a 8 palavras mais relevantes
  }
  
  // Calcular score de compatibilidade
  calculateMatchScore(targetWords, optionWords) {
    let score = 0;
    const targetSet = new Set(targetWords);
    const optionSet = new Set(optionWords);
    
    // Pontos por palavras exatas
    for (const word of targetWords) {
      if (optionSet.has(word)) {
        score += 10;
      }
    }
    
    // Pontos por palavras similares (substring)
    for (const targetWord of targetWords) {
      for (const optionWord of optionWords) {
        if (targetWord.includes(optionWord) || optionWord.includes(targetWord)) {
          score += 5;
        }
      }
    }
    
    return score;
  }

  sendStatus(type, message, progress = null, subtitle = null, orgao = null, servidor = null, ojProcessed = null, totalOjs = null) {
    try {
      if (this.mainWindow && !this.mainWindow.isDestroyed()) {
        this.mainWindow.webContents.send('automation-progress', {
          type,
          message,
          progress,
          subtitle,
          orgaoJulgador: orgao,
          servidor,
          cpf: this.config?.cpf || null,
          perfil: this.config?.perfil || null,
          automationType: 'servidor-v2',
          ojProcessed,
          totalOjs
        });
      }
    } catch (error) {
      // Erro de IPC - n√£o √© cr√≠tico, apenas log
      console.warn('Erro ao enviar status IPC:', error.message);
    }
        
    try {
      console.log(`[${type.toUpperCase()}] ${message}${subtitle ? ` - ${subtitle}` : ''}${orgao ? ` (${orgao})` : ''}${servidor ? ` [${servidor}]` : ''}`);
    } catch (error) {
      // Em caso de erro at√© no console.log, usar process.stdout
      process.stdout.write(`[${type.toUpperCase()}] ${message}\n`);
    }
  }

  async startAutomation(config) {
    if (this.isRunning) {
      throw new Error('Automa√ß√£o j√° est√° em execu√ß√£o');
    }

    this.isRunning = true;
    this.config = config;
    this.currentProgress = 0;
    this.results = [];
    
    // Inicializar conex√£o com banco de dados para verifica√ß√£o inteligente
    if (!this.dbConnection) {
      await this.initializeDatabaseConnection();
    }
    
    // Iniciar monitoramento de performance
    this.performanceMonitor.startMonitoring();
    
    // Inicializar timer de processamento para o modal
    if (this.mainWindow && this.mainWindow.webContents) {
      this.mainWindow.webContents.executeJavaScript(`
        if (typeof startProcessingTimer === 'function') {
          startProcessingTimer();
        }
      `).catch(err => {
        console.log('‚ö†Ô∏è Erro ao inicializar timer de processamento:', err.message);
      });
    }

    try {
      // Suporte para processamento em lote de m√∫ltiplos servidores
      if (config.servidores && config.servidores.length > 0) {
        await this.processMultipleServidores(config);
      } else {
        // Modo compatibilidade - processar servidor √∫nico
        this.totalOrgaos = config.orgaos ? config.orgaos.length : 0;
        await this.processSingleServidor(config);
      }
            
      this.sendStatus('success', 'Automa√ß√£o conclu√≠da com sucesso!', 100, 'Processo finalizado');
            
    } catch (error) {
      console.error('Erro na automa√ß√£o:', error);
      this.sendStatus('error', `Erro na automa√ß√£o: ${error.message}`, this.currentProgress, 'Erro cr√≠tico');
      throw error;
    } finally {
      await this.cleanup();
      this.isRunning = false;
    }
  }

  /**
   * Inicia automa√ß√£o com processamento paralelo
   * @param {Object} config - Configura√ß√£o da automa√ß√£o
   * @param {number} maxInstances - N√∫mero m√°ximo de inst√¢ncias paralelas (padr√£o: 2)
   */
  async startParallelAutomation(servidores, config, maxInstances = 2) {
    if (this.isRunning) {
      throw new Error('Automa√ß√£o j√° est√° em execu√ß√£o');
    }

    // Validar configura√ß√£o para processamento paralelo
    if (!servidores || servidores.length === 0) {
      throw new Error('Processamento paralelo requer uma lista de servidores');
    }

    if (maxInstances < 1 || maxInstances > 30) {
      throw new Error('N√∫mero de inst√¢ncias deve estar entre 1 e 30');
    }

    this.isRunning = true;
    this.config = config;
    this.currentProgress = 0;
    this.results = [];
    
    // Iniciar monitoramento de performance
    this.performanceMonitor.startMonitoring();

    this.sendStatus('info', 'üöÄ Iniciando processamento paralelo', 0, 
      `${servidores.length} servidores com ${maxInstances} inst√¢ncias`);

    try {
      // Import dinamicamente para evitar depend√™ncia circular
      const ParallelServerManager = require('./parallel-server-manager.js');
      const parallelManager = new ParallelServerManager(maxInstances);
      parallelManager.mainWindow = this.mainWindow;
      
      // Inicializar inst√¢ncias paralelas
      await parallelManager.initialize();
      
      this.sendStatus('info', `‚úÖ ${maxInstances} inst√¢ncias inicializadas`, 10, 
        'Iniciando processamento dos servidores');
      
      // Configurar para manter navegador aberto por padr√£o
      const parallelConfig = {
        orgaos: config.orgaos || [],
        keepBrowserOpen: config.keepBrowserOpen !== false // Default: true
      };
      
      // Processar servidores em paralelo
      const results = await parallelManager.processServersInParallel(servidores, parallelConfig);
      
      // Consolidar resultados
      this.results = results.resultados || [];
      
      // Gerar relat√≥rio espec√≠fico para processamento paralelo
      await this.generateParallelReport(results, maxInstances);
      
      this.sendStatus('success', 
        'üéâ Processamento paralelo conclu√≠do!', 
        100, 
        `${results.servidoresProcessados}/${results.totalServidores} servidores processados em ${(results.tempoTotal / 1000).toFixed(1)}s`);
      
      if (parallelConfig.keepBrowserOpen) {
        console.log('üîÑ Navegador mantido aberto para visualiza√ß√£o dos resultados');
        console.log('üí° Para fechar completamente, use: automation.forceCleanup()');
        // Armazenar refer√™ncia do manager para cleanup posterior
        this.parallelManager = parallelManager;
      } else {
        // Limpar inst√¢ncias paralelas apenas se n√£o configurado para manter aberto
        await parallelManager.cleanup();
      }
      
      return results;
      
    } catch (error) {
      console.error('‚ùå Erro no processamento paralelo:', error);
      this.sendStatus('error', `Erro no processamento paralelo: ${error.message}`, this.currentProgress);
      throw error;
    } finally {
      this.isRunning = false;
      // Cleanup ser√° feito apenas se keepBrowserOpen for false
    }
  }

  /**
   * For√ßa o fechamento completo de todas as inst√¢ncias
   */
  async forceCleanup() {
    if (this.parallelManager) {
      console.log('üîÑ For√ßando fechamento de todas as inst√¢ncias...');
      await this.parallelManager.cleanup(true);
      this.parallelManager = null;
      console.log('‚úÖ Todas as inst√¢ncias foram fechadas');
    } else {
      console.log('‚ÑπÔ∏è Nenhuma inst√¢ncia paralela ativa para fechar');
    }
  }
  
  /**
   * Gera relat√≥rio espec√≠fico para processamento paralelo
   */
  async generateParallelReport(results, maxInstances) {
    try {
      const outputDir = path.join(__dirname, '..', '..', 'data');
      
      // Garantir que o diret√≥rio existe
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      
      const report = {
        timestamp: new Date().toISOString(),
        tipoProcessamento: 'Paralelo',
        configuracao: {
          instanciasUtilizadas: maxInstances,
          servidoresTotais: results.totalServidores,
          servidoresProcessados: results.servidoresProcessados
        },
        performance: {
          tempoTotalSegundos: results.tempoTotal / 1000,
          tempoMedioServidorSegundos: results.tempoMedioServidor / 1000,
          eficienciaParalela: results.eficienciaParalela,
          estatisticas: results.estatisticas
        },
        resultados: {
          sucessos: results.sucessos,
          erros: results.erros,
          detalhesServidores: results.resultados,
          errosDetalhados: results.errosDetalhados
        },
        comparacao: {
          estimativaSequencial: (results.tempoTotal * maxInstances) / 1000,
          ganhoTempo: results.eficienciaParalela?.timeReduction || 0,
          speedup: results.eficienciaParalela?.speedup || 1
        }
      };
      
      const reportPath = path.join(outputDir, `relatorio-paralelo-${timestamp}.json`);
      fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
      
      console.log(`üìä Relat√≥rio paralelo salvo: ${reportPath}`);
      
      // Tamb√©m gerar vers√£o leg√≠vel
      const readableReportPath = path.join(outputDir, `relatorio-paralelo-legivel-${timestamp}.txt`);
      const readableContent = this.generateReadableParallelReport(report);
      fs.writeFileSync(readableReportPath, readableContent);
      
      console.log(`üìÑ Relat√≥rio leg√≠vel salvo: ${readableReportPath}`);
      
    } catch (error) {
      console.error('Erro ao gerar relat√≥rio paralelo:', error);
    }
  }

  /**
   * Gera vers√£o leg√≠vel do relat√≥rio paralelo
   */
  generateReadableParallelReport(report) {
    return `
=== RELAT√ìRIO DE PROCESSAMENTO PARALELO ===

Data/Hora: ${new Date(report.timestamp).toLocaleString('pt-BR')}
Tipo: ${report.tipoProcessamento}

--- CONFIGURA√á√ÉO ---
Inst√¢ncias Paralelas: ${report.configuracao.instanciasUtilizadas}
Servidores Totais: ${report.configuracao.servidoresTotais}
Servidores Processados: ${report.configuracao.servidoresProcessados}

--- PERFORMANCE ---
Tempo Total: ${report.performance.tempoTotalSegundos.toFixed(1)}s
Tempo M√©dio por Servidor: ${report.performance.tempoMedioServidorSegundos.toFixed(1)}s
Speedup: ${report.performance.eficienciaParalela?.speedup?.toFixed(2) || 'N/A'}x
Efici√™ncia: ${(report.performance.eficienciaParalela?.efficiency * 100)?.toFixed(1) || 'N/A'}%
Redu√ß√£o de Tempo: ${report.performance.eficienciaParalela?.timeReduction?.toFixed(1) || 'N/A'}%

--- RESULTADOS ---
Sucessos: ${report.resultados.sucessos}
Erros: ${report.resultados.erros}
Taxa de Sucesso: ${((report.resultados.sucessos / report.configuracao.servidoresProcessados) * 100).toFixed(1)}%

--- COMPARA√á√ÉO ---
Tempo Estimado Sequencial: ${report.comparacao.estimativaSequencial.toFixed(1)}s
Ganho de Tempo: ${report.comparacao.ganhoTempo.toFixed(1)}%
Velocidade: ${report.comparacao.speedup.toFixed(2)}x mais r√°pido

--- ESTAT√çSTICAS DETALHADAS ---
${report.performance.estatisticas ? `
Tempo de Processamento:
  M√≠nimo: ${(report.performance.estatisticas.tempoProcessamento?.minimo / 1000).toFixed(1)}s
  M√°ximo: ${(report.performance.estatisticas.tempoProcessamento?.maximo / 1000).toFixed(1)}s
  M√©dia: ${(report.performance.estatisticas.tempoProcessamento?.media / 1000).toFixed(1)}s

Sucessos por Servidor:
  M√≠nimo: ${report.performance.estatisticas.sucessosPorServidor?.minimo || 0}
  M√°ximo: ${report.performance.estatisticas.sucessosPorServidor?.maximo || 0}
  M√©dia: ${report.performance.estatisticas.sucessosPorServidor?.media?.toFixed(1) || 0}
  Total: ${report.performance.estatisticas.sucessosPorServidor?.total || 0}` : 'N√£o dispon√≠vel'}

=== FIM DO RELAT√ìRIO ===
`;
  }

  async processMultipleServidores(config) {
    const servidores = config.servidores;
    this.totalOrgaos = servidores.reduce((total, servidor) => total + (servidor.orgaos ? servidor.orgaos.length : 0), 0);
    
    // Inicializar estrutura de relat√≥rio por servidor
    this.servidorResults = {};
    this.processedServidores = 0;
    this.successfulServidores = 0;
    this.failedServidores = 0;
    this.consecutiveErrors = 0;
    this.maxConsecutiveErrors = 3; // Parar ap√≥s 3 erros consecutivos
    
    this.sendStatus('info', `üöÄ AUTOMA√á√ÉO EM LOTE: ${servidores.length} servidores, ${this.totalOrgaos} OJs total`, 0, 'Iniciando processamento sequencial robusto');
    
    await this.initializeBrowser();
    await this.performLogin();
    
    // Processar cada servidor na mesma sess√£o com recupera√ß√£o robusta
    for (let i = 0; i < servidores.length; i++) {
      const servidor = servidores[i];
      const progressBase = (i / servidores.length) * 90;
      
      // Verificar limite de erros consecutivos
      if (this.consecutiveErrors >= this.maxConsecutiveErrors) {
        this.sendStatus('error', `üö® PARADA DE SEGURAN√áA: ${this.maxConsecutiveErrors} erros consecutivos detectados`, 90, 'Automa√ß√£o interrompida por seguran√ßa');
        break;
      }
      
      // Inicializar resultado do servidor
      this.servidorResults[servidor.cpf] = {
        nome: servidor.nome,
        cpf: servidor.cpf,
        perfil: servidor.perfil,
        totalOJs: servidor.orgaos ? servidor.orgaos.length : 0,
        ojsProcessados: 0,
        sucessos: 0,
        erros: 0,
        jaIncluidos: 0,
        detalhes: [],
        status: 'Processando',
        inicioProcessamento: new Date().toISOString(),
        fimProcessamento: null,
        tempoProcessamento: null,
        tentativas: 0,
        maxTentativas: 2
      };
      
      this.sendStatus('info', `üéØ [${i + 1}/${servidores.length}] ${servidor.nome}`, 
        progressBase, `CPF: ${servidor.cpf} | Perfil: ${servidor.perfil} | ${servidor.orgaos?.length || 0} OJs | Erros consecutivos: ${this.consecutiveErrors}`, null, servidor.nome);
      
      const startTime = Date.now();
      let servidorProcessado = false;
      
      // Tentar processar servidor com retry autom√°tico
      for (let tentativa = 1; tentativa <= this.servidorResults[servidor.cpf].maxTentativas && !servidorProcessado; tentativa++) {
        this.servidorResults[servidor.cpf].tentativas = tentativa;
        
        try {
          this.sendStatus('info', `üîÑ [${i + 1}/${servidores.length}] Tentativa ${tentativa}/${this.servidorResults[servidor.cpf].maxTentativas} - ${servidor.nome}`, 
            progressBase, `CPF: ${servidor.cpf} | Perfil: ${servidor.perfil}`, null, servidor.nome);
          
          console.log(`üéØ ===== INICIANDO PROCESSAMENTO DO SERVIDOR ${i + 1}: ${servidor.nome} =====`);
          
          // Garantir navegador ativo antes de processar
          console.log(`üîç [${i + 1}/${servidores.length}] Verificando navegador ativo...`);
          await this.ensureBrowserActive();
          
          // Garantir recupera√ß√£o completa antes de processar
          console.log(`üßπ [${i + 1}/${servidores.length}] Limpando estado...`);
          await this.ensureCleanState();
          
          // Configurar dados do servidor atual
          console.log(`‚öôÔ∏è [${i + 1}/${servidores.length}] Configurando dados do servidor...`);
          this.config.cpf = servidor.cpf;
          this.config.perfil = servidor.perfil;
          this.config.orgaos = servidor.orgaos || [];
          console.log(`üìã Servidor configurado: CPF=${servidor.cpf}, Perfil=${servidor.perfil}, OJs=${servidor.orgaos?.length || 0}`);
          
          // Debug detalhado do estado atual
          console.log('üîç [DEBUG] Estado do navegador:');
          const currentUrl = this.page.url();
          console.log(`   URL atual: ${currentUrl}`);
          const pageTitle = await this.page.title();
          console.log(`   T√≠tulo: ${pageTitle}`);
          console.log(`   Servidor ${i + 1}: ${servidor.nome} (${servidor.cpf})`);
          console.log(`   OJs a processar: ${JSON.stringify(servidor.orgaos?.slice(0,3) || [])}${servidor.orgaos?.length > 3 ? '...' : ''}`);
          
          // Navega√ß√£o robusta
          console.log(`üîó [${i + 1}/${servidores.length}] Navegando para pessoa...`);
          await this.navigateDirectlyToPerson(servidor.cpf);
          
          // Debug ap√≥s navega√ß√£o
          const urlAposNavegacao = this.page.url();
          console.log(`üîç [DEBUG] URL ap√≥s navega√ß√£o: ${urlAposNavegacao}`);
          console.log(`üîç [DEBUG] Navega√ß√£o para ${servidor.nome} (${servidor.cpf}) CONCLU√çDA`);
          
          console.log(`üìÇ [${i + 1}/${servidores.length}] Acessando aba servidor...`);
          await this.navigateToServerTab();
          
          // Debug ap√≥s acessar aba servidor
          const urlAposAbaServidor = this.page.url();
          console.log(`üîç [DEBUG] URL ap√≥s aba servidor: ${urlAposAbaServidor}`);
          console.log(`üîç [DEBUG] Aba servidor acessada para ${servidor.nome}`);
          
          // Processar OJs com monitoramento detalhado
          console.log(`üéØ [${i + 1}/${servidores.length}] Processando ${servidor.orgaos?.length || 0} OJs...`);
          console.log(`üîç [DEBUG] Iniciando processamento de OJs para ${servidor.nome}:`);
          for (let debugOJ = 0; debugOJ < Math.min(3, servidor.orgaos?.length || 0); debugOJ++) {
            console.log(`   OJ ${debugOJ + 1}: ${servidor.orgaos[debugOJ]}`);
          }
          
          await this.processOrgaosJulgadoresWithServerTracking(servidor);
          console.log(`‚úÖ [${i + 1}/${servidores.length}] Processamento de OJs conclu√≠do`);
          console.log(`üîç [DEBUG] Processamento de OJs FINALIZADO para ${servidor.nome}`);
          
          // Finalizar resultado do servidor
          console.log(`üìã [${i + 1}/${servidores.length}] Finalizando resultado do servidor...`);
          const serverResult = this.servidorResults[servidor.cpf];
          serverResult.status = 'Conclu√≠do';
          serverResult.fimProcessamento = new Date().toISOString();
          serverResult.tempoProcessamento = Date.now() - startTime;
          
          this.processedServidores++;
          this.successfulServidores++;
          this.consecutiveErrors = 0; // Reset contador de erros
          
          console.log(`üéâ [${i + 1}/${servidores.length}] Servidor ${servidor.nome} CONCLU√çDO com sucesso!`);
          
          this.sendStatus('success', `‚úÖ [${i + 1}/${servidores.length}] ${servidor.nome}: ${serverResult.sucessos} sucessos, ${serverResult.erros} erros`, 
            ((i + 1) / servidores.length) * 90, `Tempo: ${(serverResult.tempoProcessamento/1000).toFixed(1)}s`);
          
          servidorProcessado = true;
          
        } catch (error) {
          console.error(`‚ùå TENTATIVA ${tentativa} FALHOU - Servidor: ${servidor.nome} (${servidor.cpf})`);
          console.error(`   Erro: ${error.message}`);
          
          if (tentativa === this.servidorResults[servidor.cpf].maxTentativas) {
            // √öltima tentativa falhou
            const serverResult = this.servidorResults[servidor.cpf];
            serverResult.status = 'Erro';
            serverResult.fimProcessamento = new Date().toISOString();
            serverResult.tempoProcessamento = Date.now() - startTime;
            serverResult.erroGeral = error.message;
            
            this.processedServidores++;
            this.failedServidores++;
            this.consecutiveErrors++;
            
            this.sendStatus('error', `‚ùå [${i + 1}/${servidores.length}] ${servidor.nome}: ${error.message}`, 
              ((i + 1) / servidores.length) * 90, `FALHA ap√≥s ${this.servidorResults[servidor.cpf].maxTentativas} tentativas`);
            
            // Log detalhado do erro final
            console.error(`üí• FALHA FINAL - Servidor: ${servidor.nome} (${servidor.cpf})`);
            console.error(`   Erro: ${error.message}`);
            console.error(`   Stack: ${error.stack}`);
            console.error(`   Tentativas realizadas: ${tentativa}`);
          } else {
            // Ainda h√° tentativas, tentar recupera√ß√£o
            this.sendStatus('warning', `‚ö†Ô∏è [${i + 1}/${servidores.length}] Tentativa ${tentativa} falhou: ${error.message}`, 
              progressBase, 'Tentando recupera√ß√£o para pr√≥xima tentativa...');
          }
          
          // Tentar recupera√ß√£o robusta para pr√≥xima tentativa ou pr√≥ximo servidor
          await this.performRobustRecovery();
        }
      }
      
      // Pausa estabilizada entre servidores para garantir continuidade
      if (i < servidores.length - 1) {
        console.log(`üîÑ ===== TRANSI√á√ÉO: Servidor ${i + 1} ‚Üí Servidor ${i + 2} =====`);
        console.log(`‚è≥ Preparando para pr√≥ximo servidor (${servidores[i + 1].nome})...`);
        
        this.sendStatus('info', '‚è≥ Preparando para pr√≥ximo servidor...', 
          ((i + 1) / servidores.length) * 90, 'Estabilizando sistema');
        
        // Limpeza extra entre servidores
        try {
          console.log('üßπ Limpeza extra entre servidores...');
          
          // IMPORTANTE: Limpar cache de OJs entre servidores
          console.log(`üóëÔ∏è Limpando cache de OJs (${this.ojCache.size} OJs em cache)...`);
          this.ojCache.clear();
          console.log('‚úÖ Cache de OJs limpo - pr√≥ximo servidor processar√° todos os OJs');
          
          await this.closeAnyModals();
          await this.contextualDelay('stabilization', { priority: 'high' }); // Pausa maior para estabilidade
          console.log('‚úÖ Sistema estabilizado para pr√≥ximo servidor');
        } catch (transitionError) {
          console.log('‚ö†Ô∏è Erro na transi√ß√£o entre servidores:', transitionError.message);
          await this.contextualDelay('errorRecovery', { priority: 'high' }); // Pausa extra se houver erro
        }
      } else {
        console.log('üèÅ ===== √öLTIMO SERVIDOR PROCESSADO - FINALIZANDO =====');
      }
    }
    
    // Limpar forced set ao final do processamento em lote
    this.forcedOJsNormalized = null;
    await this.generateMultiServerReport();
  }

  async processSingleServidor(config) {
    this.sendStatus('info', 'Iniciando automa√ß√£o moderna...', 0, 'Configurando ambiente');
            
    await this.initializeBrowser();
    await this.performLogin();
    await this.navigateDirectlyToPerson(config.cpf);
    await this.navigateToServerTab();
    await this.processOrgaosJulgadores();
    await this.generateReport();
  }

  async initializeBrowser() {
    this.sendStatus('info', 'Inicializando navegador...', 5, 'Configurando Playwright');
        
    const browserOptions = {
      headless: this.isProduction,
      slowMo: this.isProduction ? 0 : 50,
      timeout: 60000,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-ipc-flooding-protection',
        '--max_old_space_size=4096'
      ]
    };

    // Usar o PJEResilienceManager para inicializar o navegador
    const browserResult = await this.resilienceManager.wrapBrowserOperation(async () => {
      // Em desenvolvimento, tentar conectar a Chrome existente
      if (!this.isProduction) {
        try {
          this.browser = await chromium.connectOverCDP('http://localhost:9222');
          const contexts = this.browser.contexts();
          if (contexts.length > 0 && contexts[0].pages().length > 0) {
            this.page = contexts[0].pages()[0];
          } else {
            const context = await this.browser.newContext();
            this.page = await context.newPage();
          }
          this.sendStatus('info', 'Conectado ao Chrome existente', 10, 'Modo desenvolvimento');
          return { browser: this.browser, page: this.page };
        } catch (error) {
          console.log('N√£o foi poss√≠vel conectar ao Chrome existente, iniciando novo navegador');
          this.browser = await chromium.launch(browserOptions);
          const context = await this.browser.newContext();
          this.page = await context.newPage();
          return { browser: this.browser, page: this.page };
        }
      } else {
        this.browser = await chromium.launch(browserOptions);
        const context = await this.browser.newContext();
        this.page = await context.newPage();
        return { browser: this.browser, page: this.page };
      }
    });

    if (!browserResult) {
      throw new Error('Falha ao inicializar navegador ap√≥s m√∫ltiplas tentativas');
    }

    this.browser = browserResult.browser;
    this.page = browserResult.page;

    // Configurar User-Agent e cabe√ßalhos
    await this.page.setExtraHTTPHeaders({
      'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    });

    // Interceptar falhas de rede e tentar novamente
    this.page.on('requestfailed', request => {
      console.log(`‚ö†Ô∏è Request failed: ${request.url()} - ${request.failure()?.errorText}`);
    });
        
    // Configurar timeouts HIPER-OTIMIZADOS para m√°xima velocidade
    this.page.setDefaultTimeout(8000); // 8s HIPER-OTIMIZADO para elementos
    
    // Inicializar cache DOM
    this.initializeDOMCache();
    this.page.setDefaultNavigationTimeout(15000); // 15s HIPER-OTIMIZADO para navega√ß√£o

    // Capturar logs do console
    this.page.on('console', msg => {
      const logMessage = msg.text();
      if (logMessage.includes('ERROR') || logMessage.includes('WARN')) {
        console.log('Browser console:', logMessage);
      }
    });

    this.sendStatus('success', 'Navegador inicializado', 15, 'Pronto para automa√ß√£o');
  }

  async performLogin() {
    this.sendStatus('info', 'Realizando login...', 20, 'Autenticando no PJe');
        
    // Usar PJEResilienceManager para login com resili√™ncia
    const loginResult = await this.resilienceManager.executeWithResilience(async () => {
      await login(this.page);
      return true;
    }, 'Login');

    if (!loginResult) {
      throw new Error('Falha no login ap√≥s m√∫ltiplas tentativas');
    }

    this.sendStatus('success', 'Login realizado com sucesso', 30, 'Autenticado');
  }

  async navigateDirectlyToPerson(cpf) {
    const startTime = Date.now();
    this.performanceMonitor.recordNavigationStart('navigateDirectlyToPerson', `CPF: ${cpf}`);
    
    this.sendStatus('info', 'Navegando diretamente para pessoa...', 35, `CPF: ${cpf}`);
        
    const cpfFormatado = cpf; // Manter formata√ß√£o original
        
    // URL direta para a p√°gina da pessoa
    const directUrl = `https://pje.trt15.jus.br/pjekz/pessoa-fisica?pagina=1&tamanhoPagina=10&cpf=${encodeURIComponent(cpfFormatado)}&situacao=1`;
        
    console.log(`üîó Navegando para URL direta: ${directUrl}`);
    
    // IMPORTANTE: Fechar qualquer modal/overlay antes de navegar
    try {
      console.log('üßπ Limpando modais antes da navega√ß√£o...');
      await this.closeAnyModals();
      await this.contextualDelay('navigation', { priority: 'normal' });
    } catch (cleanError) {
      console.log('‚ö†Ô∏è Erro na limpeza inicial:', cleanError.message);
    }
        
    // M√∫ltiplas estrat√©gias de carregamento HIPER-OTIMIZADAS para m√°xima velocidade
    const navigationStrategies = [
      { waitUntil: 'domcontentloaded', timeout: 5000, description: 'DOM carregado (HIPER-OTIMIZADO)' },
      { waitUntil: 'load', timeout: 8000, description: 'P√°gina carregada (HIPER-OTIMIZADO)' },
      { waitUntil: 'networkidle', timeout: 12000, description: 'Rede est√°vel (HIPER-OTIMIZADO)' }
    ];
        
    let navigationSuccess = false;
    let lastError = null;
        
    for (const strategy of navigationStrategies) {
      try {
        this.sendStatus('info', `Tentando navega√ß√£o: ${strategy.description}`, 36, `Timeout: ${strategy.timeout/1000}s`);
                
        await this.navigationOptimizer.optimizedNavigate(this.page, directUrl);
                
        // Aguardar elementos cr√≠ticos aparecerem
        await Promise.race([
          this.page.waitForSelector('table', { timeout: 5000 }),
          this.page.waitForSelector('.datatable', { timeout: 5000 }),
          this.page.waitForSelector('[data-test-id]', { timeout: 5000 }),
          this.page.waitForTimeout(2000) // Fallback m√≠nimo
        ]);
        
        // IMPORTANTE: Verificar se n√£o h√° modais bloqueando ap√≥s navega√ß√£o
        console.log('üßπ Limpando modais ap√≥s navega√ß√£o...');
        await this.closeAnyModals();
        await this.contextualDelay('pageLoad', { priority: 'normal' });
                
        navigationSuccess = true;
        this.sendStatus('success', `Navega√ß√£o bem-sucedida com: ${strategy.description}`, 40, 'Pessoa encontrada');
        break;
                
      } catch (error) {
        console.warn(`‚ö†Ô∏è Falha na estrat√©gia ${strategy.description}:`, error.message);
        lastError = error;
                
        // Se n√£o foi timeout, tentar pr√≥xima estrat√©gia
        if (!error.message.includes('Timeout') && !error.message.includes('timeout')) {
          continue;
        }
      }
    }
        
    if (!navigationSuccess) {
      console.error('‚ùå Todas as estrat√©gias de navega√ß√£o falharam');
      this.sendStatus('error', `Erro na navega√ß√£o: ${lastError?.message || 'Timeout em todas as tentativas'}`, 35, 'Falha na navega√ß√£o');
      throw lastError || new Error('Falha em todas as estrat√©gias de navega√ß√£o');
    }
        
    // Verificar se chegou na p√°gina correta e limpar novamente
    const currentUrl = this.page.url();
    console.log(`‚úÖ URL atual ap√≥s navega√ß√£o: ${currentUrl}`);
    
    // Final cleanup para garantir p√°gina limpa
    try {
      await this.closeAnyModals();
      await this.contextualDelay('elementWait', { priority: 'normal' });
      console.log('‚úÖ P√°gina limpa e pronta para processar');
    } catch (finalCleanError) {
      console.log('‚ö†Ô∏è Erro na limpeza final:', finalCleanError.message);
    }
    
    // Registrar fim da navega√ß√£o
    this.performanceMonitor.recordNavigationEnd('navigateDirectlyToPerson', Date.now() - startTime);
  }

  async searchByCPF(cpf) {
    const searchStartTime = Date.now();
    this.performanceMonitor.recordElementSearchStart('searchByCPF');
    
    this.sendStatus('info', 'Buscando por CPF...', 35, `CPF: ${cpf}`);
        
    const cpfLimpo = cpf.replace(/\D/g, '');
        
    // Debug: verificar URL atual
    const currentUrl = this.page.url();
    console.log(`üîç URL atual: ${currentUrl}`);
        
    // Aguardar a p√°gina carregar completamente
    await this.page.waitForLoadState('networkidle');
        
    // M√∫ltiplos seletores para campo de busca
    const searchCandidates = [
      this.page.locator('input[placeholder*="CPF"]'),
      this.page.locator('input[placeholder*="cpf"]'),
      this.page.locator('input[name="cpf"]'),
      this.page.locator('#cpf'),
      this.page.locator('input[placeholder*="nome"]'),
      this.page.locator('input[name="nome"]'),
      this.page.locator('#nome'),
      this.page.locator('input[type="text"]'),
      this.page.locator('.form-control'),
      this.page.locator('input[class*="form"]'),
      this.page.locator('input[class*="input"]'),
      this.page.locator('input[id*="search"]'),
      this.page.locator('input[id*="busca"]'),
      this.page.locator('input[name*="search"]'),
      this.page.locator('input[name*="busca"]'),
      this.page.locator('input').first()
    ];
        
    let searchInput = null;
    for (let i = 0; i < searchCandidates.length; i++) {
      const candidate = searchCandidates[i];
      const count = await candidate.count();
      console.log(`Candidato ${i + 1} para busca: ${count} elementos encontrados`);
      if (count > 0) {
        try {
          await candidate.first().waitFor({ timeout: 3000 });
          searchInput = candidate.first();
          console.log(`‚úÖ Usando candidato ${i + 1} para busca`);
          break;
        } catch (e) {
          console.log(`Candidato ${i + 1} n√£o est√° vis√≠vel`);
        }
      }
    }
        
    if (!searchInput) {
      throw new Error('Campo de busca por CPF n√£o foi encontrado');
    }
        
    // Limpar e digitar o CPF
    await searchInput.clear();
    await searchInput.fill(cpfLimpo);
        
    // Tentar clicar no bot√£o "Procurar"
    const searchButtonCandidates = [
      this.page.locator('button:has-text("Procurar")'),
      this.page.locator('input[type="submit"][value*="Procurar"]'),
      this.page.locator('button[type="submit"]'),
      this.page.locator('.btn:has-text("Procurar")'),
      this.page.locator('input[value="Procurar"]'),
      this.page.locator('button:has-text("Buscar")'),
      this.page.locator('input[type="submit"]')
    ];
        
    let searchButtonClicked = false;
    for (let i = 0; i < searchButtonCandidates.length; i++) {
      const candidate = searchButtonCandidates[i];
      const count = await candidate.count();
      console.log(`Candidato ${i + 1} para bot√£o Procurar: ${count} elementos encontrados`);
      if (count > 0) {
        try {
          await candidate.first().waitFor({ timeout: 2000 });
          await candidate.first().click();
          console.log(`‚úÖ Clicou no bot√£o Procurar (candidato ${i + 1})`);
          searchButtonClicked = true;
          break;
        } catch (e) {
          console.log(`Candidato ${i + 1} para bot√£o Procurar n√£o est√° clic√°vel`);
        }
      }
    }
        
    // Se n√£o conseguiu clicar no bot√£o, usar Enter
    if (!searchButtonClicked) {
      console.log('‚ö†Ô∏è Bot√£o Procurar n√£o encontrado, usando Enter como alternativa');
      await searchInput.press('Enter');
    }
        
    // Aguardar os resultados carregarem
    await this.contextualDelay('searchPJE', { priority: 'high' });
        
    this.sendStatus('success', 'Busca realizada', 40, 'CPF encontrado');
    this.performanceMonitor.recordElementSearchEnd('searchByCPF', Date.now() - searchStartTime, true);
  }

  async navigateToServerTab() {
    this.sendStatus('info', 'Navegando para aba Servidor...', 45, 'Acessando perfil');
    
    // Usar PJEResilienceManager para navega√ß√£o resiliente
    const navigationResult = await this.resilienceManager.executeWithResilience(async () => {
      let editSuccessful = false;
      
      try {
        // Clicar no √≠cone de edi√ß√£o
        await this.clickEditIcon();
        editSuccessful = true;
        console.log('‚úÖ √çcone de edi√ß√£o clicado com sucesso');
        
        // Aguardar navega√ß√£o
        await this.contextualDelay('networkWait', { priority: 'normal' });
        
        // Clicar na aba Servidor
        await this.clickServerTab();
        
      } catch (editError) {
        console.error('‚ùå Falha ao clicar no √≠cone de edi√ß√£o:', editError.message);
        
        // ESTRAT√âGIA DE FALLBACK: Tentar navegar diretamente para a p√°gina de edi√ß√£o
        console.log('üîÑ TENTANDO FALLBACK: Navega√ß√£o direta para edi√ß√£o');
        
        const currentUrl = this.page.url();
        console.log(`üìç URL atual: ${currentUrl}`);
        
        // Se j√° estamos na p√°gina de pessoa, tentar URLs diretas de edi√ß√£o
        if (currentUrl.includes('pessoa-fisica')) {
          const possibleEditUrls = [
            currentUrl.replace('pessoa-fisica', 'pessoa-fisica/alterar'),
            currentUrl.replace('pessoa-fisica', 'pessoa-fisica/editar'),
            currentUrl + '/alterar',
            currentUrl + '/editar',
            currentUrl.includes('?') ? currentUrl + '&acao=alterar' : currentUrl + '?acao=alterar'
          ];
          
          for (const editUrl of possibleEditUrls) {
            try {
              console.log(`üîó Tentando URL direta: ${editUrl}`);
              await this.navigationOptimizer.fastNavigate(this.page, editUrl);
              await this.contextualDelay('networkWait', { priority: 'normal' });
              
              // Verificar se chegamos numa p√°gina de edi√ß√£o (procurar pela aba Servidor)
              const serverTabExists = await this.page.$('text=Servidor, a[href*="servidor"], button:has-text("Servidor")');
              if (serverTabExists) {
                console.log('‚úÖ FALLBACK SUCEDIDO: P√°gina de edi√ß√£o alcan√ßada');
                editSuccessful = true;
                
                // Tentar clicar na aba servidor
                await this.clickServerTab();
                break;
              } else {
                console.log('‚ùå URL n√£o levou √† p√°gina de edi√ß√£o');
              }
              
            } catch (urlError) {
              console.log(`‚ùå Falha na URL ${editUrl}: ${urlError.message}`);
            }
          }
        }
        
        // Se ainda n√£o conseguimos, tentar uma √∫ltima estrat√©gia
        if (!editSuccessful) {
          console.log('üö® ESTRAT√âGIA FINAL: Buscar por qualquer link/form de edi√ß√£o na p√°gina atual');
          
          const currentPageContent = await this.page.content();
          if (currentPageContent.includes('servidor') || currentPageContent.includes('Servidor')) {
            console.log('‚úÖ Conte√∫do de servidor detectado na p√°gina atual');
            
            // Tentar encontrar e clicar na aba servidor diretamente
            await this.clickServerTab();
            editSuccessful = true;
          }
        }
        
        if (!editSuccessful) {
          throw new Error(`N√£o foi poss√≠vel acessar a p√°gina de edi√ß√£o: ${editError.message}`);
        }
      }
      
      return editSuccessful;
    }, 'Navega√ß√£o para aba Servidor');
    
    if (!navigationResult) {
      throw new Error('Falha ao navegar para aba Servidor ap√≥s m√∫ltiplas tentativas');
    }
    
    this.sendStatus('success', 'Aba Servidor acessada', 50, 'Pronto para processar OJs');
  }

  async clickEditIcon() {
    const clickStartTime = Date.now();
    this.performanceMonitor.recordClickStart('clickEditIcon');
    
    console.log('üéØ VERS√ÉO MELHORADA: Detec√ß√£o robusta de √≠cone de edi√ß√£o...');
    
    // Debug: verificar elementos vis√≠veis na p√°gina
    try {
      const pageContent = await this.page.content();
      console.log(`üìÑ URL atual: ${this.page.url()}`);
      
      // Verificar se h√° tabela na p√°gina
      const hasTable = pageContent.includes('<table') || pageContent.includes('datatable');
      console.log(`üóÇÔ∏è Tabela detectada: ${hasTable}`);
      
      // Procurar por elementos que podem ser bot√µes de edi√ß√£o (limitado para performance)
      try {
        const potentialButtons = await this.page.$$eval('button, a', elements => 
          elements.slice(0, 20).map(el => ({
            tagName: el.tagName,
            text: el.textContent?.trim().substring(0, 50),
            title: el.title,
            className: el.className?.substring(0, 100)
          }))
        );
        console.log('üîò Primeiros bot√µes/links encontrados:', potentialButtons);
      } catch (evalError) {
        console.log('‚ö†Ô∏è Erro ao listar bot√µes:', evalError.message);
      }
    } catch (debugError) {
      console.log('‚ö†Ô∏è Erro no debug:', debugError.message);
    }

    // Seletores CORRETOS baseados no HTML fornecido pelo usu√°rio
    const editSelectors = [
      // Seletores espec√≠ficos baseados no c√≥digo real
      'button[aria-label="Alterar pessoa"]',
      'button[mattooltip="Alterar pessoa"]',
      'button:has(i.fa-pencil-alt)',
      '.visivel-hover',
      'button.visivel-hover',
      '.fa-pencil-alt',
      'i.fa-pencil-alt',
      'i.fas.fa-pencil-alt',
      '#cdk-drop-list-1 > tr > td:nth-child(6) > button',
      'td:nth-child(6) button',
      'td:nth-child(6) .visivel-hover',
      
      // Fallbacks gen√©ricos
      'button[title*="Alterar"]',
      'a[title*="Alterar"]', 
      '.fa-edit',
      '.fa-pencil'
    ];
        
    let editButton = null;
    let editButtonElement = null;
    
    // NOVA ESTRAT√âGIA 1: For√ßar visibilidade e fazer hover intensivo
    console.log('üîß ESTRAT√âGIA 1: For√ßando visibilidade e hover intensivo...');
    
    try {
      // 1.1: For√ßar visibilidade via JavaScript
      await this.page.evaluate(() => {
        // For√ßar todos os elementos .visivel-hover serem vis√≠veis
        const hoverElements = document.querySelectorAll('.visivel-hover, button[aria-label="Alterar pessoa"]');
        console.log(`For√ßando visibilidade em ${hoverElements.length} elementos`);
        
        hoverElements.forEach((element, index) => {
          element.style.visibility = 'visible';
          element.style.opacity = '1'; 
          element.style.display = 'inline-block';
          element.style.pointerEvents = 'auto';
          console.log(`Elemento ${index + 1} for√ßado a ser vis√≠vel`);
        });
        
        return hoverElements.length;
      });
      
      console.log('‚úÖ Visibilidade for√ßada via JavaScript');
      
      // 1.2: Fazer hover intensivo em todas as linhas da tabela (otimizado)
      const allRows = await this.page.$$('table tbody tr, .table tbody tr, .datatable tbody tr, #cdk-drop-list-1 > tr');
      console.log(`üìã Fazendo hover intensivo em ${allRows.length} linhas...`);
      
      for (let i = 0; i < Math.min(allRows.length, 3); i++) {
        const row = allRows[i];
        try {
          console.log(`üñ±Ô∏è Hover intensivo na linha ${i + 1}...`);
          await row.hover();
          await this.delay(1000);
          
          // Verificar imediatamente se bot√µes apareceram
          const buttonsInRow = await row.$$('button[aria-label="Alterar pessoa"], .visivel-hover, i.fa-pencil-alt');
          if (buttonsInRow.length > 0) {
            console.log(`‚úÖ ${buttonsInRow.length} bot√µes encontrados ap√≥s hover na linha ${i + 1}`);
            
            for (const btn of buttonsInRow) {
              const isVisible = await btn.isVisible();
              if (isVisible) {
                editButtonElement = btn;
                editButton = `Hover linha ${i + 1} - bot√£o vis√≠vel`;
                console.log(`üéØ SUCESSO: ${editButton}`);
                break;
              }
            }
            
            if (editButtonElement) break;
          }
        } catch (hoverRowError) {
          console.log(`‚ö†Ô∏è Erro hover linha ${i + 1}:`, hoverRowError.message);
        }
      }
      
    } catch (forceError) {
      console.log('‚ö†Ô∏è Erro na estrat√©gia de for√ßa:', forceError.message);
    }
    
    // ESTRAT√âGIA 2: Clique direto na linha se n√£o encontrou bot√µes 
    if (!editButtonElement) {
      console.log('üéØ ESTRAT√âGIA 2: Clique direto na linha da tabela...');
      try {
        const firstRow = await this.page.$('table tbody tr:first-child, .table tbody tr:first-child, .datatable tbody tr:first-child, #cdk-drop-list-1 > tr:first-child');
        if (firstRow) {
          console.log('‚úÖ Executando clique direto na primeira linha...');
          
          // Primeiro fazer hover para garantir
          await firstRow.hover();
          await this.delay(500);
          
          // Ent√£o clicar
          await firstRow.click();
          await this.delay(3000);
          
          // Verificar se mudou de p√°gina
          const currentUrl = this.page.url();
          console.log(`üìç URL ap√≥s clique: ${currentUrl}`);
          
          if (currentUrl.includes('editar') || currentUrl.includes('edit') || currentUrl.includes('detalhes')) {
            console.log('üéØ SUCESSO: Navega√ß√£o por clique na linha realizada!');
            editButtonElement = firstRow;
            editButton = 'Clique direto na linha da tabela';
          } else {
            console.log('‚ö†Ô∏è Clique na linha n√£o levou √† p√°gina de edi√ß√£o, tentando double-click...');
            
            await firstRow.dblclick();
            await this.delay(3000);
            
            const newUrl = this.page.url();
            if (newUrl !== currentUrl && (newUrl.includes('editar') || newUrl.includes('edit'))) {
              console.log('üéØ SUCESSO: Navega√ß√£o por double-click realizada!');
              editButtonElement = firstRow;
              editButton = 'Double-click na linha da tabela';
            }
          }
        }
      } catch (directClickError) {
        console.log('‚ö†Ô∏è Erro no clique direto:', directClickError.message);
      }
    }
    
    // ESTRAT√âGIA 3: Seletores tradicionais (apenas se estrat√©gias anteriores falharam)
    if (!editButtonElement) {
      console.log('üîç ESTRAT√âGIA 3: Testando seletores tradicionais...');
      
      for (const selector of editSelectors) {
        try {
          console.log(`üîç Testando seletor: ${selector}`);
        
          // Timeout muito reduzido para chegar logo nas estrat√©gias especiais
          await this.page.waitForSelector(selector, { timeout: 500, state: 'attached' });
        
          // Obter o elemento (otimizado)
          editButtonElement = await this.page.$(selector);
        
          if (editButtonElement) {
          // Verificar se est√° vis√≠vel
            const isVisible = await editButtonElement.isVisible();
            if (isVisible) {
              editButton = selector;
              console.log(`‚úÖ √çcone de edi√ß√£o encontrado e vis√≠vel: ${selector}`);
              break;
            } else {
              console.log(`‚ö†Ô∏è Elemento ${selector} existe mas n√£o est√° vis√≠vel`);
            }
          }
        } catch (error) {
        // Log simplificado para n√£o poluir
          console.log(`‚ùå ${selector} (timeout 500ms)`);
        }
      }
    }

    // Estrat√©gia alternativa se nenhum seletor funcionou
    if (!editButton || !editButtonElement) {
      console.log('üîÑ ===== SELETORES TRADICIONAIS FALHARAM - INICIANDO ESTRAT√âGIAS ESPECIAIS =====');
      console.log('üîÑ ESTRAT√âGIA ALTERNATIVA: An√°lise completa da tabela');
      try {
        // Primeiro, tentar encontrar qualquer tabela (otimizado)
        const tableExists = await this.page.$('table, .table, .datatable');
        if (tableExists) {
          console.log('‚úÖ Tabela encontrada, analisando linhas...');
          
          // Buscar todas as linhas da tabela (otimizado)
          const rows = await this.page.$$('table tbody tr, .table tbody tr, .datatable tbody tr');
          console.log(`üóÇÔ∏è Encontradas ${rows.length} linhas na tabela`);
          
          if (rows.length > 0) {
            // Analisar a primeira linha para entender a estrutura
            const firstRow = rows[0];
            
            // ESTRAT√âGIA ESPEC√çFICA PARA PJE: Hover na linha para revelar bot√µes
            console.log('üñ±Ô∏è Fazendo hover na primeira linha para revelar bot√µes...');
            try {
              await firstRow.hover();
              await this.contextualDelay('elementWait', { priority: 'high' }); // Aguardar bot√µes aparecerem
              console.log('‚úÖ Hover realizado na linha');
            } catch (hoverError) {
              console.log('‚ö†Ô∏è Erro no hover:', hoverError.message);
            }
            
            // Buscar elementos clic√°veis em toda a linha ap√≥s hover
            const allRowElements = await firstRow.$$('button, a, i, span[onclick], div[onclick], .fa, .fas, .far, [class*="edit"], [class*="pencil"], [title*="Alterar"], [title*="Editar"]');
            console.log(`üîò Elementos clic√°veis/√≠cones na linha: ${allRowElements.length}`);
            
            for (let i = 0; i < allRowElements.length; i++) {
              const element = allRowElements[i];
              try {
                const tagName = await element.evaluate(el => el.tagName);
                const text = await element.evaluate(el => el.textContent?.trim() || '');
                const title = await element.evaluate(el => el.title || '');
                const className = await element.evaluate(el => el.className || '');
                const isVisible = await element.isVisible();
                
                console.log(`üîç Elemento linha ${i + 1}: ${tagName} | "${text}" | Title:"${title}" | Class:"${className}" | Vis√≠vel:${isVisible}`);
                
                // Se √© vis√≠vel e parece ser de edi√ß√£o
                if (isVisible && !text.toLowerCase().includes('excluir') && !text.toLowerCase().includes('delete') && 
                    !className.toLowerCase().includes('delete') && !title.toLowerCase().includes('excluir')) {
                  
                  // Priorizar elementos com indica√ß√£o de edi√ß√£o
                  const hasEditIndication = text.toLowerCase().includes('alterar') || 
                                          text.toLowerCase().includes('editar') ||
                                          title.toLowerCase().includes('alterar') || 
                                          title.toLowerCase().includes('editar') ||
                                          className.includes('edit') || 
                                          className.includes('pencil') ||
                                          className.includes('fa-edit') ||
                                          className.includes('fa-pencil');
                  
                  if (hasEditIndication || (!editButtonElement && tagName === 'BUTTON') || (!editButtonElement && tagName === 'A')) {
                    editButtonElement = element;
                    editButton = `Linha elemento ${i + 1} (${tagName}) - "${text}"`;
                    console.log(`‚úÖ SELECIONADO da linha: ${editButton}`);
                    
                    if (hasEditIndication) {
                      console.log('üéØ Elemento com indica√ß√£o clara de edi√ß√£o - interrompendo busca');
                      break;
                    }
                  }
                }
              } catch (elementError) {
                console.log(`‚ö†Ô∏è Erro ao analisar elemento linha ${i + 1}:`, elementError.message);
              }
            }
            
            // Se n√£o encontrou na linha, verificar c√©lulas individualmente
            if (!editButtonElement) {
              const cells = await firstRow.$$('td');
              console.log(`üìã Analisando ${cells.length} colunas individualmente...`);
              
              for (let cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                const cell = cells[cellIndex];
                
                // Fazer hover na c√©lula tamb√©m
                try {
                  await cell.hover();
                  await this.contextualDelay('click', { priority: 'high' });
                } catch (cellHoverError) {
                  console.log(`‚ö†Ô∏è Erro hover c√©lula ${cellIndex + 1}:`, cellHoverError.message);
                }
                
                const cellElements = await cell.$$('button, a, i, span, div');
                console.log(`üì¶ C√©lula ${cellIndex + 1}: ${cellElements.length} elementos`);
                
                for (const cellElement of cellElements) {
                  try {
                    const isVisible = await cellElement.isVisible();
                    if (isVisible && !editButtonElement) {
                      const tagName = await cellElement.evaluate(el => el.tagName);
                      const text = await cellElement.evaluate(el => el.textContent?.trim() || '');
                      
                      console.log(`üì¶ C√©lula ${cellIndex + 1} - ${tagName}: "${text}"`);
                      
                      if ((tagName === 'BUTTON' || tagName === 'A') && !text.toLowerCase().includes('excluir')) {
                        editButtonElement = cellElement;
                        editButton = `C√©lula ${cellIndex + 1} elemento (${tagName})`;
                        console.log(`‚úÖ SELECIONADO da c√©lula: ${editButton}`);
                        break;
                      }
                    }
                  } catch (cellElementError) {
                    console.log('‚ö†Ô∏è Erro elemento da c√©lula:', cellElementError.message);
                  }
                }
                
                if (editButtonElement) break;
              }
            }
          }
        }
        
        // √öltima tentativa: buscar por qualquer bot√£o/link vis√≠vel que n√£o seja "excluir"
        if (!editButton || !editButtonElement) {
          console.log('üîÑ PEN√öLTIMA TENTATIVA: Busca por qualquer elemento clic√°vel com indica√ß√£o de edi√ß√£o');
          
          const allClickableElements = await this.page.$$('button:visible, a:visible');
          console.log(`üîò Total de elementos clic√°veis vis√≠veis: ${allClickableElements.length}`);
          
          for (let i = 0; i < Math.min(allClickableElements.length, 15); i++) { // Aumentar para 15 elementos
            const element = allClickableElements[i];
            try {
              const text = await element.evaluate(el => el.textContent?.trim() || '');
              const title = await element.evaluate(el => el.title || '');
              const className = await element.evaluate(el => el.className || '');
              
              // Se n√£o √© bot√£o de exclus√£o e cont√©m indica√ß√£o de edi√ß√£o
              if (!text.toLowerCase().includes('excluir') && !text.toLowerCase().includes('delete') &&
                  !title.toLowerCase().includes('excluir') && !className.toLowerCase().includes('delete') &&
                  (text.toLowerCase().includes('alterar') || text.toLowerCase().includes('editar') || 
                   title.toLowerCase().includes('alterar') || title.toLowerCase().includes('editar') ||
                   className.includes('edit') || className.includes('pencil'))) {
                
                editButtonElement = element;
                editButton = `Elemento global: "${text}" (${title})`;
                console.log(`‚úÖ ENCONTRADO elemento de edi√ß√£o global: ${editButton}`);
                break;
              }
            } catch (globalError) {
              console.log(`‚ö†Ô∏è Erro ao analisar elemento global ${i + 1}:`, globalError.message);
            }
          }
        }
        
        // ESTRAT√âGIA 4: Navega√ß√£o direta por URL
        if (!editButton || !editButtonElement) {
          console.log('üîó ESTRAT√âGIA 4: Navega√ß√£o direta por URL...');
          
          try {
            const currentUrl = this.page.url();
            console.log(`üìç URL atual: ${currentUrl}`);
            
            // Tentar diferentes padr√µes de URL de edi√ß√£o
            const editUrlPatterns = [
              currentUrl.replace('/pessoa-fisica', '/pessoa-fisica/edit'),
              currentUrl.replace('/pessoa-fisica', '/pessoa-fisica/editar'),
              currentUrl + '/edit',
              currentUrl + '/editar',
              currentUrl + '/detalhes'
            ];
            
            for (const editUrl of editUrlPatterns) {
              try {
                console.log(`üîó Tentando navegar para: ${editUrl}`);
                await this.navigationOptimizer.optimizedNavigate(this.page, editUrl);
                
                const finalUrl = this.page.url();
                console.log(`üìç URL final: ${finalUrl}`);
                
                if (finalUrl.includes('edit') || finalUrl.includes('editar') || finalUrl.includes('detalhes')) {
                  console.log('‚úÖ SUCESSO: Navega√ß√£o direta realizada!');
                  editButton = `Navega√ß√£o direta: ${editUrl}`;
                  editButtonElement = 'direct-navigation';
                  break;
                }
              } catch (urlError) {
                console.log(`‚ö†Ô∏è Erro na navega√ß√£o para ${editUrl}:`, urlError.message);
              }
            }
          } catch (directNavError) {
            console.log('‚ùå Erro na navega√ß√£o direta:', directNavError.message);
          }
        }
        
        // ESTRAT√âGIA 5: √öltima tentativa com clique em elementos
        if (!editButton || !editButtonElement) {
          console.log('üö® ESTRAT√âGIA 5: √öltima tentativa com elementos da linha...');
          
          try {
            // Buscar primeira linha da tabela
            const firstRow = await this.domCache.findElement('table tbody tr:first-child, .table tbody tr:first-child, .datatable tbody tr:first-child');
            if (firstRow) {
              console.log('‚úÖ Primeira linha encontrada para clique direto');
              
              // Primeiro, tentar encontrar elementos clic√°veis
              const rowClickables = await firstRow.$$('button, a, i, span[onclick], [onclick]');
              console.log(`üîò Elementos com potencial de clique: ${rowClickables.length}`);
              
              if (rowClickables.length > 0) {
                for (let i = 0; i < rowClickables.length; i++) {
                  const element = rowClickables[i];
                  try {
                    const isVisible = await element.isVisible();
                    if (isVisible) {
                      const text = await element.evaluate(el => el.textContent?.trim() || '');
                      const title = await element.evaluate(el => el.title || '');
                      const className = await element.evaluate(el => el.className || '');
                      
                      console.log(`üîç Elemento ${i + 1}: Texto="${text}" Title="${title}" Class="${className}"`);
                      
                      // Evitar apenas bot√µes que CLARAMENTE s√£o de exclus√£o
                      const isDeleteButton = text.toLowerCase().includes('excluir') || 
                                           text.toLowerCase().includes('delete') || 
                                           title.toLowerCase().includes('excluir') ||
                                           className.toLowerCase().includes('delete');
                      
                      if (!isDeleteButton) {
                        editButtonElement = element;
                        editButton = `DESESPERADO - Elemento ${i + 1}: "${text}" (${title})`;
                        console.log(`üö® USANDO ESTRAT√âGIA DESESPERADA: ${editButton}`);
                        break;
                      }
                    }
                  } catch (desperateError) {
                    console.log(`‚ö†Ô∏è Erro na an√°lise desesperada ${i + 1}:`, desperateError.message);
                  }
                }
              } else {
                // √öLTIMA TENTATIVA FINAL: Clicar na primeira c√©lula que n√£o seja ID
                console.log('üö® TENTATIVA EXTREMA: Clicar na c√©lula do nome para abrir detalhes');
                
                const cells = await firstRow.$$('td');
                console.log(`üìã C√©lulas dispon√≠veis: ${cells.length}`);
                
                if (cells.length >= 2) {
                  // Geralmente a segunda c√©lula √© o nome (primeira √© ID)
                  const nameCell = cells[1];
                  
                  // Fazer hover primeiro
                  await nameCell.hover();
                  await this.delay(500);
                  
                  // Verificar se apareceram elementos clic√°veis ap√≥s hover
                  const afterHoverElements = await nameCell.$$('a, button, [onclick]');
                  if (afterHoverElements.length > 0 && await afterHoverElements[0].isVisible()) {
                    editButtonElement = afterHoverElements[0];
                    editButton = 'EXTREMO - Elemento da c√©lula nome ap√≥s hover';
                    console.log('üö® EXTREMO: Usando elemento que apareceu ap√≥s hover no nome');
                  } else {
                    // Se ainda n√£o h√° elementos clic√°veis, clicar na pr√≥pria c√©lula do nome
                    editButtonElement = nameCell;
                    editButton = 'EXTREMO - C√©lula do nome diretamente';
                    console.log('üö® EXTREMO: Clicando diretamente na c√©lula do nome');
                  }
                }
              }
            }
          } catch (desperateError) {
            console.log('‚ùå Estrat√©gia desesperada falhou:', desperateError.message);
          }
        }
        
      } catch (altError) {
        console.error('‚ùå Estrat√©gia alternativa completa falhou:', altError.message);
        console.error('Stack trace:', altError.stack);
      }
    }
        
    if (!editButton || !editButtonElement) {
      console.error('‚ùå ===== FALHA TOTAL: NENHUM √≠cone de edi√ß√£o encontrado ap√≥s TODAS as tentativas =====');
      
      // Debug final: salvar screenshot para diagn√≥stico
      try {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const screenshotPath = `debug-no-edit-${timestamp}.png`;
        await this.page.screenshot({ path: screenshotPath, fullPage: true });
        console.log(`üì∏ Screenshot de debug salvo: ${screenshotPath}`);
      } catch (screenshotError) {
        console.log('‚ùå Erro ao salvar screenshot:', screenshotError.message);
      }
      
      throw new Error('√çcone de edi√ß√£o n√£o encontrado ap√≥s m√∫ltiplas estrat√©gias');
    }
        
    // Clicar no elemento encontrado ou verificar navega√ß√£o direta
    console.log(`üñ±Ô∏è Processando a√ß√£o: ${editButton}`);
    
    if (editButtonElement === 'direct-navigation') {
      console.log('‚úÖ Navega√ß√£o direta j√° realizada - verificando p√°gina atual');
      const currentUrl = this.page.url();
      if (currentUrl.includes('edit') || currentUrl.includes('editar') || currentUrl.includes('detalhes')) {
        console.log('‚úÖ Navega√ß√£o direta confirmada com sucesso');
      } else {
        throw new Error('Navega√ß√£o direta n√£o levou √† p√°gina esperada');
      }
    } else {
      try {
        // Scroll para o elemento antes de clicar
        await editButtonElement.scrollIntoViewIfNeeded();
        await this.delay(500);
        
        // Clicar no elemento
        await editButtonElement.click();
        await this.delay(3000); // Aguardar navega√ß√£o
        
        console.log('‚úÖ Clique no √≠cone de edi√ß√£o executado com sucesso');
        this.performanceMonitor.recordClickEnd('clickEditIcon', Date.now() - clickStartTime, true);
      } catch (clickError) {
        console.error('‚ùå Erro ao clicar no √≠cone de edi√ß√£o:', clickError.message);
        this.performanceMonitor.recordClickEnd('clickEditIcon', Date.now() - clickStartTime, false);
        throw new Error(`Falha ao clicar no √≠cone de edi√ß√£o: ${clickError.message}`);
      }
    }
    
    // Registrar fim da opera√ß√£o se n√£o houve clique
    this.performanceMonitor.recordClickEnd('clickEditIcon', Date.now() - clickStartTime, false);
  }

  async clickServerTab() {
    const servidorSelectors = [
      'text=Servidor',
      'a[href*="servidor"]',
      'button:has-text("Servidor")',
      'a:has-text("Servidor")',
      '[role="tab"]:has-text("Servidor")',
      'li:has-text("Servidor") a',
      '//a[contains(text(), "Servidor")]',
      '//button[contains(text(), "Servidor")]'
    ];
        
    let servidorTab = null;
        
    for (const selector of servidorSelectors) {
      try {
        await this.page.waitForSelector(selector, { timeout: 2000 });
        servidorTab = selector;
        console.log(`‚úÖ Aba Servidor encontrada: ${selector}`);
        break;
      } catch (error) {
        console.log(`Seletor aba Servidor ${selector} n√£o encontrado`);
      }
    }
        
    if (!servidorTab) {
      throw new Error('Aba Servidor n√£o encontrada');
    }
        
    await this.retryManager.retryClick(
      async (selector) => {
        const element = await this.page.$(selector);
        if (element) {
          await element.click();
        } else {
          throw new Error('Element not found');
        }
      },
      servidorTab
    );
    await this.delay(2000);
  }

  async processOrgaosJulgadores() {
    this.sendStatus('info', 'üöÄ Iniciando processamento INTELIGENTE dos OJs...', 55, 'Verifica√ß√£o e integra√ß√£o inteligente ativa');
    
    // Validar configura√ß√£o antes de processar
    if (!this.config || !this.config.orgaos || !Array.isArray(this.config.orgaos)) {
      throw new Error('Configura√ß√£o de √≥rg√£os julgadores inv√°lida ou n√£o definida');
    }
    
    // Verificar OJs existentes antes do processamento
    this.sendStatus('info', 'üîç Analisando OJs j√° cadastrados...', 10, 'Verifica√ß√£o inteligente');
    const analysisResult = await this.smartOJIntegration.analyzeExistingOJs(this.page, this.currentServidor);
    
    // Filtrar OJs que precisam ser processados
    const filteredOJs = await this.smartOJIntegration.filterOJsForProcessing(this.config.orgaos, analysisResult);
    this.sendStatus('info', `üìã ${filteredOJs.toCreate.length} novos OJs + ${filteredOJs.toAddRole.length} perfis adicionais`, 20, 'An√°lise conclu√≠da');
    
    // Atualizar configura√ß√£o com OJs filtrados
    this.config.orgaos = [...filteredOJs.toCreate, ...filteredOJs.toAddRole];
    
    try {
      // Inicializar processador TURBO
      if (!this.turboProcessor) {
        this.turboProcessor = new TurboModeProcessor(this.intelligentCache, this.delayManager);
        await this.turboProcessor.activateTurboMode();
      }
      
      // Inicializar processador paralelo
      if (!this.parallelProcessor) {
        this.parallelProcessor = new ParallelOJProcessor(
          this.browser, 
          this.timeoutManager, 
          this.config,
          this.domCache
        );
        // Configurar a p√°gina original para navega√ß√£o
        this.parallelProcessor.setOriginalPage(this.page);
      }
      
      // Processar OJs com verifica√ß√£o inteligente
      const startTime = Date.now();
      let results = [];
      
      // Processar novos OJs
      if (filteredOJs.toCreate.length > 0) {
        this.sendStatus('info', `üÜï Processando ${filteredOJs.toCreate.length} novos OJs...`, 30, 'Cria√ß√£o de OJs');
        const newOJResults = await this.parallelProcessor.processOJsInParallel(filteredOJs.toCreate);
        results = results.concat(newOJResults);
      }
      
      // Processar adi√ß√£o de perfis
      if (filteredOJs.toAddRole.length > 0) {
        this.sendStatus('info', `üë§ Adicionando ${filteredOJs.toAddRole.length} perfis adicionais...`, 60, 'Adi√ß√£o de perfis');
        const roleResults = await this.processAdditionalRoles(filteredOJs.toAddRole);
        results = results.concat(roleResults);
      }
      
      // Processar OJs ignorados (relat√≥rio)
      if (filteredOJs.toSkip.length > 0) {
        const skipResults = filteredOJs.toSkip.map(oj => ({
          orgao: oj.nome || oj,
          status: 'J√° inclu√≠do - perfil completo',
          details: 'OJ j√° possui todos os perfis necess√°rios'
        }));
        results = results.concat(skipResults);
      }
      
      const duration = Date.now() - startTime;
      
      // Consolidar resultados
      this.results = results;
      
      // Atualizar cache local
      this.ojCache = this.parallelProcessor.ojCache;
      
      const sucessos = results.filter(r => r.status.includes('Sucesso')).length;
      const erros = results.filter(r => r.status === 'Erro').length;
      const jaIncluidos = results.filter(r => r.status.includes('J√°')).length;
      
      this.sendStatus('success', 
        `Processamento paralelo conclu√≠do em ${(duration/1000).toFixed(1)}s`, 
        95, 
        `${sucessos} sucessos, ${erros} erros, ${jaIncluidos} j√° inclu√≠dos`
      );
      
      console.log('üöÄ Processamento paralelo conclu√≠do:');
      console.log(`   ‚úÖ Sucessos: ${sucessos}`);
      console.log(`   ‚ùå Erros: ${erros}`);
      console.log(`   üìã J√° inclu√≠dos: ${jaIncluidos}`);
      console.log(`   ‚è±Ô∏è Tempo total: ${(duration/1000).toFixed(1)}s`);
      console.log(`   üìä Performance: ${(results.length / (duration/1000)).toFixed(1)} OJs/s`);
      
    } catch (error) {
      console.error('‚ùå Erro no processamento paralelo:', error);
      this.sendStatus('error', `Erro no processamento paralelo: ${error.message}`, 60, 'Tentando fallback');
      
      // Fallback para processamento sequencial
      await this.processOrgaosJulgadoresSequential();
    }
  }

  /**
   * Ativa o modo ultra-r√°pido para processamento em lote
   * Reduz todos os delays para o m√≠nimo poss√≠vel
   */
  /**
   * Processa adi√ß√£o de perfis adicionais a OJs existentes
   * @param {Array} ojsToAddRole - Lista de OJs que precisam de perfis adicionais
   * @returns {Array} Resultados do processamento
   */
  async processAdditionalRoles(ojsToAddRole) {
    const results = [];
    
    for (const ojData of ojsToAddRole) {
      try {
        this.sendStatus('info', `üë§ Adicionando perfil para ${ojData.nome}...`, null, 'Processando perfil adicional');
        
        // Navegar para o OJ espec√≠fico
        const navigationResult = await this.navigateToExistingOJ(ojData);
        if (!navigationResult.success) {
          results.push({
            orgao: ojData.nome,
            status: 'Erro - Navega√ß√£o falhou',
            details: navigationResult.error
          });
          continue;
        }
        
        // Adicionar o novo perfil
        const addRoleResult = await this.addRoleToExistingOJ(ojData);
        if (addRoleResult.success) {
          results.push({
            orgao: ojData.nome,
            status: 'Sucesso - Perfil adicionado',
            details: `Perfil ${ojData.novoRole} adicionado com sucesso`
          });
        } else {
          results.push({
            orgao: ojData.nome,
            status: 'Erro - Falha ao adicionar perfil',
            details: addRoleResult.error
          });
        }
        
        // Delay contextual entre processamentos
        await this.contextualDelay('between_role_additions', { fast: true });
        
      } catch (error) {
        results.push({
          orgao: ojData.nome,
          status: 'Erro - Exce√ß√£o',
          details: error.message
        });
      }
    }
    
    return results;
  }
  
  /**
   * Navega para um OJ existente no painel
   * @param {Object} ojData - Dados do OJ
   * @returns {Object} Resultado da navega√ß√£o
   */
  async navigateToExistingOJ(ojData) {
    try {
      // Implementar navega√ß√£o espec√≠fica para OJ existente
      // Por enquanto, placeholder que simula sucesso
      await this.contextualDelay('navigation', { fast: true });
      
      return {
        success: true,
        message: 'Navega√ß√£o bem-sucedida'
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Adiciona um novo perfil a um OJ existente
   * @param {Object} ojData - Dados do OJ com novo perfil
   * @returns {Object} Resultado da adi√ß√£o
   */
  async addRoleToExistingOJ(ojData) {
    try {
      // Implementar l√≥gica espec√≠fica para adicionar perfil
      // Por enquanto, placeholder que simula sucesso
      await this.contextualDelay('role_addition', { fast: true });
      
      return {
        success: true,
        message: 'Perfil adicionado com sucesso'
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  async processOrgaosJulgadoresUltraFast() {
    console.log('‚ö° ATIVANDO MODO ULTRA-R√ÅPIDO para processamento de OJs...');
    this.sendStatus('info', '‚ö° MODO ULTRA-R√ÅPIDO ATIVADO', 50, 'Processamento em velocidade m√°xima');
    
    // For√ßar uso do processamento sequencial otimizado
    return this.processOrgaosJulgadoresSequential();
  }
  
  /**
   * Fallback para processamento sequencial (m√©todo original)
   */
  async processOrgaosJulgadoresSequential() {
    this.sendStatus('info', 'Usando processamento sequencial (fallback)...', 55, 'Verificando OJs cadastrados');
    
    // Validar configura√ß√£o antes de processar
    if (!this.config || !this.config.orgaos || !Array.isArray(this.config.orgaos)) {
      throw new Error('Configura√ß√£o de √≥rg√£os julgadores inv√°lida ou n√£o definida');
    }
        
    // Verificar OJs j√° cadastrados em lote usando SmartOJCache
    await this.loadExistingOJsWithSmartCache();
        
    // Normalizar e filtrar OJs que precisam ser processados
    const ojsNormalizados = this.config.orgaos.map(orgao => this.normalizeOrgaoName(orgao));
    const ojsToProcess = ojsNormalizados.filter(orgao => !this.ojCache.has(orgao));
    
    // Contador de OJs processadas
    let ojsProcessadasTotal = 0; // Come√ßar em 0
    const totalOjs = this.config.orgaos.length;
        
    this.sendStatus('info', `${ojsToProcess.length} OJs para processar`, 60, `${this.ojCache.size} j√° cadastrados`, null, null, ojsProcessadasTotal, totalOjs);
        
    // Processar cada OJ restante
    for (let i = 0; i < ojsToProcess.length; i++) {
      const orgao = ojsToProcess[i];
      const progress = 60 + (i / ojsToProcess.length) * 35;
            
      this.sendStatus('info', `Processando OJ ${i + 1}/${ojsToProcess.length}`, progress, 'Vinculando √≥rg√£o julgador', orgao, this.currentServidor?.nome, ojsProcessadasTotal, totalOjs);
            
      try {
        await this.processOrgaoJulgador(orgao);
        ojsProcessadasTotal++; // Incrementar contador
        this.results.push({
          orgao,
          status: 'Inclu√≠do com Sucesso',
          erro: null,
          perfil: this.config.perfil,
          cpf: this.config.cpf,
          timestamp: new Date().toISOString()
        });
        this.sendStatus('success', 'OJ processado com sucesso', progress, 'Vincula√ß√£o conclu√≠da', orgao, this.currentServidor?.nome, ojsProcessadasTotal, totalOjs);
      } catch (error) {
        console.error(`Erro ao processar OJ ${orgao}:`, error);
        ojsProcessadasTotal++; // Incrementar contador mesmo em caso de erro
        this.results.push({
          orgao,
          status: 'Erro',
          erro: error.message,
          cpf: this.config.cpf,
          timestamp: new Date().toISOString()
        });
        this.sendStatus('error', `Erro ao processar OJ: ${error.message}`, progress, 'Erro na vincula√ß√£o', orgao, this.currentServidor?.nome, ojsProcessadasTotal, totalOjs);
                
        // Prote√ß√µes ap√≥s erro
        await this.handleErrorRecovery();
      }
            
      // Pausa HIPER-OTIMIZADA para velocidade m√°xima (reduzido de 5ms para 1ms)
      const delay = 1; // Delay m√≠nimo absoluto para estabilidade do DOM
      await this.ultraFastDelayManager.batchDelay({ priority: 'critical', context: 'hyperFastBetweenOJs' });
    }
        
    // Adicionar OJs j√° existentes ao relat√≥rio
    for (const orgaoExistente of this.ojCache) {
      if (this.config && this.config.orgaos && this.config.orgaos.includes(orgaoExistente)) {
        this.results.push({
          orgao: orgaoExistente,
          status: 'J√° Inclu√≠do',
          erro: null,
          perfil: this.config.perfil,
          cpf: this.config.cpf,
          timestamp: new Date().toISOString()
        });
      }
    }
    
    // Enviar status final de conclus√£o com contador correto
    console.log(`üîç [CONTADOR] Total OJs configuradas: ${totalOjs}`);
    console.log(`üîç [CONTADOR] Total OJs processadas: ${ojsProcessadasTotal}`);
    console.log(`üîç [CONTADOR] Total resultados: ${this.results.length}`);
    
    // S√≥ enviar status de sucesso se houver OJs processadas ou configuradas
    if (ojsProcessadasTotal > 0 || totalOjs > 0) {
      this.sendStatus('success', 'Processamento finalizado com sucesso!', 100, 
        `${ojsProcessadasTotal} OJs processadas de ${totalOjs} configuradas`, 
        'Finalizado', this.currentServidor?.nome, ojsProcessadasTotal, totalOjs);
    } else {
      // Log silencioso quando n√£o h√° OJs para processar
      console.log('üîÑ [AUTOMATION] Servidor finalizado - nenhum OJ para processar, partindo para o pr√≥ximo');
      this.sendStatus('info', 'Servidor processado', 100, 
        'Nenhum OJ para vincular - partindo para pr√≥ximo servidor', 
        'Finalizado', this.currentServidor?.nome, 0, 0);
    }
  }

  async loadExistingOJs() {
    try {
      this.sendStatus('info', 'Verificando OJs j√° cadastrados...', 58, 'Otimizando processo');
      console.log('üîç Carregando OJs existentes para otimizar automa√ß√£o...');
      
      // Aguardar elementos carregarem rapidamente
      await this.ultraFastDelayManager.elementWaitDelay({ priority: 'critical' });
      
      // Seletores para encontrar tabela/lista de OJs j√° cadastrados
      const tabelaSelectors = [
        'table tbody tr', // Tabela padr√£o
        '.mat-table .mat-row', // Material Design table
        '.datatable tbody tr', // DataTable
        '[role="row"]', // ARIA rows
        '.lista-orgaos tr', // Lista espec√≠fica
        '.localizacoes-visibilidades tr' // Tabela de localiza√ß√µes
      ];
      
      const ojsEncontrados = new Set();
      
      for (const selector of tabelaSelectors) {
        try {
          const linhas = this.page.locator(selector);
          const numLinhas = await linhas.count();
          console.log(`üîç Seletor "${selector}": ${numLinhas} linhas encontradas`);
          
          if (numLinhas > 0) {
            // Extrair texto de cada linha para identificar OJs
            for (let i = 0; i < Math.min(numLinhas, 50); i++) { // Limitar a 50 para performance
              try {
                const textoLinha = await linhas.nth(i).textContent();
                if (textoLinha && textoLinha.trim()) {
                  // Procurar por padr√µes de OJ no texto
                  const ojMatches = textoLinha.match(/(EXE\d+|LIQ\d+|CON\d+|DIVEX|[\d¬∫]+¬™?\s*Vara\s+do\s+Trabalho)/gi);
                  if (ojMatches) {
                    ojMatches.forEach(match => {
                      const ojNormalizado = this.normalizeOrgaoName(match.trim());
                      ojsEncontrados.add(ojNormalizado);
                      console.log(`‚úÖ OJ encontrado: ${ojNormalizado}`);
                    });
                  }
                }
              } catch (erro) {
                // Ignorar erros de linha espec√≠fica
                continue;
              }
            }
            
            // Se encontrou OJs com este seletor, n√£o precisa tentar outros
            if (ojsEncontrados.size > 0) {
              console.log(`‚úÖ ${ojsEncontrados.size} OJs j√° cadastrados encontrados`);
              break;
            }
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è Seletor ${selector} falhou: ${error.message}`);
        }
      }
      
      // Adicionar OJs encontrados ao cache
      ojsEncontrados.forEach(oj => this.ojCache.add(oj));
      
      console.log(`üéØ Cache de OJs atualizado: ${this.ojCache.size} OJs j√° cadastrados`);
      this.sendStatus('success', `${this.ojCache.size} OJs j√° cadastrados identificados`, 60, 'Cache otimizado');
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao carregar OJs existentes:', error.message);
      // N√£o falhar a automa√ß√£o por erro no cache
    }
  }

  /**
   * Carrega OJs existentes usando SmartOJCache (vers√£o otimizada)
   */
  async loadExistingOJsWithSmartCache() {
    try {
      this.sendStatus('info', 'Verificando OJs j√° cadastrados com SmartCache...', 58, 'Otimizando processo');
      console.log('üîç [SEQUENTIAL] Carregando OJs existentes usando SmartOJCache...');
      
      // CORRE√á√ÉO DO BUG: N√£o limpar cache persistente automaticamente
      this.ojCache.clear();
      this.smartOJCache.limparCache(true); // preservar dados persistentes
      
      // Usar o SmartOJCache para verificar OJs vinculados em lote (com persist√™ncia)
      const cpfServidor = this.currentServidor?.cpf || this.config?.cpf;
      const resultadoVerificacao = await this.smartOJCache.verificarOJsEmLote(
        this.page,
        this.config.orgaos,
        (mensagem, progresso) => {
          this.sendStatus('info', mensagem, 58 + (progresso * 0.3), 'Verificando OJs...');
        },
        cpfServidor // CORRE√á√ÉO: Passar CPF para cache persistente
      );
      
      console.log('üìä [SEQUENTIAL] Resultado da verifica√ß√£o em lote:');
      console.log(`   - Total verificados: ${resultadoVerificacao.estatisticas.totalVerificados}`);
      console.log(`   - J√° vinculados: ${resultadoVerificacao.estatisticas.jaVinculados}`);
      console.log(`   - Para vincular: ${resultadoVerificacao.estatisticas.paraVincular}`);
      
      // Adicionar OJs j√° vinculados ao cache local
      resultadoVerificacao.ojsJaVinculados.forEach(ojInfo => {
        const ojNormalizado = this.normalizeOrgaoName(ojInfo.oj);
        this.ojCache.add(ojNormalizado);
        
        // Tamb√©m atualizar o SmartOJCache
        this.smartOJCache.adicionarOJVinculado(ojInfo.oj);
        
        console.log(`‚úÖ [SEQUENTIAL] OJ j√° vinculado: "${ojInfo.oj}" ‚Üí normalizado: "${ojNormalizado}"`);
      });
      
      // Marcar cache como v√°lido
      this.smartOJCache.cacheValido = true;
      this.smartOJCache.ultimaAtualizacao = Date.now();
      
      console.log(`üéØ [SEQUENTIAL] Cache de OJs atualizado: ${this.ojCache.size} OJs j√° cadastrados`);
      this.sendStatus('success', `${this.ojCache.size} OJs j√° cadastrados | ${resultadoVerificacao.estatisticas.paraVincular} para processar`, 90, 'SmartCache otimizado');
      
      return resultadoVerificacao;
      
    } catch (error) {
      console.log('‚ö†Ô∏è [SEQUENTIAL] Erro ao carregar OJs com SmartCache:', error.message);
      console.log('üîÑ [SEQUENTIAL] Tentando fallback para m√©todo tradicional...');
      
      // Fallback para o m√©todo tradicional
      await this.loadExistingOJs();
      return null;
    }
  }

  async processOrgaoJulgador(orgao) {
    const processStartTime = Date.now();
    this.performanceMonitor.recordPJEOperationStart('processOrgaoJulgador', orgao);
    // Definir papel desejado no escopo da fun√ß√£o (usado em m√∫ltiplos blocos)
    const papelDesejado = this.config?.perfil || 'Assessor';
    // Flag da verifica√ß√£o simples (true/false) ou null se n√£o foi poss√≠vel verificar
    let jaVinculadoSimples = null;
    
    // Atualizar status do servidor no painel de processamento
    if (this.mainWindow && this.mainWindow.webContents && this.currentServidor) {
      this.mainWindow.webContents.executeJavaScript(`
        if (typeof updateProcessingServer === 'function') {
          updateProcessingServer('${this.currentServidor.cpf}', {
            currentOJ: '${orgao.replace(/'/g, '\\\'').replace(/"/g, '\\"')}'
          });
        }
      `).catch(err => {
        console.log('‚ö†Ô∏è Erro ao atualizar status do servidor:', err.message);
      });
    }
    
    // SISTEMA INTELIGENTE: Desabilitado o bypass para permitir verifica√ß√£o inteligente
    const isUniversalBypass = false; // Permitir verifica√ß√µes inteligentes
    
    if (isUniversalBypass) {
      console.log(`üî• [BYPASS-UNIVERSAL] PROCESSAMENTO DIRETO para OJ: ${orgao} (${this.currentServidor.nome})`);
      console.log('üî• [BYPASS-UNIVERSAL] PULANDO TODAS as verifica√ß√µes pr√©vias');
      // PULAR toda a l√≥gica de verifica√ß√£o e ir direto para vincula√ß√£o
    } else {
      console.log(`üöÄ INICIANDO processamento otimizado para: ${orgao}`);
      
      // Verifica√ß√£o otimizada: Separar OJ de papel para respeitar configura√ß√£o
      console.log(`üîç [OTIMIZADO] Verificando OJ "${orgao}" (papel ser√° aplicado: "${papelDesejado}")`);
      
      try {
        // ETAPA 1: Verificar APENAS se OJ j√° est√° vinculado (sem considerar papel)
        console.log('üìã [ETAPA 1] Verifica√ß√£o simples de OJ vinculado...');
        const { verificarOJJaVinculado } = require('../verificarOJVinculado');
        const verificacaoSimples = await verificarOJJaVinculado(this.page, orgao);
        jaVinculadoSimples = Boolean(verificacaoSimples?.jaVinculado);
        
        console.log(`üìã [RESULTADO] OJ "${orgao}" vinculado: ${verificacaoSimples.jaVinculado}`);
        
        if (verificacaoSimples.jaVinculado) {
          // Fonte de verdade: p√°gina atual. Se OJ j√° est√° vinculado, N√ÉO tentar cadastrar novamente.
          console.log(`‚è≠Ô∏è [P√ÅGINA] OJ j√° vinculado na p√°gina - pulando cadastro: ${orgao}`);
          // Atualizar caches e resultados e encerrar cedo
          const ojNorm = this.normalizeOrgaoName(orgao);
          this.ojCache.add(ojNorm);
          this.results.push({
            orgao,
            status: 'J√° Inclu√≠do (P√°gina)',
            erro: null,
            perfil: this.config.perfil,
            cpf: this.config.cpf,
            timestamp: new Date().toISOString()
          });
          this.performanceMonitor.recordPJEOperationEnd('processOrgaoJulgador', orgao, true);
          return; // N√£o prosseguir com tentativa de inclus√£o
        } else {
          console.log(`‚ûï [ESTRAT√âGIA] OJ n√£o vinculado - CRIAR nova vincula√ß√£o com papel "${papelDesejado}"`);
          console.log('‚úÖ [DECIS√ÉO] Processamento LIBERADO - Criar nova vincula√ß√£o');
          // Continua processamento para criar vincula√ß√£o
        }
        
      } catch (verificacaoError) {
        console.log(`‚ö†Ô∏è [ERRO] Verifica√ß√£o simples de OJ falhou: ${verificacaoError.message}`);
        console.log('üîÑ [FALLBACK] Continuando processamento por seguran√ßa...');
        // Continua processamento mesmo com erro
      }
    }
    
    // DETEC√á√ÉO AUTOM√ÅTICA DE VARAS PROBLEM√ÅTICAS - DESABILITADA PARA BYPASS UNIVERSAL
    if (!isUniversalBypass) {
      console.log('üîç [DETECTOR] Analisando vara para problemas conhecidos...');
      const deteccaoProblema = this.detectorVaras.detectarVaraProblematica(orgao);
      
      if (deteccaoProblema.problematica) {
        console.log(`‚ö†Ô∏è [DETECTOR] Vara problem√°tica detectada: ${deteccaoProblema.categoria}`);
        console.log(`üîß [DETECTOR] Aplicando tratamento: ${deteccaoProblema.tratamento}`);
      
        try {
          const resultadoTratamento = await this.detectorVaras.aplicarTratamento(
            deteccaoProblema, 
            this.page, 
            orgao, 
            this.config.perfil || 'Assessor'
          );
        
          if (resultadoTratamento.aplicado) {
            console.log('‚úÖ [DETECTOR] Tratamento autom√°tico aplicado com sucesso');
          
            this.results.push({
              orgao,
              status: 'sucesso',
              metodo: 'detector_automatico',
              tratamento: deteccaoProblema.tratamento,
              categoria: deteccaoProblema.categoria,
              confianca: deteccaoProblema.confianca,
              tempo: Date.now() - processStartTime
            });
          
            this.performanceMonitor.recordPJEOperationEnd('processOrgaoJulgador', orgao, true);
            return { success: true, method: 'detector_automatico', details: resultadoTratamento };
          } else {
            console.log(`‚ö†Ô∏è [DETECTOR] Tratamento autom√°tico falhou: ${resultadoTratamento.motivo || 'motivo desconhecido'}`);
            console.log('üîÑ [DETECTOR] Continuando com fluxo padr√£o...');
          }
        } catch (detectorError) {
          console.log(`‚ùå [DETECTOR] Erro no tratamento autom√°tico: ${detectorError.message}`);
          console.log('üîÑ [DETECTOR] Continuando com fluxo padr√£o...');
        }
      } else {
        console.log('‚úÖ [DETECTOR] Vara n√£o apresenta problemas conhecidos');
      }
    } else {
      console.log('üî• [BYPASS-UNIVERSAL] PULANDO detector de varas problem√°ticas completamente');
    }
    
    // Verifica√ß√£o espec√≠fica para varas de Limeira - DESABILITADA PARA BYPASS UNIVERSAL
    if (!isUniversalBypass && isVaraLimeira(orgao)) {
      console.log(`üèõÔ∏è [LIMEIRA] Vara de Limeira detectada: ${orgao}`);
      console.log('üîß [LIMEIRA] Aplicando tratamento espec√≠fico...');
      
      try {
        const resultadoLimeira = await aplicarTratamentoLimeira(this.page, orgao, this.config.perfil || 'Assessor');
        
        if (resultadoLimeira.sucesso) {
          console.log(`‚úÖ [LIMEIRA] Tratamento espec√≠fico bem-sucedido para: ${orgao}`);
          this.results.push({
            orgao,
            status: 'sucesso',
            metodo: 'tratamento_limeira_especifico',
            tempo: Date.now() - processStartTime,
            detalhes: resultadoLimeira.detalhes
          });
          this.performanceMonitor.recordPJEOperationEnd('processOrgaoJulgador', orgao, true);
          return;
        } else {
          console.log('‚ö†Ô∏è [LIMEIRA] Tratamento espec√≠fico falhou, continuando com fluxo padr√£o...');
        }
      } catch (limeiraError) {
        console.log(`‚ùå [LIMEIRA] Erro no tratamento espec√≠fico: ${limeiraError.message}`);
        console.log('üîÑ [LIMEIRA] Continuando com fluxo padr√£o...');
      }
    }
    
    // Se chegou at√© aqui, significa que pode vincular
    console.log(`üöÄ PROSSEGUINDO com vincula√ß√£o do OJ: ${orgao}`);
    
    // Verifica√ß√£o de cache r√°pida como fallback - DESABILITADA PARA BYPASS UNIVERSAL
    const ojNormalizado = this.normalizeOrgaoName(orgao);
    const isForced = Boolean(this.forcedOJsNormalized && this.forcedOJsNormalized.has(ojNormalizado));
    // Somente pular por cache se N√ÉO for for√ßado e a verifica√ß√£o simples tamb√©m confirmar que j√° est√° vinculado
    if (!isUniversalBypass && !isForced && this.ojCache.has(ojNormalizado) && jaVinculadoSimples === true) {
      console.log(`‚ö° OJ encontrado no cache local: ${orgao}`);
      
      // Se est√° no cache, tamb√©m deveria pular
      console.log(`‚è≠Ô∏è CACHE: Pulando OJ j√° processado: ${orgao}`);
      this.results.push({
        orgao,
        status: 'J√° Inclu√≠do (Cache)',
        erro: null,
        perfil: papelDesejado,
        cpf: this.config.cpf,
        timestamp: new Date().toISOString()
      });
      
      // Registrar fim da opera√ß√£o com sucesso (cache hit)
      this.performanceMonitor.recordPJEOperationEnd('processOrgaoJulgador', Date.now() - processStartTime, true);
      return; // Skip processamento
    } else if (isUniversalBypass && this.ojCache.has(ojNormalizado)) {
      console.log(`üî• [BYPASS-UNIVERSAL] OJ ${orgao} encontrado no cache, mas IGNORANDO cache para for√ßar processamento`);
    }
    
    const startTime = Date.now();
    
    try {
      // ULTRA-R√ÅPIDO: Sem estabiliza√ß√£o desnecess√°ria
      console.log('üéØ PROCESSAMENTO ULTRA-ASSERTIVO INICIADO');
      console.log(`üìé Processando servidor: ${this.config.cpf} - Perfil: ${this.config.perfil}`);
      
      // Fechar modais rapidamente (se existirem)
      console.log('üîÑ ETAPA 0: Fechando modais existentes...');
      await this.closeAnyModalsRapido();
          
      // 1. A√á√ÉO: Clicar no bot√£o "Adicionar Localiza√ß√£o/Visibilidade"
      console.log(`üîÑ ETAPA 1: Abrindo modal de adi√ß√£o para OJ: ${orgao}`);
      await this.clickAddLocationButtonRapido();
          
      // 2. A√á√ÉO: Selecionar o OJ diretamente
      console.log(`üîÑ ETAPA 2: Selecionando OJ espec√≠fico: ${orgao}`);
      await this.selectOrgaoJulgadorRapido(orgao);
          
      // 3. A√á√ÉO: Configurar papel e visibilidade
      console.log(`üîÑ ETAPA 3: Configurando papel e visibilidade para OJ: ${orgao}`);
      await this.configurePapelVisibilidadeRapido();
          
      // 4. A√á√ÉO: Salvar
      console.log(`üîÑ ETAPA 4: Salvando configura√ß√£o para OJ: ${orgao}`);
      await this.saveConfigurationRapido();
          
      // 5. FINAL: Verificar sucesso
      console.log(`üîÑ ETAPA 5: Verificando sucesso da vincula√ß√£o para OJ: ${orgao}`);
      await this.verifySuccessRapido();
      
      const tempoDecorrido = Date.now() - startTime;
      console.log(`‚úÖ OJ processado com SUCESSO em ${tempoDecorrido}ms: ${orgao}`);
      
      // Adicionar ao cache para pr√≥ximas verifica√ß√µes
      this.ojCache.add(ojNormalizado);
      
      // Adicionar resultado de sucesso
      this.results.push({
        orgao,
        status: 'Vinculado com Sucesso',
        erro: null,
        perfil: this.config.perfil,
        cpf: this.config.cpf,
        timestamp: new Date().toISOString()
      });
      
    } catch (error) {
      const tempoDecorrido = Date.now() - startTime;
      console.error(`‚ùå ERRO ap√≥s ${tempoDecorrido}ms processando OJ ${orgao}:`, error.message);
      console.error('‚ùå Stack trace completo:', error.stack);

      // Fallback robusto: usar fluxo tradicional do vincularOJ.js
      try {
        console.log('üîÑ [FALLBACK] Tentando fluxo tradicional vincularOJ...');
        const { vincularOJ } = require('../vincularOJ');
        await vincularOJ(this.page, orgao, papelDesejado, 'P√∫blico');
        console.log('‚úÖ [FALLBACK] Vincula√ß√£o tradicional conclu√≠da com sucesso');

        // Adicionar ao cache e registrar sucesso
        const ojNormalizadoFB = this.normalizeOrgaoName(orgao);
        this.ojCache.add(ojNormalizadoFB);
        this.results.push({
          orgao,
          status: 'Vinculado com Sucesso (Fallback)',
          erro: null,
          perfil: this.config.perfil,
          cpf: this.config.cpf,
          timestamp: new Date().toISOString()
        });
        this.sendStatus('success', `‚úÖ OJ ${orgao} inclu√≠do com sucesso (fallback)`, null, null, orgao, this.currentServidor?.nome);
        this.performanceMonitor.recordPJEOperationEnd('processOrgaoJulgador', Date.now() - processStartTime, true);
        return;
      } catch (fallbackError) {
        console.error(`‚ùå [FALLBACK] Falhou vincularOJ para ${orgao}: ${fallbackError.message}`);
        // Adicionar resultado de erro final
        this.results.push({
          orgao,
          status: 'Erro na Vincula√ß√£o',
          erro: fallbackError.message || error.message,
          perfil: this.config.perfil,
          cpf: this.config.cpf,
          timestamp: new Date().toISOString()
        });
        // Registrar fim com erro
        this.performanceMonitor.recordPJEOperationEnd('processOrgaoJulgador', Date.now() - processStartTime, false);
        console.log(`‚ö†Ô∏è Erro processando ${orgao}, mas continuando com pr√≥ximo...`);
      }
    }
  }

  // === FUN√á√ïES OTIMIZADAS PARA VELOCIDADE ===
  
  async closeAnyModalsRapido() {
    console.log('‚ö° Fechando modais rapidamente...');
    const modalCloseSelectors = [
      '.mat-overlay-backdrop',
      '.cdk-overlay-backdrop',
      '.modal-backdrop',
      'button:has-text("OK")',
      'button:has-text("Fechar")'
    ];
        
    for (const selector of modalCloseSelectors) {
      try {
        // Usar page.$$ diretamente para evitar timeout longo do domCache
        const element = await this.page.$(selector);
        if (element) {
          const isVisible = await element.isVisible();
          if (isVisible) {
            await element.click();
            console.log(`‚ö° Modal fechado: ${selector}`);
            await this.ultraFastDelayManager.criticalDelay({ priority: 'critical' }); // Ultra otimizado
            return; // Sair imediatamente ap√≥s fechar
          }
        }
      } catch (error) {
        // Ignorar erros
      }
    }
    
    // ESC como fallback r√°pido
    try {
      await this.page.keyboard.press('Escape');
    } catch (error) {
      // Ignorar erros
    }
  }

  async clickAddLocationButtonRapido() {
    console.log('üéØ ASSERTIVO: Verificando se modal j√° est√° aberto...');
    
    // 1. PRIMEIRO: Verificar se o modal j√° est√° aberto
    const modalJaAberto = await this.page.locator('mat-dialog-container, [role="dialog"]').isVisible();
    if (modalJaAberto) {
      console.log('‚úÖ Modal j√° est√° aberto - PULANDO clique no bot√£o');
      return;
    }
    
    console.log('üéØ Modal fechado - clicando bot√£o Adicionar UMA VEZ...');

    // 2. SEGUNDO: Tentar m√∫ltiplos seletores plaus√≠veis para o bot√£o
    const buttonSelectors = [
      'button:has-text("Adicionar Localiza√ß√£o/Visibilidade"):not([disabled])',
      'button:has-text("Adicionar Localiza√ß√£o"):not([disabled])',
      'button:has-text("Adicionar Visibilidade"):not([disabled])',
      'button:has-text("Adicionar"):not([disabled])',
      '[aria-label*="Adicionar"]:not([disabled])',
      'mat-card button:has-text("Adicionar"):not([disabled])',
      '[role="main"] button:has-text("Adicionar"):not([disabled])'
    ];

    let clicked = false;
    let lastError = null;

    for (const selector of buttonSelectors) {
      try {
        console.log(`üîç Tentando seletor de bot√£o: ${selector}`);
        await this.page.waitForSelector(selector, { timeout: 2500 });

        // Rolar para o elemento se necess√°rio
        try {
          await this.page.locator(selector).first().scrollIntoViewIfNeeded();
        } catch {}

        await this.retryManager.retryClick(
          async (sel) => {
            const element = await this.page.$(sel);
            if (element) {
              await element.click();
            } else {
              throw new Error('Element not found');
            }
          },
          selector
        );

        console.log(`‚úÖ Clique realizado com: ${selector}`);
        clicked = true;
        break;
      } catch (e) {
        console.log(`‚ùå Falha seletor bot√£o: ${selector} ‚Üí ${e.message}`);
        lastError = e;
        continue;
      }
    }

    if (!clicked) {
      throw new Error(`Bot√£o Adicionar n√£o encontrado: ${lastError?.message || 'desconhecido'}`);
    }

    // 3. TERCEIRO: Aguardar modal abrir de forma assertiva
    console.log('üéØ Aguardando modal abrir...');
    await this.page.waitForSelector('mat-dialog-container, [role="dialog"]', { timeout: 6000 });
    console.log('‚úÖ Modal CONFIRMADO aberto');
    return;
  }

  async selectOrgaoJulgadorRapido(orgao) {
    console.log(`üéØ ASSERTIVO: Sele√ß√£o direta de OJ: ${orgao}`);
    
    try {
      // 1. DIRETO: Encontrar e clicar no mat-select de √ìrg√£o Julgador
      console.log('üéØ Procurando mat-select de √ìrg√£o Julgador...');
      
      // Seletores expandidos para maior compatibilidade
      const matSelectSelectors = [
        'mat-dialog-container mat-select[placeholder="√ìrg√£o Julgador"]',
        'mat-dialog-container mat-select[placeholder="Orgao Julgador"]',
        '[role="dialog"] mat-select[placeholder="√ìrg√£o Julgador"]',
        'mat-dialog-container mat-select[name="idOrgaoJulgadorSelecionado"]',
        'mat-dialog-container mat-select[placeholder*="√ìrg√£o"]',
        '[role="dialog"] mat-select[placeholder*="√ìrg√£o"]',
        'mat-dialog-container mat-select',
        '[role="dialog"] mat-select'
      ];
      
      let matSelectElement = null;
      for (const selector of matSelectSelectors) {
        try {
          console.log(`üîç Testando seletor: ${selector}`);
          await this.page.waitForSelector(selector, { timeout: 2000 });
          matSelectElement = selector;
          console.log(`‚úÖ Mat-select encontrado: ${selector}`);
          break;
        } catch (e) {
          console.log(`‚ùå Seletor falhou: ${selector}`);
        }
      }
      
      if (!matSelectElement) {
        throw new Error('Mat-select de √ìrg√£o Julgador n√£o encontrado no modal');
      }
      
      await this.retryManager.retryClick(
        async (selector) => {
          const element = await this.page.$(selector);
          if (element) {
            await element.click();
          } else {
            throw new Error('Element not found');
          }
        },
        matSelectElement
      );
      console.log('‚úÖ Mat-select de OJ clicado');
      
      // 2. AGUARDAR: Op√ß√µes aparecerem
      console.log('üéØ Aguardando op√ß√µes do dropdown...');
      await this.page.waitForSelector('mat-option', { timeout: 3000 });
      
      // 3. SELECIONAR: Buscar op√ß√£o com algoritmo inteligente
      console.log(`üéØ Procurando op√ß√£o: ${orgao}`);
      const opcoes = this.page.locator('mat-option');
      const numOpcoes = await opcoes.count();
      
      console.log(`üìã ${numOpcoes} op√ß√µes dispon√≠veis`);
      
      // Coletar todas as op√ß√µes dispon√≠veis
      const availableOptions = [];
      for (let i = 0; i < numOpcoes; i++) {
        const textoOpcao = await opcoes.nth(i).textContent();
        if (textoOpcao && textoOpcao.trim()) {
          availableOptions.push({
            index: i,
            text: textoOpcao.trim(),
            element: opcoes.nth(i)
          });
        }
      }
      
      console.log(`üìã Op√ß√µes coletadas: ${availableOptions.length}`);
      
      // Primeiro: tentar busca exata (m√©todo original)
      const orgaoNormalizado = this.normalizeOrgaoName(orgao);
      console.log(`üîç Tentando busca exata para: ${orgaoNormalizado}`);
      
      let opcaoEncontrada = false;
      for (const option of availableOptions) {
        const textoOpcaoNormalizado = this.normalizeOrgaoName(option.text);
        if (textoOpcaoNormalizado.includes(orgaoNormalizado)) {
          await option.element.click();
          console.log(`‚úÖ OJ selecionado (busca exata): ${option.text}`);
          opcaoEncontrada = true;
          break;
        }
      }
      
      // Se busca exata falhou, usar busca inteligente
      if (!opcaoEncontrada) {
        console.log(`‚ö†Ô∏è Busca exata falhou. Iniciando busca inteligente por palavras-chave...`);
        
        const { match, score } = this.findBestOJMatch(orgao, availableOptions);
        
        if (match && score > 0) {
          await match.element.click();
          console.log(`‚úÖ OJ selecionado (busca inteligente): ${match.text} (Score: ${score})`);
          opcaoEncontrada = true;
        } else {
          // Listar todas as op√ß√µes dispon√≠veis para debug
          console.log(`‚ùå Nenhuma op√ß√£o compat√≠vel encontrada. Op√ß√µes dispon√≠veis:`);
          availableOptions.forEach((option, idx) => {
            console.log(`   ${idx + 1}. "${option.text}"`);
          });
          throw new Error(`OJ "${orgao}" n√£o encontrado nas op√ß√µes dispon√≠veis`);
        }
      }
      
      // 4. AGUARDAR: Processamento da sele√ß√£o com delay contextual
      await this.contextualDelay('ojSelection', { priority: 'high' });
      console.log('‚úÖ Sele√ß√£o de OJ conclu√≠da');
      
    } catch (error) {
      console.error(`‚ùå Erro na sele√ß√£o assertiva de OJ: ${error.message}`);
      throw error;
    }
  }

  async configurePapelVisibilidadeRapido() {
    console.log('üéØ ASSERTIVO: Configura√ß√£o direta de papel/visibilidade...');
    
    try {
      // Verificar se o navegador ainda est√° ativo
      await this.ensureBrowserActive();
      
      // 1. PAPEL: Selecionar perfil configurado
      console.log(`üéØ Verificando campo Papel - Configurado: ${this.config.perfil || 'N√£o especificado'}`);
      console.log('üîç [DEBUG] Config completo:', JSON.stringify(this.config, null, 2));
      
      // Aguardar mais tempo para garantir que o modal esteja carregado
      await this.ultraFastDelayManager.pageLoadDelay({ priority: 'critical' });
      
      // Verificar novamente se a p√°gina ainda est√° v√°lida
      if (this.page.isClosed()) {
        console.log('‚ö†Ô∏è [DEBUG] P√°gina foi fechada, tentando reconectar...');
        await this.reconnectBrowser();
        return;
      }
      
      // Tentar m√∫ltiplos seletores para o campo Papel
      const seletoresPapel = [
        'mat-dialog-container mat-select[placeholder*="Papel"]',
        'mat-dialog-container mat-select[formcontrolname*="papel"]',
        'mat-dialog-container mat-select[aria-label*="Papel"]',
        'mat-select[placeholder*="Papel"]',
        'mat-select:has-text("Papel")',
        '.mat-select-trigger:has-text("Papel")'
      ];
      
      let matSelectPapel = null;
      for (const seletor of seletoresPapel) {
        try {
          // Verificar se a p√°gina ainda est√° v√°lida antes de cada tentativa
          if (this.page.isClosed()) {
            console.log('‚ö†Ô∏è [DEBUG] P√°gina fechada durante busca do seletor');
            await this.reconnectBrowser();
            return;
          }
          
          console.log(`üîç [DEBUG] Testando seletor: ${seletor}`);
          const elemento = this.page.locator(seletor);
          if (await elemento.count() > 0) {
            console.log(`‚úÖ [DEBUG] Campo Papel encontrado com seletor: ${seletor}`);
            matSelectPapel = elemento;
            break;
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è [DEBUG] Erro ao testar seletor ${seletor}: ${error.message}`);
          if (error.message.includes('Target page, context or browser has been closed')) {
            console.log('üîÑ [DEBUG] Navegador fechado detectado, reconectando...');
            await this.reconnectBrowser();
            return;
          }
        }
      }
      
      if (matSelectPapel && await matSelectPapel.count() > 0) {
        console.log('üîç [DEBUG] Campo Papel encontrado, clicando...');
        
        // Verificar se a p√°gina ainda est√° v√°lida antes do clique
        if (this.page.isClosed()) {
          console.log('‚ö†Ô∏è [DEBUG] P√°gina fechada antes do clique no campo Papel');
          await this.reconnectBrowser();
          return;
        }
        
        // Tentar clicar com diferentes estrat√©gias e timeouts mais longos
        try {
          console.log('üîç [DEBUG] Tentando clique normal com timeout de 5 segundos...');
          await matSelectPapel.click({ timeout: 5000 });
          console.log('‚úÖ [DEBUG] Clique normal bem-sucedido');
        } catch (error) {
          console.log(`‚ö†Ô∏è [DEBUG] Clique normal falhou: ${error.message}`);
          if (error.message.includes('Target page, context or browser has been closed')) {
            console.log('üîÑ [DEBUG] Navegador fechado durante clique, reconectando...');
            await this.reconnectBrowser();
            return;
          }
          try {
            console.log('üîç [DEBUG] Tentando clique for√ßado...');
            await matSelectPapel.click({ force: true, timeout: 5000 });
            console.log('‚úÖ [DEBUG] Clique for√ßado bem-sucedido');
          } catch (forceError) {
            console.log(`‚ö†Ô∏è [DEBUG] Clique for√ßado falhou: ${forceError.message}`);
            if (forceError.message.includes('Target page, context or browser has been closed')) {
              console.log('üîÑ [DEBUG] Navegador fechado durante clique for√ßado, reconectando...');
              await this.reconnectBrowser();
              return;
            }
            // Tentar uma √∫ltima estrat√©gia: aguardar e tentar novamente
            console.log('üîç [DEBUG] Aguardando 2 segundos e tentando clique final...');
            await this.ultraFastDelayManager.pageLoadDelay({ priority: 'critical' });
            try {
              await matSelectPapel.click({ force: true, timeout: 3000 });
              console.log('‚úÖ [DEBUG] Clique final bem-sucedido');
            } catch (finalError) {
              console.log(`‚ùå [DEBUG] Todos os cliques falharam: ${finalError.message}`);
            }
          }
        }
        
        // Verificar se a p√°gina ainda est√° v√°lida ap√≥s o clique
        if (this.page.isClosed()) {
          console.log('‚ö†Ô∏è [DEBUG] P√°gina fechada ap√≥s clique no campo Papel');
          await this.reconnectBrowser();
          return;
        }
        
        // Aguardar as op√ß√µes aparecerem com estrat√©gia mais robusta
        console.log('‚è≥ [DEBUG] Aguardando op√ß√µes do dropdown aparecerem...');
        
        try {
          // Tentar aguardar as op√ß√µes aparecerem com waitForSelector
          await this.page.waitForSelector('mat-option', { timeout: 8000 });
          console.log('‚úÖ [DEBUG] Op√ß√µes encontradas com waitForSelector');
        } catch (waitError) {
          console.log(`‚ö†Ô∏è [DEBUG] waitForSelector falhou: ${waitError.message}`);
          console.log('üîç [DEBUG] Tentando aguardar com timeout fixo...');
          await this.ultraFastDelayManager.pageLoadDelay({ priority: 'critical' });
        }
        
        const opcoesPapel = this.page.locator('mat-option');
        let totalOpcoes = await opcoesPapel.count();
        console.log(`üîç [DEBUG] Total de op√ß√µes de papel dispon√≠veis: ${totalOpcoes}`);
        
        // Se ainda n√£o encontrou op√ß√µes, tentar estrat√©gias adicionais
        if (totalOpcoes === 0) {
          console.log('‚ö†Ô∏è [DEBUG] Nenhuma op√ß√£o encontrada, tentando seletores alternativos...');
          
          const seletoresAlternativos = [
            '.mat-option',
            '[role="option"]',
            '.mat-select-panel mat-option',
            'mat-select-panel mat-option'
          ];
          
          for (const seletor of seletoresAlternativos) {
            try {
              await this.page.waitForSelector(seletor, { timeout: 3000 });
              const opcoesAlt = this.page.locator(seletor);
              const totalAlt = await opcoesAlt.count();
              if (totalAlt > 0) {
                console.log(`‚úÖ [DEBUG] Op√ß√µes encontradas com seletor alternativo: ${seletor} (${totalAlt} op√ß√µes)`);
                totalOpcoes = totalAlt;
                break;
              }
            } catch (altError) {
              console.log(`‚ö†Ô∏è [DEBUG] Seletor alternativo ${seletor} falhou: ${altError.message}`);
            }
          }
          
          // √öltima tentativa com timeout longo
          if (totalOpcoes === 0) {
            console.log('‚ö†Ô∏è [DEBUG] Ainda sem op√ß√µes, aguardando mais 5 segundos...');
            await this.page.waitForTimeout(5000);
            totalOpcoes = await opcoesPapel.count();
            console.log(`üîç [DEBUG] Total final de op√ß√µes: ${totalOpcoes}`);
          }
        }
        
        // Listar todas as op√ß√µes dispon√≠veis para debug
        for (let i = 0; i < Math.min(totalOpcoes, 10); i++) {
          try {
            const opcaoTexto = await opcoesPapel.nth(i).textContent();
            console.log(`üîç [DEBUG] Op√ß√£o ${i + 1}: "${opcaoTexto?.trim()}"`);
          } catch (error) {
            console.log(`‚ö†Ô∏è [DEBUG] Erro ao ler op√ß√£o ${i + 1}: ${error.message}`);
          }
        }
        
        let perfilSelecionado = false;
        
        // PRIORIDADE M√ÅXIMA: Perfil configurado pelo usu√°rio
        if (this.config.perfil && this.config.perfil.trim() !== '') {
          console.log(`üéØ [PRIORIDADE] Procurando perfil CONFIGURADO: "${this.config.perfil}"`);
          // Tentativa direta: op√ß√£o que cont√©m exatamente o texto do perfil configurado (case-insensitive)
          try {
            const perfilRegex = new RegExp(this.config.perfil.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i');
            const opcaoDireta = opcoesPapel.filter({ hasText: perfilRegex });
            const countDireta = await opcaoDireta.count();
            if (countDireta > 0) {
              const textoDireta = await opcaoDireta.first().textContent();
              console.log(`‚úÖ [DIRETO] Perfil encontrado diretamente: "${textoDireta?.trim()}"`);
              await opcaoDireta.first().click({ timeout: 2000 });
              perfilSelecionado = true;
            }
          } catch (e) {
            console.log(`‚ö†Ô∏è [DIRETO] Falha na sele√ß√£o direta: ${e.message}`);
          }
          
          // Estrat√©gia 1: Busca por similaridade inteligente
          if (!perfilSelecionado) {
            perfilSelecionado = await this.selecionarPerfilComSimilaridade(opcoesPapel, this.config.perfil);
          }
          
          if (perfilSelecionado) {
            console.log('‚úÖ [SUCESSO] Perfil configurado selecionado com sucesso!');
          } else {
            console.log('‚ö†Ô∏è [FALLBACK] Perfil configurado n√£o encontrado, usando estrat√©gias alternativas...');
            
            // Estrat√©gia 2: Busca por palavras-chave espec√≠ficas do perfil configurado
            perfilSelecionado = await this.selecionarPerfilPorPalavrasChave(opcoesPapel, this.config.perfil);
          }
        } else {
          console.log('‚ö†Ô∏è [AVISO] Nenhum perfil foi configurado - usando perfil padr√£o...');
        }
        
        // FALLBACKS apenas se perfil configurado falhou
        if (!perfilSelecionado) {
          console.log('‚ö†Ô∏è [FALLBACK GERAL] Usando estrat√©gias de fallback...');
          
          // Estrat√©gia 1: Procurar por palavras-chave comuns
          // Priorizar 'Assessor' se o perfil configurado for 'Assessor'
          const palavrasChave = (this.config.perfil && /assessor/i.test(this.config.perfil))
            ? ['Assessor', 'Secret√°rio', 'Secretario', 'Diretor', 'Analista']
            : ['Secret√°rio', 'Secretario', 'Assessor', 'Diretor', 'Analista'];
          for (const palavra of palavrasChave) {
            if (perfilSelecionado) break;
            try {
              const opcaoChave = opcoesPapel.filter({ hasText: new RegExp(palavra, 'i') });
              if (await opcaoChave.count() > 0) {
                const textoChave = await opcaoChave.first().textContent();
                console.log(`üîç [DEBUG] Encontrado por palavra-chave "${palavra}": "${textoChave?.trim()}"`);
                await opcaoChave.first().click({ timeout: 2000 });
                console.log(`‚úÖ Papel selecionado por palavra-chave: ${palavra}`);
                perfilSelecionado = true;
                break;
              }
            } catch (error) {
              console.log(`‚ö†Ô∏è [DEBUG] Erro ao testar palavra-chave "${palavra}": ${error.message}`);
            }
          }
          
          // Estrat√©gia 2: Selecionar primeira op√ß√£o se ainda n√£o selecionou
          if (!perfilSelecionado && totalOpcoes > 0) {
            try {
              console.log('‚ö†Ô∏è [DEBUG] Selecionando primeira op√ß√£o dispon√≠vel...');
              await opcoesPapel.first().click({ timeout: 2000 });
              const textoSelecionado = await opcoesPapel.first().textContent();
              console.log(`‚úÖ Papel: Primeira op√ß√£o selecionada - "${textoSelecionado?.trim()}"`);
              perfilSelecionado = true;
            } catch (error) {
              console.log(`‚ùå [DEBUG] Erro ao selecionar primeira op√ß√£o: ${error.message}`);
            }
          }
          
          if (!perfilSelecionado) {
            console.log('‚ùå [DEBUG] Nenhuma op√ß√£o de papel p√¥de ser selecionada!');
          }
        }
      } else {
        console.log('‚ùå [DEBUG] Campo Papel n√£o encontrado com nenhum dos seletores!');
        
        // Tentar encontrar qualquer campo select no modal
        const todosSelects = this.page.locator('mat-dialog-container mat-select, mat-select');
        const totalSelects = await todosSelects.count();
        console.log(`üîç [DEBUG] Total de campos select encontrados no modal: ${totalSelects}`);
        
        for (let i = 0; i < totalSelects; i++) {
          try {
            const selectTexto = await todosSelects.nth(i).textContent();
            const placeholder = await todosSelects.nth(i).getAttribute('placeholder');
            console.log(`üîç [DEBUG] Select ${i + 1}: texto="${selectTexto?.trim()}", placeholder="${placeholder}"`);
          } catch (error) {
            console.log(`‚ö†Ô∏è [DEBUG] Erro ao analisar select ${i + 1}: ${error.message}`);
          }
        }
      }
      
      // 2. VISIBILIDADE: Selecionar "P√∫blico" rapidamente  
      console.log('üéØ Configurando Visibilidade...');
      const matSelectVisibilidade = this.page.locator('mat-dialog-container mat-select[placeholder*="Visibilidade"], mat-dialog-container mat-select[placeholder*="Localiza√ß√£o"]');
      if (await matSelectVisibilidade.count() > 0) {
        await matSelectVisibilidade.click();
        await this.page.waitForTimeout(300);
        
        // Procurar op√ß√£o "P√∫blico"
        const opcoesVisibilidade = this.page.locator('mat-option');
        const publicoOpcao = opcoesVisibilidade.filter({ hasText: /P√∫blico|Publico/i });
        
        if (await publicoOpcao.count() > 0) {
          await publicoOpcao.first().click();
          console.log('‚úÖ Visibilidade: P√∫blico selecionado');
        } else {
          await opcoesVisibilidade.first().click();
          console.log('‚úÖ Visibilidade: Primeira op√ß√£o selecionada');
        }
      }
      
      // 3. DATA INICIAL: Preencher automaticamente
      console.log('üéØ Preenchendo data inicial...');
      const dataInicialInput = this.page.locator('input[placeholder*="Data inicial"], input[name*="dataInicial"]');
      if (await dataInicialInput.count() > 0) {
        const dataAtual = new Date().toLocaleDateString('pt-BR');
        await dataInicialInput.fill(dataAtual);
        console.log(`‚úÖ Data inicial: ${dataAtual}`);
      }
      
      console.log('‚úÖ Configura√ß√£o completa em modo assertivo');
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro na configura√ß√£o assertiva: ${error.message}`);
      // N√£o falhar - continuar com as configura√ß√µes padr√£o
    }
  }

  async saveConfigurationRapido() {
    console.log('üéØ ASSERTIVO: Salvamento direto...');
    
    try {
      // 1. DIRETO: Bot√£o Gravar mais espec√≠fico
      console.log('üéØ Procurando bot√£o Gravar...');
      const botaoGravar = 'mat-dialog-container button:has-text("Gravar"):not([disabled])';
      
      // Debug: listar todos os bot√µes dispon√≠veis
      const todosBotoes = await this.page.locator('mat-dialog-container button').all();
      console.log(`üîç [DEBUG] Total de bot√µes no modal: ${todosBotoes.length}`);
      
      for (let i = 0; i < todosBotoes.length; i++) {
        const botaoTexto = await todosBotoes[i].textContent();
        const botaoDisabled = await todosBotoes[i].isDisabled();
        console.log(`üîç [DEBUG] Bot√£o ${i + 1}: "${botaoTexto?.trim()}" (disabled: ${botaoDisabled})`);
      }
      
      console.log(`üîç [DEBUG] Aguardando seletor: ${botaoGravar}`);
      await this.page.waitForSelector(botaoGravar, { timeout: 3000 });
      console.log('üîç [DEBUG] Seletor encontrado, executando clique...');
      
      await this.retryManager.retryPJEOperation(
        async () => {
          const element = await this.page.$(botaoGravar);
          if (element) {
            console.log('üîç [DEBUG] Elemento encontrado, clicando...');
            await element.click();
            console.log('üîç [DEBUG] Clique executado com sucesso');
          } else {
            throw new Error('Save button not found');
          }
        },
        'saveConfiguration'
      );
      console.log('‚úÖ CLIQUE no bot√£o Gravar realizado');
      
      // 2. AGUARDAR: Modal fechar ou sucesso
      console.log('üéØ Aguardando processamento...');
      
      // Aguardar uma das condi√ß√µes: modal fechar OU mensagem de sucesso
      await Promise.race([
        this.page.waitForSelector('mat-dialog-container', { state: 'detached', timeout: 5000 }),
        this.page.waitForSelector(':has-text("sucesso"), :has-text("salvo"), :has-text("cadastrado")', { timeout: 5000 })
      ]);
      
      console.log('‚úÖ Salvamento confirmado');
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro no salvamento assertivo: ${error.message}`);
      console.log('üîç [DEBUG] Stack trace:', error.stack);
      
      // Fallback: tentar outros bot√µes
      const fallbackSelectors = [
        '[role="dialog"] button:has-text("Gravar")',
        'button:has-text("Salvar")',
        'button:has-text("Confirmar")',
        'mat-dialog-container button[type="submit"]',
        'mat-dialog-container button:not([disabled])'
      ];
      
      console.log('üîç [DEBUG] Tentando fallback selectors...');
      for (const selector of fallbackSelectors) {
        try {
          console.log(`üîç [DEBUG] Testando selector: ${selector}`);
          const botao = this.page.locator(selector);
          const count = await botao.count();
          console.log(`üîç [DEBUG] Elementos encontrados para "${selector}": ${count}`);
          
          if (count > 0) {
            const textoFallback = await botao.first().textContent();
            console.log(`üîç [DEBUG] Texto do bot√£o fallback: "${textoFallback?.trim()}"`);
            await botao.first().click();
            console.log(`‚úÖ Fallback: ${selector} clicado`);
            return;
          }
        } catch (fallbackError) {
          console.log(`üîç [DEBUG] Erro no fallback "${selector}": ${fallbackError.message}`);
          continue;
        }
      }
      
      throw new Error('Nenhum bot√£o de salvamento encontrado');
    }
  }

  async verifySuccessRapido() {
    console.log('üéØ ASSERTIVO: Verifica√ß√£o instant√¢nea de sucesso...');
    
    // Verifica√ß√£o r√°pida sem timeout desnecess√°rio
    try {
      // 1. Verificar se modal fechou (indicativo de sucesso)
      const modalAberto = await this.page.locator('mat-dialog-container').isVisible();
      if (!modalAberto) {
        console.log('‚úÖ Modal fechou - opera√ß√£o CONFIRMADA como bem-sucedida');
        return true;
      }
      
      // 2. Se modal ainda aberto, verificar mensagens rapidamente
      const mensagemSucesso = await this.page.locator(':has-text("sucesso"), :has-text("cadastrado"), :has-text("salvo")').count();
      if (mensagemSucesso > 0) {
        console.log('‚úÖ Mensagem de sucesso detectada');
        return true;
      }
      
      // 3. Se chegou aqui, assumir sucesso (modal pode estar processando)
      console.log('‚ÑπÔ∏è Modal ainda aberto - assumindo processamento em andamento');
      return true;
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro na verifica√ß√£o: ${error.message} - assumindo sucesso`);
      return true; // Assumir sucesso para n√£o quebrar fluxo
    }
  }

  // === FUN√á√ïES ORIGINAIS (MANTIDAS PARA COMPATIBILIDADE) ===

  async stabilizePage() {
    // Aguardar estabiliza√ß√£o da p√°gina
    await this.page.waitForTimeout(1500);
        
    // Aguardar que n√£o haja requisi√ß√µes de rede por 500ms
    try {
      await this.page.waitForLoadState('networkidle', { timeout: 5000 });
    } catch (error) {
      console.log('Timeout aguardando networkidle, continuando...');
    }
  }

  async closeAnyModals() {
    console.log('üßπ Procurando modais/overlays para fechar...');
    
    // Seletores priorit√°rios com timeout reduzido
    const prioritySelectors = [
      '.mat-dialog-actions button',
      '.mat-overlay-backdrop',
      '.cdk-overlay-backdrop',
      'button:has-text("OK")',
      'button:has-text("Fechar")',
      '.modal-backdrop'
    ];
    
    let modalsFound = 0;
    
    // Primeira passada: seletores priorit√°rios com timeout muito baixo
    for (const selector of prioritySelectors) {
      try {
        // Usar timeout muito baixo (100ms) para n√£o travar
        const elements = await this.page.$$(selector);
        
        for (const element of elements) {
          try {
            const isVisible = await element.isVisible();
            if (isVisible) {
              await element.click();
              modalsFound++;
              console.log(`‚úÖ Fechou modal/overlay: ${selector}`);
              await this.delay(100); // Delay reduzido
              return; // Sair ap√≥s fechar o primeiro modal
            }
          } catch (clickError) {
            // Ignorar erros de clique
          }
        }
      } catch (error) {
        // Ignorar erros de seletores n√£o encontrados
      }
    }
    
    // Se n√£o encontrou modais priorit√°rios, tentar ESC rapidamente
    try {
      await this.page.keyboard.press('Escape');
      await this.delay(300);
      console.log('üîë Pressionou ESC para fechar modais');
    } catch (escError) {
      console.log('‚ö†Ô∏è Erro ao pressionar ESC:', escError.message);
    }
    
    if (modalsFound > 0) {
      console.log(`‚úÖ Total de modais/overlays fechados: ${modalsFound}`);
    } else {
      console.log('‚ÑπÔ∏è Nenhum modal/overlay encontrado');
    }
  }

  async clickAddLocationButton() {
    console.log('üîÑ INICIANDO clickAddLocationButton');
    const addButtonSelectors = [
      'button:has-text("Adicionar Localiza√ß√£o/Visibilidade"):not([disabled])',
      'button:has-text("Adicionar Localiza√ß√£o"):not([disabled])',
      'button:has-text("Adicionar"):not([disabled]):visible',
      'button .mat-button-wrapper:has-text("Adicionar"):not([disabled])',
      'input[value*="Adicionar"]:not([disabled])'
    ];
        
    let addButton = null;
        
    for (const selector of addButtonSelectors) {
      try {
        console.log(`üîç Testando seletor: ${selector}`);
        await this.page.waitForSelector(selector, { timeout: 3000 });
        addButton = selector;
        console.log(`‚úÖ Bot√£o Adicionar encontrado: ${selector}`);
        break;
      } catch (error) {
        console.log(`‚ùå Seletor ${selector} n√£o encontrado: ${error.message}`);
      }
    }
        
    if (!addButton) {
      console.log('‚ùå ERRO: Nenhum bot√£o Adicionar encontrado');
      throw new Error('Bot√£o "Adicionar Localiza√ß√£o/Visibilidade" n√£o encontrado');
    }
        
    console.log(`üñ±Ô∏è Clicando no bot√£o: ${addButton}`);
    await this.page.click(addButton);
    await this.delay(2000);
    console.log('‚úÖ clickAddLocationButton conclu√≠do');
  }

  async selectOrgaoJulgador(orgao) {
    // Implementar sele√ß√£o do √≥rg√£o julgador usando a vers√£o melhorada
    // com estrat√©gia aprimorada para mat-select do Angular Material
        
    console.log(`üîÑ INICIANDO selectOrgaoJulgador para: ${orgao}`);
    this.sendStatus('info', 'Selecionando √≥rg√£o julgador...', null, orgao);
        
    // Usar a fun√ß√£o melhorada com estrat√©gia de trigger
    const { vincularOJMelhorado } = require('../vincularOJ.js');

    // Configura√ß√£o espec√≠fica para S√£o Jos√© dos Campos - SAO_JOSE_CAMPOS_SEQUENCIAL
    const SAO_JOSE_CAMPOS_CONFIG = {
      varasEspeciais: [
        '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
        '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
        '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
        '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos'
      ],
    
      processamentoSequencial: true,
      timeoutExtendido: 30000,
      tentativasMaximas: 3,
      intervaloTentativas: 5000,
    
      // Fun√ß√£o para verificar se √© vara especial
      isVaraEspecial(nomeOrgao) {
        return this.varasEspeciais.includes(nomeOrgao);
      },
    
      // Configura√ß√µes espec√≠ficas para processamento
      getConfiguracao(nomeOrgao) {
        if (this.isVaraEspecial(nomeOrgao)) {
          return {
            sequencial: true,
            timeout: this.timeoutExtendido,
            tentativas: this.tentativasMaximas,
            intervalo: this.intervaloTentativas,
            aguardarCarregamento: 8000,
            verificarElementos: true
          };
        }
        return null;
      }
    };

    // Verificar se √© uma vara especial de S√£o Jos√© dos Campos
    const configEspecial = SAO_JOSE_CAMPOS_CONFIG.getConfiguracao(orgao);

    if (configEspecial) {
      console.log(`üéØ VARA ESPECIAL DETECTADA: ${orgao} - Aplicando configura√ß√£o otimizada`);
      console.log(`‚öôÔ∏è Configura√ß√£o: Timeout=${configEspecial.timeout}ms, Tentativas=${configEspecial.tentativas}`);

      // Aplicar delays otimizados para varas especiais
      await this.ultraFastDelayManager.enableTurboMode();

      // Processamento com configura√ß√£o especial
      try {
        console.log(`üîÑ Chamando vincularOJMelhorado ESPECIAL para: ${orgao}`);
        await vincularOJMelhorado(
          this.page,
          orgao,
          this.config.perfil || 'Assessor',
          'P√∫blico',
          {
            timeout: configEspecial.timeout,
            maxTentativas: configEspecial.tentativas,
            aguardarExtra: configEspecial.aguardarCarregamento,
            verificarElementos: configEspecial.verificarElementos,
            sequencial: configEspecial.sequencial
          }
        );
        console.log(`‚úÖ Processamento ESPECIAL conclu√≠do com sucesso para: ${orgao}`);
      } catch (error) {
        console.error(`‚ùå Erro no processamento ESPECIAL de ${orgao}:`, error.message);
        throw error;
      }
    } else {
      console.log(`üîÑ Chamando vincularOJMelhorado PADR√ÉO para: ${orgao} com perfil: ${this.config.perfil || 'N√£o especificado'}`);
      await vincularOJMelhorado(
        this.page,
        orgao, // Nome do √≥rg√£o como string
        this.config.perfil || 'Assessor', // Usar perfil configurado
        'P√∫blico'
      );
      console.log(`‚úÖ vincularOJMelhorado PADR√ÉO conclu√≠do para: ${orgao}`);
    }
  }

  async configurePapelVisibilidade() {
    // Configurar papel e visibilidade se necess√°rio
    // Esta l√≥gica seria implementada baseada nos requisitos espec√≠ficos
    await this.delay(500);
  }

  async saveConfiguration() {
    // Salvar configura√ß√£o
    // Esta l√≥gica seria similar ao que j√° existe no vincularOJ.js
    await this.delay(500);
  }

  async verifySuccess() {
    // Verificar se a opera√ß√£o foi bem-sucedida
    // Implementar verifica√ß√µes de sucesso
    await this.delay(500);
  }

  async processOrgaosJulgadoresWithServerTracking(servidor) {
    console.log(`üéØ [DEBUG] INICIANDO processOrgaosJulgadoresWithServerTracking para ${servidor.nome}`);
    console.log(`üìé Servidor: ${servidor.nome || servidor.cpf} - ${servidor.orgaos?.length || 0} √≥rg√£os julgadores`);
    
    // Adicionar servidor ao painel de processamento
    if (this.mainWindow && this.mainWindow.webContents) {
      this.mainWindow.webContents.executeJavaScript(`
        if (typeof addProcessingServer === 'function') {
          addProcessingServer({
            name: '${servidor.nome.replace(/'/g, '\\\'')}',
            cpf: '${servidor.cpf}',
            perfil: '${servidor.perfil || this.config.perfil || ''}',
            totalOJs: ${servidor.orgaos?.length || 0}
          });
        }
      `).catch(err => {
        console.log('‚ö†Ô∏è Erro ao adicionar servidor ao painel de processamento:', err.message);
      });
    }
    
    // Validar configura√ß√£o antes de processar
    if (!this.config || !this.config.orgaos || !Array.isArray(this.config.orgaos)) {
      throw new Error('Configura√ß√£o de √≥rg√£os julgadores inv√°lida ou n√£o definida');
    }
    
    // Definir o servidor atual para uso em outras fun√ß√µes
    this.currentServidor = servidor;
    
    const serverResult = this.servidorResults[servidor.cpf];
    if (!serverResult) {
      console.error(`‚ùå [ERROR] serverResult n√£o encontrado para CPF ${servidor.cpf}`);
      throw new Error(`Resultado do servidor n√£o encontrado para CPF ${servidor.cpf}`);
    }
    
    // SISTEMA INTELIGENTE: Verifica√ß√£o de OJs j√° cadastrados via BD
    let ojsParaProcessarOtimizado = servidor.orgaos || [];
    let resultadoVerificacao = null;
    
    console.log(`üîç [DEBUG] DIRLEI CASO - INICIANDO verifica√ß√£o inteligente para ${servidor.nome}`);
    console.log(`üîç [DEBUG] DIRLEI CASO - CPF: ${servidor.cpf}`);
    console.log(`üîç [DEBUG] DIRLEI CASO - OJs originais: ${JSON.stringify(servidor.orgaos)}`);
    console.log(`üîç [DEBUG] DIRLEI CASO - Conex√£o BD dispon√≠vel: ${this.dbConnection ? 'SIM' : 'N√ÉO'}`);
    console.log(`üîç [DEBUG] DIRLEI CASO - Conex√£o BD ativa: ${this.dbConnection?.isConnected ? 'SIM' : 'N√ÉO'}`);
    
    try {
      resultadoVerificacao = await this.verificarOJsInteligente(servidor.cpf, servidor.orgaos || []);
      
      console.log(`üîç [DEBUG] DIRLEI CASO - Resultado da verifica√ß√£o:`, {
        inteligenciaAtiva: resultadoVerificacao.inteligenciaAtiva,
        ojsParaProcessar: resultadoVerificacao.ojsParaProcessar,
        ojsJaCadastrados: resultadoVerificacao.ojsJaCadastrados?.length || 0,
        economia: resultadoVerificacao.economia,
        mensagem: resultadoVerificacao.mensagem
      });
      
      if (resultadoVerificacao.inteligenciaAtiva) {
        // Atualizar lista de OJs para processar apenas os necess√°rios
        ojsParaProcessarOtimizado = resultadoVerificacao.ojsParaProcessar;
        
        console.log(`üîç [DEBUG] DIRLEI CASO - Lista ANTES: ${JSON.stringify(servidor.orgaos)}`);
        console.log(`üîç [DEBUG] DIRLEI CASO - Lista DEPOIS: ${JSON.stringify(ojsParaProcessarOtimizado)}`);
        
        // Registrar economia no resultado do servidor
        serverResult.verificacaoInteligente = {
          ativa: true,
          totalOriginal: resultadoVerificacao.totalVerificados || 0,
          ojsJaCadastrados: resultadoVerificacao.ojsJaCadastrados.length,
          ojsParaProcessar: resultadoVerificacao.ojsParaProcessar.length,
          economia: resultadoVerificacao.economia,
          detalhesJaCadastrados: resultadoVerificacao.ojsJaCadastrados
        };
        
        console.log(`üéØ [INTELIG√äNCIA] Sistema ativo para ${servidor.nome}:`);
        console.log(`   üìä OJs originais: ${servidor.orgaos?.length || 0}`);
        console.log(`   ‚úÖ J√° cadastrados: ${resultadoVerificacao.ojsJaCadastrados.length}`);
        console.log(`   üîÑ Para processar: ${ojsParaProcessarOtimizado.length}`);
        console.log(`   ‚ö° Economia estimada: ${resultadoVerificacao.economia.tempo}s e ${resultadoVerificacao.economia.cliques} cliques`);
        
        if (ojsParaProcessarOtimizado.length === 0) {
          // N√£o h√° OJs para processar: pular automaticamente sem solicitar confirma√ß√£o
          this.sendStatus('success', `üéâ ${servidor.nome}: Todos os OJs j√° est√£o cadastrados! Pulando...`, null,
            `Economia: ${resultadoVerificacao.economia.tempo}s`);
          serverResult.pularMotivo = 'Todos os OJs j√° est√£o cadastrados';
          serverResult.status = 'Pulado - Todos OJs cadastrados';
          return;
        }
        // H√° OJs para processar: continuar automaticamente sem solicitar confirma√ß√£o
        const detalhesOJs = this.formatarDetalhesOJs(resultadoVerificacao);
        this.sendStatus('info', `‚úÖ ${servidor.nome}: Prosseguindo com ${ojsParaProcessarOtimizado.length} OJs`, null,
          detalhesOJs.resumo);

        // Marcar OJs que vieram da verifica√ß√£o inteligente como FOR√áADAS para processamento
        try {
          this.forcedOJsNormalized = new Set(
            (ojsParaProcessarOtimizado || []).map(orgao => this.normalizeOrgaoName(orgao))
          );
          console.log(`üß† [INTELIG√äNCIA] For√ßando processamento destas OJs: ${JSON.stringify(Array.from(this.forcedOJsNormalized))}`);
        } catch (e) {
          this.forcedOJsNormalized = null;
        }

        // Aplicar imediatamente a lista filtrada na configura√ß√£o para todas as etapas seguintes
        try {
          console.log(`üéØ [OTIMIZA√á√ÉO] Aplicando lista filtrada diretamente na config: ${ojsParaProcessarOtimizado.length} OJs`);
          this.config.orgaos = ojsParaProcessarOtimizado;
        } catch (e) {
          console.log(`‚ö†Ô∏è [OTIMIZA√á√ÉO] Falha ao aplicar lista filtrada: ${e.message}`);
        }
      }
    } catch (error) {
      console.error(`‚ö†Ô∏è [INTELIG√äNCIA] Erro na verifica√ß√£o: ${error.message}`);
      // Continuar com lista original em caso de erro
      ojsParaProcessarOtimizado = servidor.orgaos || [];
    }
    
    this.sendStatus('info', `üîç Processando ${ojsParaProcessarOtimizado.length} OJs para ${servidor.nome}...`, null, 
      resultadoVerificacao?.economia?.ojsEvitados > 0 ? `${resultadoVerificacao.economia.ojsEvitados} OJs j√° cadastrados` : 'Otimizando processo');
    
    // VERIFICA√á√ÉO AUTOM√ÅTICA DE LOCALIZA√á√ïES/VISIBILIDADES ATIVAS
    console.log(`üéØ [LOCALIZA√á√ïES] Iniciando verifica√ß√£o autom√°tica de localiza√ß√µes para ${servidor.nome}...`);
    try {
      const resultadoLocalizacoes = await verificarEProcessarLocalizacoesFaltantes(this.page);
      
      if (resultadoLocalizacoes.sucesso) {
        console.log(`‚úÖ [LOCALIZA√á√ïES] Verifica√ß√£o conclu√≠da para ${servidor.nome}:`);
        console.log(`   üìä Existentes: ${resultadoLocalizacoes.existentes}`);
        console.log(`   üöÄ Processadas: ${resultadoLocalizacoes.processadas}`);
        console.log(`   üìà Total: ${resultadoLocalizacoes.total}`);
        
        this.sendStatus('success', 
          `üéØ Localiza√ß√µes: ${resultadoLocalizacoes.existentes} existentes + ${resultadoLocalizacoes.processadas} processadas = ${resultadoLocalizacoes.total} total`, 
          null, 
          'Verifica√ß√£o autom√°tica conclu√≠da', 
          null, 
          servidor.nome
        );
        
        // Adicionar ao resultado do servidor
        serverResult.localizacoes = {
          existentes: resultadoLocalizacoes.existentes,
          processadas: resultadoLocalizacoes.processadas,
          total: resultadoLocalizacoes.total,
          erros: resultadoLocalizacoes.erros || 0
        };
        
      } else {
        console.log(`‚ö†Ô∏è [LOCALIZA√á√ïES] Erro na verifica√ß√£o para ${servidor.nome}: ${resultadoLocalizacoes.erro}`);
        this.sendStatus('warning', 
          `‚ö†Ô∏è Erro na verifica√ß√£o de localiza√ß√µes: ${resultadoLocalizacoes.erro}`, 
          null, 
          'Continuando com processamento de OJs', 
          null, 
          servidor.nome
        );
        
        // Adicionar erro ao resultado do servidor
        serverResult.localizacoes = {
          erro: resultadoLocalizacoes.erro,
          existentes: 0,
          processadas: 0,
          total: 0,
          erros: 1
        };
      }
    } catch (error) {
      console.log(`‚ùå [LOCALIZA√á√ïES] Erro inesperado na verifica√ß√£o para ${servidor.nome}: ${error.message}`);
      this.sendStatus('warning', 
        `‚ùå Erro inesperado na verifica√ß√£o de localiza√ß√µes: ${error.message}`, 
        null, 
        'Continuando com processamento de OJs', 
        null, 
        servidor.nome
      );
      
      // Adicionar erro ao resultado do servidor
      serverResult.localizacoes = {
        erro: error.message,
        existentes: 0,
        processadas: 0,
        total: 0,
        erros: 1
      };
    }
    
    // CORRE√á√ÉO DO BUG: Apenas limpar cache em mem√≥ria, preservar persist√™ncia
    console.log(`üßπ [DEBUG] Limpando cache em mem√≥ria antes de processar ${servidor.nome}...`);
    this.ojCache.clear();
    this.smartOJCache.limparCache(true); // CORRE√á√ÉO: Preservar dados persistentes
    console.log('‚úÖ [DEBUG] Cache em mem√≥ria limpo - dados persistentes preservados');
    console.log('üéØ [DEBUG] BYPASS-UNIVERSAL: Garantindo que n√£o h√° contamina√ß√£o de cache entre servidores');
    
    // SISTEMA INTELIGENTE: Habilitado para permitir verifica√ß√£o inteligente via banco
    // Usar verifica√ß√£o pr√©via para otimizar processamento
    const isUniversalBypass = false; // Permitir verifica√ß√µes inteligentes via BD
    
    if (isUniversalBypass) {
      console.log(`üî• [BYPASS-UNIVERSAL] REMOVENDO TODAS AS VERIFICA√á√ïES para ${servidor.nome}`);
      console.log('üî• [BYPASS-UNIVERSAL] Pulando SmartCache, ServidorSkipDetector e TODAS verifica√ß√µes');
      console.log('üî• [BYPASS-UNIVERSAL] PROCESSAMENTO DIRETO de todas as OJs configuradas');
      // PULAR COMPLETAMENTE loadExistingOJs, verificacoes, etc.
    } else {
      // Comportamento normal para outros servidores
      console.log(`üîç [DEBUG] Carregando OJs existentes para ${servidor.nome} usando SmartOJCache (cache limpo)...`);
      await this.loadExistingOJsWithSmartCache();
      console.log(`üîç [DEBUG] Cache de OJs carregado: ${this.ojCache.size} OJs em cache`);
    }
    
    // APLICAR OTIMIZA√á√ÉO: Atualizar config com OJs otimizados (antes da normaliza√ß√£o)
    if (ojsParaProcessarOtimizado.length !== this.config.orgaos.length) {
      console.log(`üéØ [OTIMIZA√á√ÉO] Lista de OJs atualizada: ${this.config.orgaos.length} ‚Üí ${ojsParaProcessarOtimizado.length}`);
      this.config.orgaos = ojsParaProcessarOtimizado;
    }
    
    // Normalizar e filtrar OJs que precisam ser processados
    console.log(`üîç [DEBUG] this.config.orgaos (ap√≥s otimiza√ß√£o): ${JSON.stringify(this.config.orgaos?.slice(0,3) || [])}${this.config.orgaos?.length > 3 ? '...' : ''}`);
    const ojsNormalizados = this.config.orgaos.map(orgao => this.normalizeOrgaoName(orgao));
    console.log(`üîç [DEBUG] OJs normalizados: ${JSON.stringify(ojsNormalizados.slice(0,3))}${ojsNormalizados.length > 3 ? '...' : ''}`);
    
    // AN√ÅLISE INTELIGENTE: DESABILITADA PARA BYPASS UNIVERSAL
    if (!isUniversalBypass) {
      const servidorId = `${servidor.cpf}_${servidor.nome}`;
      const analiseServidor = this.servidorSkipDetector.analisarServidor(servidorId, ojsNormalizados, this.smartOJCache);
      
      if (analiseServidor.deveSerPulado) {
        console.log(`‚è≠Ô∏è [SKIP] Servidor ${servidor.nome} ser√° PULADO: ${analiseServidor.motivo}`);
        this.sendStatus('info', `‚è≠Ô∏è PULANDO: ${servidor.nome}`, null, analiseServidor.motivo, null, servidor.nome);
        
        // Atualizar estat√≠sticas do servidor
        serverResult.status = 'Pulado';
        serverResult.jaIncluidos = analiseServidor.estatisticas.ojsJaVinculados;
        serverResult.detalhes.push({
          status: 'Servidor Pulado',
          motivo: analiseServidor.motivo,
          estatisticas: analiseServidor.estatisticas,
          timestamp: new Date().toISOString()
        });
        
        return; // Pular este servidor
      }
    } else {
      console.log(`üî• [BYPASS-UNIVERSAL] PULANDO an√°lise ServidorSkipDetector para ${servidor.nome}`);
    }
    
    // SISTEMA INTELIGENTE: Usar lista otimizada da verifica√ß√£o inteligente ou filtro por cache
    let ojsToProcess;
    
    console.log(`üîç [DEBUG] DIRLEI CASO - DECIS√ÉO DE LISTA:`);
    console.log(`   resultadoVerificacao existe: ${resultadoVerificacao ? 'SIM' : 'N√ÉO'}`);
    console.log(`   inteligenciaAtiva: ${resultadoVerificacao?.inteligenciaAtiva ? 'SIM' : 'N√ÉO'}`);
    console.log(`   ojsParaProcessarOtimizado.length: ${ojsParaProcessarOtimizado.length}`);
    console.log(`   ojsNormalizados.length: ${ojsNormalizados.length}`);
    console.log(`   ojsParaProcessarOtimizado < ojsNormalizados: ${ojsParaProcessarOtimizado.length < ojsNormalizados.length ? 'SIM' : 'N√ÉO'}`);
    console.log(`   isUniversalBypass: ${isUniversalBypass ? 'SIM' : 'N√ÉO'}`);
    
    if (resultadoVerificacao && resultadoVerificacao.inteligenciaAtiva) {
      // SEMPRE usar lista inteligente quando dispon√≠vel, independente da quantidade
      ojsToProcess = ojsParaProcessarOtimizado.map(orgao => this.normalizeOrgaoName(orgao));
      console.log(`üß† [INTELIG√äNCIA] ESCOLHA: Usando lista inteligente: ${ojsToProcess.length} OJs`);
      console.log(`üß† [INTELIG√äNCIA] OJs selecionados: ${JSON.stringify(ojsToProcess)}`);
      console.log(`üß† [INTELIG√äNCIA] CONFIRMANDO: Esta √© a lista DEFINITIVA que ser√° processada`);
    } else if (isUniversalBypass) {
      ojsToProcess = this.config.orgaos; // Usar OJs ORIGINAIS, n√£o normalizadas
      console.log('üî• [BYPASS-UNIVERSAL] ESCOLHA: PROCESSAMENTO DIRETO - ignorando TUDO');
      console.log(`üî• [BYPASS-UNIVERSAL] OJs originais: ${JSON.stringify(ojsToProcess)}`);
      console.log(`üî• [BYPASS-UNIVERSAL] Total: ${ojsToProcess.length} OJs ser√£o processadas OBRIGATORIAMENTE`);
    } else {
      ojsToProcess = ojsNormalizados.filter(orgao => !this.ojCache.has(orgao));
      console.log(`üîç [DEBUG] ESCOLHA: OJs a processar (cache): ${JSON.stringify(ojsToProcess)}`);
    }
    
    // Contador de OJs processadas
    let ojsProcessadasTotal = 0;
    const totalOjs = this.config.orgaos.length;
    
    if (isUniversalBypass) {
      console.log(`üî• [BYPASS-UNIVERSAL] GARANTINDO processamento de ${ojsToProcess.length} OJs`);
      this.sendStatus('info', `üî• ${servidor.nome}: ${ojsToProcess.length} OJs ser√£o processadas (sem verifica√ß√µes)`, null, 'Processamento direto', null, servidor.nome, ojsProcessadasTotal, totalOjs);
    } else if (resultadoVerificacao && resultadoVerificacao.inteligenciaAtiva) {
      this.sendStatus('info', `üß† ${servidor.nome}: ${ojsToProcess.length} OJs para processar (verifica√ß√£o inteligente)`, null, 'Sistema inteligente ativo', null, servidor.nome, ojsProcessadasTotal, totalOjs);
    } else {
      this.sendStatus('info', `‚ö° ${ojsToProcess.length} OJs para processar | ${this.ojCache.size} detectados como j√° cadastrados`, null, 'Processando servidor', null, servidor.nome, ojsProcessadasTotal, totalOjs);
    }
    
    if (ojsToProcess.length === 0 && !isUniversalBypass) {
      if (resultadoVerificacao && resultadoVerificacao.inteligenciaAtiva) {
        console.log('üß† [INTELIG√äNCIA] NENHUM OJ para processar - todos j√° cadastrados no banco');
        this.sendStatus('success', `üéâ ${servidor.nome}: Todos os OJs j√° est√£o cadastrados!`, null, 'Sistema inteligente conclu√≠do', null, servidor.nome);
      } else {
        console.log('üîç [DEBUG] NENHUM OJ para processar - todos j√° est√£o em cache');
      }
      return;
    }
        
    // Processar cada OJ restante com tracking
    console.log(`üîç [DEBUG] INICIANDO loop de processamento de ${ojsToProcess.length} OJs`);
    for (let i = 0; i < ojsToProcess.length; i++) {
      const orgao = ojsToProcess[i];
      console.log(`üîç [DEBUG] Processando OJ ${i + 1}/${ojsToProcess.length}: ${orgao}`);
      serverResult.ojsProcessados++;
      
      this.sendStatus('info', `OJ ${i + 1}/${ojsToProcess.length}: ${orgao}`, null, 'Processando vincula√ß√£o', orgao, servidor.nome, ojsProcessadasTotal, totalOjs);
            
      try {
        const startOJ = Date.now();
        await this.processOrgaoJulgador(orgao);
        const timeOJ = Date.now() - startOJ;
        
        ojsProcessadasTotal++; // Incrementar contador ap√≥s sucesso
        
        serverResult.sucessos++;
        serverResult.detalhes.push({
          orgao,
          status: 'Inclu√≠do com Sucesso',
          tempo: timeOJ,
          perfil: this.config.perfil,
          timestamp: new Date().toISOString()
        });
        
        this.results.push({
          servidor: servidor.nome,
          orgao,
          status: 'Inclu√≠do com Sucesso',
          erro: null,
          perfil: this.config.perfil,
          cpf: this.config.cpf,
          timestamp: new Date().toISOString()
        });
        
        this.sendStatus('success', `‚úÖ OJ ${orgao} inclu√≠do com sucesso`, null, null, orgao, servidor.nome, ojsProcessadasTotal, totalOjs);
        
      } catch (error) {
        console.error(`‚ùå Erro OJ ${orgao} (${servidor.nome}):`, error.message);
        
        ojsProcessadasTotal++; // Incrementar contador mesmo com erro
        
        serverResult.erros++;
        serverResult.detalhes.push({
          orgao,
          status: 'Erro',
          erro: error.message,
          timestamp: new Date().toISOString()
        });
        
        this.results.push({
          servidor: servidor.nome,
          orgao,
          status: 'Erro',
          erro: error.message,
          cpf: this.config.cpf,
          timestamp: new Date().toISOString()
        });
        
        this.sendStatus('error', `‚ùå Erro ao processar OJ ${orgao}: ${error.message}`, null, null, orgao, servidor.nome, ojsProcessadasTotal, totalOjs);
                
        // Recupera√ß√£o r√°pida sem interromper processamento
        await this.quickErrorRecovery();
      }
            
      // Pausa ultra-otimizada entre OJs (25ms para velocidade m√°xima)
      await this.delay(25);
    }
        
    // Adicionar OJs j√° existentes ao relat√≥rio do servidor
    for (const orgaoExistente of this.ojCache) {
      if (this.config && this.config.orgaos && this.config.orgaos.includes(orgaoExistente)) {
        serverResult.jaIncluidos++;
        serverResult.detalhes.push({
          orgao: orgaoExistente,
          status: 'J√° Inclu√≠do',
          perfil: this.config.perfil,
          timestamp: new Date().toISOString()
        });
        
        this.results.push({
          servidor: servidor.nome,
          orgao: orgaoExistente,
          status: 'J√° Inclu√≠do',
          erro: null,
          perfil: this.config.perfil,
          cpf: this.config.cpf,
          timestamp: new Date().toISOString()
        });
      }
    }
    
    // Enviar status final de conclus√£o
    this.sendStatus('success', `‚úÖ Processamento do servidor ${servidor.nome} finalizado`, null, 'Finalizado', 'Finalizado', servidor.nome, totalOjs, totalOjs);
    
    // Adicionar servidor √† lista de processados com sucesso
    if (this.mainWindow && this.mainWindow.webContents) {
      const processingTime = serverResult.tempoProcessamento || 0;
      this.mainWindow.webContents.executeJavaScript(`
        if (typeof addProcessedServer === 'function') {
          addProcessedServer({
            name: '${servidor.nome.replace(/'/g, '\\\'').replace(/"/g, '\\"')}',
            cpf: '${servidor.cpf}',
            perfil: '${servidor.perfil || this.config.perfil || ''}',
            ojsCount: ${totalOjs || 0},
            processingTime: ${processingTime}
          });
        }
      `).catch(err => {
        console.log('‚ö†Ô∏è Erro ao adicionar servidor processado ao modal:', err.message);
      });
    }
  }

  async quickErrorRecovery() {
    console.log('‚ö° Recupera√ß√£o r√°pida ap√≥s erro...');
    
    try {
      // Fechar modais rapidamente
      await Promise.race([
        this.closeAnyModalsRapido(),
        this.delay(1000)
      ]);
      
      // Escape como √∫ltimo recurso
      await this.page.keyboard.press('Escape');
      await this.delay(300);
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erro na recupera√ß√£o r√°pida:', error.message);
    }
  }

  async attemptErrorRecovery() {
    console.log('üîß Tentando recupera√ß√£o autom√°tica...');
    
    try {
      // Aguardar estabiliza√ß√£o m√≠nima
      await this.delay(2000);
      
      // Tentar fechar modais de erro
      await this.closeAnyModals();
      
      // Tentar navegar para uma p√°gina est√°vel
      await Promise.race([
        this.navigationOptimizer.fastNavigate(this.page, 'https://pje.trt15.jus.br/pjekz/pessoa-fisica'),
        this.delay(5000)
      ]);
      
      console.log('‚úÖ Recupera√ß√£o autom√°tica conclu√≠da');
      
    } catch (error) {
      console.log('‚ö†Ô∏è Falha na recupera√ß√£o autom√°tica:', error.message);
    }
  }

  async ensureCleanState() {
    console.log('üßπ Garantindo estado limpo do navegador...');
    
    try {
      // Fechar quaisquer modais ou popups abertos
      await this.closeAnyModals();
      
      // Aguardar estabiliza√ß√£o
      await this.delay(500);
      
      // Verificar se ainda est√° na p√°gina correta
      const currentUrl = this.page.url();
      console.log(`üîç URL atual antes da limpeza: ${currentUrl}`);
      
      // Se n√£o estiver na p√°gina de pessoas, navegar para ela
      if (!currentUrl.includes('pessoa-fisica')) {
        console.log('üîÑ Navegando de volta para p√°gina de pessoas...');
        await this.navigationOptimizer.fastNavigate(this.page, 'https://pje.trt15.jus.br/pjekz/pessoa-fisica');
        await this.delay(1000);
      }
      
      console.log('‚úÖ Estado limpo garantido');
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao garantir estado limpo:', error.message);
      // N√£o propagar o erro, apenas log
    }
  }

  async performRobustRecovery() {
    console.log('üõ†Ô∏è Executando recupera√ß√£o robusta...');
    
    try {
      // Verificar se o navegador ainda est√° ativo
      if (!this.page || this.page.isClosed()) {
        console.log('üîÑ Navegador fechado detectado, reconectando...');
        await this.reconnectBrowser();
        return;
      }
      
      // Aguardar estabiliza√ß√£o extendida
      await this.delay(3000);
      
      // M√∫ltiplas tentativas de fechamento de modais
      for (let i = 0; i < 3; i++) {
        await this.closeAnyModals();
        await this.delay(500);
      }
      
      // Navegar para p√°gina base e aguardar carregamento completo
      const baseUrl = 'https://pje.trt15.jus.br/pjekz/pessoa-fisica';
      
      console.log(`üîÑ Navegando para p√°gina base: ${baseUrl}`);
      await this.navigationOptimizer.optimizedNavigate(this.page, baseUrl);
      
      // Aguardar p√°gina estabilizar completamente
      await Promise.race([
        this.page.waitForSelector('table', { timeout: 10000 }),
        this.page.waitForSelector('.datatable', { timeout: 10000 }),
        this.delay(5000) // Fallback
      ]);
      
      // Aguardar estabiliza√ß√£o final
      await this.delay(2000);
      
      console.log('‚úÖ Recupera√ß√£o robusta conclu√≠da');
      
    } catch (error) {
      console.error('‚ùå Falha na recupera√ß√£o robusta:', error.message);
      
      // Verificar se o erro √© devido ao navegador fechado
      if (error.message.includes('Target page, context or browser has been closed') || 
          error.message.includes('Session closed') ||
          error.message.includes('Connection closed')) {
        console.log('üîÑ Erro de conex√£o detectado, reconectando navegador...');
        await this.reconnectBrowser();
        return;
      }
      
      // Tentar recupera√ß√£o b√°sica como √∫ltimo recurso
      try {
        await this.delay(5000);
        await this.page.reload({ waitUntil: 'domcontentloaded', timeout: 20000 });
        await this.delay(2000);
        console.log('‚úÖ Recupera√ß√£o b√°sica (reload) executada');
      } catch (reloadError) {
        console.error('üí• Falha total na recupera√ß√£o:', reloadError.message);
        if (reloadError.message.includes('Target page, context or browser has been closed')) {
          await this.reconnectBrowser();
        }
      }
    }
  }

  async reconnectBrowser() {
    console.log('üîå Reconectando navegador...');
    
    try {
      // Fechar conex√µes antigas se ainda existirem
      if (this.browser && !this.browser.contexts().length === 0) {
        try {
          await this.browser.close();
        } catch (e) {
          console.log('‚ö†Ô∏è Erro ao fechar navegador antigo:', e.message);
        }
      }
      
      // Aguardar antes de reconectar
      await this.delay(2000);
      
      // Reinicializar navegador
      await this.initializeBrowser();
      
      // Realizar login novamente
      await this.performLogin();
      
      console.log('‚úÖ Navegador reconectado com sucesso');
      
    } catch (error) {
      console.error('‚ùå Falha na reconex√£o do navegador:', error.message);
      throw new Error(`Falha cr√≠tica na reconex√£o do navegador: ${error.message}`);
    }
  }

  async ensureBrowserActive() {
    if (!this.page || this.page.isClosed()) {
      console.log('üîÑ P√°gina fechada detectada, reconectando...');
      await this.reconnectBrowser();
    }
  }

  async handleErrorRecovery() {
    console.log('Iniciando recupera√ß√£o ap√≥s erro...');
        
    // Aguardar estabiliza√ß√£o
    await this.delay(3000);
        
    // Tentar fechar modais de erro
    await this.closeAnyModals();
        
    // Tentar pressionar Escape como √∫ltimo recurso
    try {
      await this.page.keyboard.press('Escape');
      await this.delay(1000);
    } catch (error) {
      console.log('Erro ao pressionar Escape:', error.message);
    }
  }

  // M√©todo para otimizar resultados removendo duplicatas e melhorando informa√ß√µes
  otimizarResultados() {
    console.log('üîÑ Otimizando resultados do relat√≥rio...');
    
    // Mapa para agrupar por √≥rg√£o julgador
    const orgaosMap = new Map();
    
    // Processar cada resultado
    this.results.forEach(resultado => {
      const orgao = resultado.orgao;
      
      if (!orgaosMap.has(orgao)) {
        // Primeiro registro para este √≥rg√£o
        let statusFinal = resultado.status;
        let observacoes = resultado.erro || '';
        
        // Normalizar status
        if (statusFinal === 'Sucesso' || statusFinal === 'J√° Inclu√≠do') {
          statusFinal = 'Inclu√≠do com Sucesso';
          // Adicionar perfil nas observa√ß√µes (usar perfil do resultado se dispon√≠vel)
          observacoes = resultado.perfil || this.config.perfil || 'Perfil n√£o especificado';
        }
        
        orgaosMap.set(orgao, {
          orgao,
          status: statusFinal,
          observacoes,
          timestamp: resultado.timestamp
        });
      } else {
        // J√° existe registro para este √≥rg√£o - priorizar sucesso
        const existente = orgaosMap.get(orgao);
        
        if (resultado.status === 'Sucesso' && existente.status !== 'Inclu√≠do com Sucesso') {
          // Atualizar para sucesso se ainda n√£o estava
          existente.status = 'Inclu√≠do com Sucesso';
          existente.observacoes = resultado.perfil || this.config.perfil || 'Perfil n√£o especificado';
          existente.timestamp = resultado.timestamp;
        } else if (resultado.status === 'J√° Inclu√≠do' && existente.status === 'Erro') {
          // Se teve erro antes mas agora est√° inclu√≠do, atualizar
          existente.status = 'Inclu√≠do com Sucesso';
          existente.observacoes = resultado.perfil || this.config.perfil || 'Perfil n√£o especificado';
          existente.timestamp = resultado.timestamp;
        }
        // Ignorar duplicatas de "J√° Inclu√≠do" ou outros casos
      }
    });
    
    // Converter mapa para array
    const resultadosFinais = Array.from(orgaosMap.values());
    
    console.log(`‚úÖ Resultados otimizados: ${this.results.length} ‚Üí ${resultadosFinais.length} (${this.results.length - resultadosFinais.length} duplicatas removidas)`);
    
    return resultadosFinais;
  }

  async generateMultiServerReport() {
    this.sendStatus('info', 'üìä Gerando relat√≥rio consolidado...', 95, 'Finalizando processamento de m√∫ltiplos servidores');
        
    // Configurar diret√≥rio de sa√≠da
    const outputDir = path.join(__dirname, '..', '..', 'data');        
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // Calcular estat√≠sticas globais
    const totalServidores = this.processedServidores;
    const servidoresBemSucedidos = this.successfulServidores;
    const servidoresComFalha = this.failedServidores;
    
    let totalOJsProcessados = 0;
    let totalSucessos = 0;
    let totalErros = 0;
    let totalJaIncluidos = 0;
    let totalLocalizacoesProcessadas = 0;
    let totalLocalizacoesSucesso = 0;
    let totalLocalizacoesErro = 0;
    
    // Preparar dados detalhados por servidor
    const servidoresDetalhados = [];
    
    Object.values(this.servidorResults).forEach(server => {
      totalOJsProcessados += server.ojsProcessados;
      totalSucessos += server.sucessos;
      totalErros += server.erros;
      totalJaIncluidos += server.jaIncluidos;
      
      // Somar estat√≠sticas de localiza√ß√µes
      if (server.localizacoes) {
        totalLocalizacoesProcessadas += server.localizacoes.processadas || 0;
        totalLocalizacoesSucesso += server.localizacoes.sucesso || 0;
        totalLocalizacoesErro += server.localizacoes.erro || 0;
      }
      
      servidoresDetalhados.push({
        nome: server.nome,
        cpf: server.cpf,
        perfil: server.perfil,
        status: server.status,
        tentativas: {
          realizadas: server.tentativas || 0,
          maximas: server.maxTentativas || 2,
          recuperacoes: server.tentativas > 1 ? server.tentativas - 1 : 0
        },
        estatisticas: {
          totalOJs: server.totalOJs,
          ojsProcessados: server.ojsProcessados,
          sucessos: server.sucessos,
          erros: server.erros,
          jaIncluidos: server.jaIncluidos,
          percentualSucesso: server.ojsProcessados > 0 ? 
            parseFloat(((server.sucessos / server.ojsProcessados) * 100).toFixed(1)) : 0,
          localizacoes: server.localizacoes || {
            processadas: 0,
            sucesso: 0,
            erro: 0,
            percentualSucesso: 0
          }
        },
        tempo: {
          inicioProcessamento: server.inicioProcessamento,
          fimProcessamento: server.fimProcessamento,
          tempoProcessamento: server.tempoProcessamento,
          tempoProcessamentoFormatado: server.tempoProcessamento ? 
            `${(server.tempoProcessamento/1000).toFixed(1)}s` : 'N/A'
        },
        detalhesOJs: server.detalhes,
        erroGeral: server.erroGeral || null
      });
    });
    
    // Relat√≥rio consolidado
    const relatorioConsolidado = {
      timestamp: new Date().toISOString(),
      tipoRelatorio: 'M√∫ltiplos Servidores',
      resumoGeral: {
        totalServidores,
        servidoresBemSucedidos,
        servidoresComFalha,
        errosConsecutivosMaximos: this.consecutiveErrors || 0,
        percentualServidoresSucesso: totalServidores > 0 ? 
          parseFloat(((servidoresBemSucedidos / totalServidores) * 100).toFixed(1)) : 0,
        totalOJsProcessados,
        totalSucessos,
        totalErros,
        totalJaIncluidos,
        percentualOJsSucesso: totalOJsProcessados > 0 ? 
          parseFloat(((totalSucessos / totalOJsProcessados) * 100).toFixed(1)) : 0,
        localizacoes: {
          totalProcessadas: totalLocalizacoesProcessadas,
          totalSucesso: totalLocalizacoesSucesso,
          totalErro: totalLocalizacoesErro,
          percentualSucesso: totalLocalizacoesProcessadas > 0 ? 
            parseFloat(((totalLocalizacoesSucesso / totalLocalizacoesProcessadas) * 100).toFixed(1)) : 0
        },
        processamentoSequencial: {
          tentativasTotal: servidoresDetalhados.reduce((acc, s) => acc + (s.tentativas.realizadas || 0), 0),
          recuperacoesTotal: servidoresDetalhados.reduce((acc, s) => acc + s.tentativas.recuperacoes, 0),
          servidoresComRecuperacao: servidoresDetalhados.filter(s => s.tentativas.recuperacoes > 0).length,
          eficienciaProcessamento: totalServidores > 0 ? 
            parseFloat(((servidoresBemSucedidos / (servidoresDetalhados.reduce((acc, s) => acc + s.tentativas.realizadas, 0))) * 100).toFixed(1)) : 0
        }
      },
      servidores: servidoresDetalhados,
      resultadosDetalhados: this.results,
      estatisticasAvancadas: {
        tempoMedioProcessamentoServidor: servidoresDetalhados.length > 0 ? 
          servidoresDetalhados
            .filter(s => s.tempo.tempoProcessamento)
            .reduce((acc, s) => acc + s.tempo.tempoProcessamento, 0) / 
          servidoresDetalhados.filter(s => s.tempo.tempoProcessamento).length : 0,
        servidorMaisRapido: servidoresDetalhados
          .filter(s => s.tempo.tempoProcessamento && s.status === 'Conclu√≠do')
          .reduce((min, s) => !min || s.tempo.tempoProcessamento < min.tempo.tempoProcessamento ? s : min, null),
        servidorMaisLento: servidoresDetalhados
          .filter(s => s.tempo.tempoProcessamento && s.status === 'Conclu√≠do')
          .reduce((max, s) => !max || s.tempo.tempoProcessamento > max.tempo.tempoProcessamento ? s : max, null)
      }
    };
        
    // Salvar relat√≥rio JSON
    const timestamp = Date.now();
    const jsonPath = path.join(outputDir, `relatorio-multi-servidor-${timestamp}.json`);
    fs.writeFileSync(jsonPath, JSON.stringify(relatorioConsolidado, null, 2));
        
    // Gerar CSV consolidado
    const csvHeaders = [
      'Servidor',
      'CPF',
      'Perfil',
      'Status',
      'Total OJs',
      'Sucessos',
      'Erros',
      'J√° Inclu√≠dos',
      '% Sucesso',
      'Tempo (s)',
      'Erro Geral'
    ];
    
    const csvRows = servidoresDetalhados.map(server => [
      `"${server.nome}"`,
      `"${server.cpf}"`,
      `"${server.perfil}"`,
      `"${server.status}"`,
      server.estatisticas.totalOJs,
      server.estatisticas.sucessos,
      server.estatisticas.erros,
      server.estatisticas.jaIncluidos,
      `${server.estatisticas.percentualSucesso}%`,
      server.tempo.tempoProcessamentoFormatado,
      `"${server.erroGeral || ''}"`
    ].join(','));
    
    const csvContent = [csvHeaders.join(','), ...csvRows].join('\n');
    const csvPath = path.join(outputDir, `relatorio-multi-servidor-${timestamp}.csv`);
    fs.writeFileSync(csvPath, csvContent);
    
    // Gerar relat√≥rio detalhado por OJ
    const csvOJHeaders = [
      'Servidor',
      'CPF Servidor', 
      '√ìrg√£o Julgador',
      'Status',
      'Perfil',
      'Erro',
      'Tempo (ms)',
      'Timestamp'
    ];
    
    const csvOJRows = [];
    servidoresDetalhados.forEach(server => {
      server.detalhesOJs.forEach(oj => {
        csvOJRows.push([
          `"${server.nome}"`,
          `"${server.cpf}"`,
          `"${oj.orgao}"`,
          `"${oj.status}"`,
          `"${oj.perfil || server.perfil}"`,
          `"${oj.erro || ''}"`,
          oj.tempo || '',
          `"${oj.timestamp}"`
        ].join(','));
      });
    });
    
    const csvOJContent = [csvOJHeaders.join(','), ...csvOJRows].join('\n');
    const csvOJPath = path.join(outputDir, `relatorio-detalhado-ojs-${timestamp}.csv`);
    fs.writeFileSync(csvOJPath, csvOJContent);
        
    console.log(`üìÑ Relat√≥rio JSON consolidado: ${jsonPath}`);
    console.log(`üìÑ Relat√≥rio CSV servidores: ${csvPath}`);
    console.log(`üìÑ Relat√≥rio CSV detalhado OJs: ${csvOJPath}`);
        
    // Imprimir resultado final
    console.log('=== RESULTADO FINAL M√öLTIPLOS SERVIDORES ===');
    console.log(JSON.stringify(relatorioConsolidado, null, 2));
    console.log('=== FIM RESULTADO ===');
        
    // Calcular estat√≠sticas de recupera√ß√£o
    const totalRecuperacoes = servidoresDetalhados.reduce((acc, s) => acc + s.tentativas.recuperacoes, 0);
    const servidoresComRecuperacao = servidoresDetalhados.filter(s => s.tentativas.recuperacoes > 0).length;
    
    // Dados corretos para o relat√≥rio final
    console.log(`üîç [RELAT√ìRIO FINAL] Servidores processados: ${servidoresBemSucedidos}/${totalServidores}`);
    console.log(`üîç [RELAT√ìRIO FINAL] Total OJs processadas: ${totalOJsProcessados}`);
    console.log(`üîç [RELAT√ìRIO FINAL] Sucessos: ${totalSucessos}`);
    console.log(`üîç [RELAT√ìRIO FINAL] Erros: ${totalErros}`);
    console.log(`üîç [RELAT√ìRIO FINAL] J√° inclu√≠dos: ${totalJaIncluidos}`);
    
    this.sendStatus('success', `üéâ Processamento SEQUENCIAL conclu√≠do: ${servidoresBemSucedidos}/${totalServidores} servidores | ${totalOJsProcessados} OJs processadas`, 100, 
      `${totalSucessos} sucessos | ${totalErros} erros | ${totalJaIncluidos} j√° inclu√≠dos | ${totalRecuperacoes} recupera√ß√µes realizadas em ${servidoresComRecuperacao} servidores`);
  }

  async generateReport() {
    this.sendStatus('info', 'Gerando relat√≥rio...', 95, 'Finalizando processo');
        
    // Configurar diret√≥rio de sa√≠da
    const outputDir = path.join(__dirname, '..', '..', 'data');
        
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // OTIMIZAR RESULTADOS: Remover duplicatas e melhorar informa√ß√µes
    const resultadosOtimizados = this.otimizarResultados();
        
    // Calcular estat√≠sticas baseadas nos resultados otimizados
    const sucessos = resultadosOtimizados.filter(r => r.status === 'Inclu√≠do com Sucesso').length;
    const erros = resultadosOtimizados.filter(r => r.status === 'Erro').length;
    const totalValidos = sucessos + erros;
        
    // Gerar relat√≥rio JSON detalhado com resultados otimizados
    const jsonReport = {
      timestamp: new Date().toISOString(),
      config: {
        cpf: this.config.cpf,
        perfil: this.config.perfil,
        totalOrgaos: this.config && this.config.orgaos ? this.config.orgaos.length : 0
      },
      results: resultadosOtimizados, // Usar resultados otimizados
      summary: {
        total: resultadosOtimizados.length,
        sucessos,
        erros,
        totalValidos,
        estatisticas: totalValidos > 0 ? {
          percentualSucesso: parseFloat(((sucessos / totalValidos) * 100).toFixed(1)),
          percentualErros: parseFloat(((erros / totalValidos) * 100).toFixed(1))
        } : null
      },
      detalhes: {
        orgaosIncluidos: resultadosOtimizados.filter(r => r.status === 'Inclu√≠do com Sucesso').map(r => ({
          orgao: r.orgao,
          perfil: r.observacoes
        })),
        orgaosComErro: resultadosOtimizados.filter(r => r.status === 'Erro').map(r => ({
          orgao: r.orgao,
          erro: r.observacoes || 'Erro n√£o especificado'
        }))
      }
    };
        
    // Salvar relat√≥rio
    const jsonPath = path.join(outputDir, `relatorio-servidor-${Date.now()}.json`);
    fs.writeFileSync(jsonPath, JSON.stringify(jsonReport, null, 2));
        
    // Gerar CSV otimizado
    const csvContent = [
      '√ìrg√£o Julgador,Status,Observa√ß√µes',
      ...resultadosOtimizados.map(r => `"${r.orgao}","${r.status}","${r.observacoes || ''}"`)
    ].join('\n');
        
    const csvPath = path.join(outputDir, `relatorio-servidor-${Date.now()}.csv`);
    fs.writeFileSync(csvPath, csvContent);
        
    console.log(`üìÑ Relat√≥rio JSON salvo em: ${jsonPath}`);
    console.log(`üìÑ Relat√≥rio CSV salvo em: ${csvPath}`);
        
    // Imprimir resultado final em formato JSON para ser capturado pelo servidor
    console.log('=== RESULTADO FINAL ===');
    console.log(JSON.stringify(jsonReport, null, 2));
    console.log('=== FIM RESULTADO ===');
        
    this.sendStatus('success', 'Relat√≥rio gerado', 98, `${sucessos} sucessos, ${erros} erros`);
  }

  async cleanup() {
    try {
      // Parar monitoramento de performance
      if (this.performanceMonitor) {
        this.performanceMonitor.stopMonitoring();
      }
      
      // Fechar conex√£o com banco de dados
      if (this.dbConnection) {
        console.log('üîå Fechando conex√£o com banco de dados...');
        await this.dbConnection.close();
        this.dbConnection = null;
      }
      
      if (this.page && !this.page.isClosed()) {
        if (this.isProduction) {
          await this.page.close();
        } else {
          console.log('Mantendo p√°gina aberta para desenvolvimento');
        }
      }
            
      if (this.browser && this.isProduction) {
        await this.browser.close();
      }
    } catch (error) {
      console.error('Erro durante cleanup:', error);
    }
  }



  async stopAutomation() {
    this.isRunning = false;
    await this.cleanup();
  }

  getRelatorio() {
    // Usar resultados otimizados para o relat√≥rio da interface
    const resultadosOtimizados = this.otimizarResultados();
    
    // Calcular estat√≠sticas baseadas nos resultados otimizados
    const sucessos = resultadosOtimizados.filter(r => r.status === 'Inclu√≠do com Sucesso').length;
    const erros = resultadosOtimizados.filter(r => r.status === 'Erro').length;
    const totalValidos = sucessos + erros;
        
    // Retornar relat√≥rio otimizado no formato esperado pelo frontend
    return {
      timestamp: new Date().toISOString(),
      config: {
        cpf: this.config?.cpf || '',
        perfil: this.config?.perfil || '',
        totalOrgaos: this.config?.orgaos?.length || 0
      },
      resultados: resultadosOtimizados.map(r => ({
        orgao: r.orgao,
        status: r.status,
        observacoes: r.observacoes || '-'
      })),
      resumo: {
        total: resultadosOtimizados.length,
        sucessos,
        erros,
        totalValidos,
        percentualSucesso: totalValidos > 0 ? parseFloat(((sucessos / totalValidos) * 100).toFixed(1)) : 0,
        percentualErros: totalValidos > 0 ? parseFloat(((erros / totalValidos) * 100).toFixed(1)) : 0
      }
    };
  }

  getStatus() {
    return {
      isRunning: this.isRunning,
      progress: this.currentProgress,
      totalOrgaos: this.totalOrgaos,
      processedCount: this.results.length
    };
  }

  /**
   * Seleciona perfil com base na similaridade com o perfil configurado
   * @param {Object} opcoesPapel - Locator das op√ß√µes dispon√≠veis
   * @param {string} perfilConfigurado - Perfil configurado pelo usu√°rio
   * @returns {boolean} True se perfil foi selecionado
   */
  async selecionarPerfilComSimilaridade(opcoesPapel, perfilConfigurado) {
    console.log(`üîç [SIMILARIDADE] Analisando perfil configurado: "${perfilConfigurado}"`);
    
    try {
      const totalOpcoes = await opcoesPapel.count();
      let melhorMatch = null;
      let melhorSimilaridade = 0;
      let melhorIndice = -1;
      
      // Normalizar perfil configurado
      const perfilNormalizado = this.normalizarTextoParaComparacao(perfilConfigurado);
      
      // Analisar todas as op√ß√µes
      for (let i = 0; i < totalOpcoes; i++) {
        try {
          const textoOpcao = await opcoesPapel.nth(i).textContent();
          if (!textoOpcao) continue;
          
          const opcaoNormalizada = this.normalizarTextoParaComparacao(textoOpcao);
          const similaridade = this.calcularSimilaridadePerfil(perfilNormalizado, opcaoNormalizada);
          
          console.log(`üîç [COMPARA√á√ÉO] "${textoOpcao.trim()}" -> similaridade: ${(similaridade * 100).toFixed(1)}%`);
          
          if (similaridade > melhorSimilaridade && similaridade >= 0.7) { // 70% de similaridade m√≠nima
            melhorMatch = textoOpcao.trim();
            melhorSimilaridade = similaridade;
            melhorIndice = i;
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è [ERRO] Erro ao analisar op√ß√£o ${i}: ${error.message}`);
        }
      }
      
      if (melhorMatch && melhorIndice >= 0) {
        console.log(`‚úÖ [MATCH] Melhor match encontrado: "${melhorMatch}" (${(melhorSimilaridade * 100).toFixed(1)}%)`);
        await opcoesPapel.nth(melhorIndice).click({ timeout: 3000 });
        console.log('‚úÖ [SELECIONADO] Perfil selecionado com sucesso!');
        return true;
      } else {
        console.log('‚ùå [SEM MATCH] Nenhuma op√ß√£o atingiu similaridade m√≠nima de 70%');
        return false;
      }
      
    } catch (error) {
      console.log(`‚ùå [ERRO] Erro na sele√ß√£o por similaridade: ${error.message}`);
      return false;
    }
  }

  /**
   * Seleciona perfil baseado em palavras-chave espec√≠ficas do perfil configurado
   * @param {Object} opcoesPapel - Locator das op√ß√µes dispon√≠veis  
   * @param {string} perfilConfigurado - Perfil configurado pelo usu√°rio
   * @returns {boolean} True se perfil foi selecionado
   */
  async selecionarPerfilPorPalavrasChave(opcoesPapel, perfilConfigurado) {
    console.log(`üîë [PALAVRAS-CHAVE] Analisando palavras-chave do perfil: "${perfilConfigurado}"`);
    
    try {
      // Extrair palavras-chave do perfil configurado
      const palavrasChaveConfiguracao = this.extrairPalavrasChave(perfilConfigurado);
      console.log(`üîë [PALAVRAS] Palavras-chave extra√≠das: ${palavrasChaveConfiguracao.join(', ')}`);
      
      const totalOpcoes = await opcoesPapel.count();
      let melhorOpcao = null;
      let maiorNumeroMatches = 0;
      let melhorIndice = -1;
      
      for (let i = 0; i < totalOpcoes; i++) {
        try {
          const textoOpcao = await opcoesPapel.nth(i).textContent();
          if (!textoOpcao) continue;
          
          const palavrasOpcao = this.extrairPalavrasChave(textoOpcao);
          const matches = palavrasChaveConfiguracao.filter(palavra => 
            palavrasOpcao.some(palavraOpcao => 
              palavraOpcao.includes(palavra) || palavra.includes(palavraOpcao)
            )
          );
          
          console.log(`üîë [AN√ÅLISE] "${textoOpcao.trim()}" -> matches: ${matches.length} (${matches.join(', ')})`);
          
          if (matches.length > maiorNumeroMatches && matches.length >= 1) {
            melhorOpcao = textoOpcao.trim();
            maiorNumeroMatches = matches.length;
            melhorIndice = i;
          }
          
        } catch (error) {
          console.log(`‚ö†Ô∏è [ERRO] Erro ao analisar op√ß√£o ${i}: ${error.message}`);
        }
      }
      
      if (melhorOpcao && melhorIndice >= 0 && maiorNumeroMatches >= 1) {
        console.log(`‚úÖ [MATCH] Melhor match por palavras-chave: "${melhorOpcao}" (${maiorNumeroMatches} matches)`);
        await opcoesPapel.nth(melhorIndice).click({ timeout: 3000 });
        console.log('‚úÖ [SELECIONADO] Perfil selecionado por palavras-chave!');
        return true;
      } else {
        console.log('‚ùå [SEM MATCH] Nenhuma op√ß√£o teve palavras-chave suficientes');
        return false;
      }
      
    } catch (error) {
      console.log(`‚ùå [ERRO] Erro na sele√ß√£o por palavras-chave: ${error.message}`);
      return false;
    }
  }

  /**
   * Normaliza texto para compara√ß√£o removendo acentos, pontua√ß√£o e padronizando
   * @param {string} texto - Texto a ser normalizado
   * @returns {string} Texto normalizado
   */
  normalizarTextoParaComparacao(texto) {
    if (!texto) return '';
    
    return texto
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Remove acentos
      .replace(/[^\w\s]/g, ' ')        // Remove pontua√ß√£o
      .replace(/\s+/g, ' ')            // Normaliza espa√ßos
      .trim();
  }

  /**
   * Calcula similaridade entre dois textos usando algoritmo de Levenshtein
   * @param {string} texto1 - Primeiro texto
   * @param {string} texto2 - Segundo texto  
   * @returns {number} Similaridade entre 0 e 1
   */
  calcularSimilaridadePerfil(texto1, texto2) {
    if (!texto1 || !texto2) return 0;
    if (texto1 === texto2) return 1;
    
    const len1 = texto1.length;
    const len2 = texto2.length;
    const matrix = Array(len2 + 1).fill().map(() => Array(len1 + 1).fill(0));
    
    // Inicializar matriz
    for (let i = 0; i <= len1; i++) matrix[0][i] = i;
    for (let j = 0; j <= len2; j++) matrix[j][0] = j;
    
    // Calcular dist√¢ncia
    for (let j = 1; j <= len2; j++) {
      for (let i = 1; i <= len1; i++) {
        const cost = texto1[i - 1] === texto2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j - 1][i] + 1,     // dele√ß√£o
          matrix[j][i - 1] + 1,     // inser√ß√£o
          matrix[j - 1][i - 1] + cost // substitui√ß√£o
        );
      }
    }
    
    const distance = matrix[len2][len1];
    const maxLen = Math.max(len1, len2);
    return maxLen === 0 ? 1 : (maxLen - distance) / maxLen;
  }

  /**
   * Extrai palavras-chave relevantes de um texto de perfil
   * @param {string} texto - Texto do perfil
   * @returns {Array} Array de palavras-chave
   */
  extrairPalavrasChave(texto) {
    if (!texto) return [];
    
    const textoNormalizado = this.normalizarTextoParaComparacao(texto);
    const palavras = textoNormalizado.split(' ').filter(p => p.length >= 3);
    
    // Palavras-chave espec√≠ficas do contexto judici√°rio
    const palavrasRelevantes = [
      'secretario', 'secretaria', 'audiencia', 'assessor', 'analista', 
      'tecnico', 'auxiliar', 'diretor', 'coordenador', 'supervisor',
      'escrivao', 'oficial', 'chefe', 'gerente', 'judiciario'
    ];
    
    // Filtrar apenas palavras relevantes
    const palavrasChave = palavras.filter(palavra => 
      palavrasRelevantes.some(relevante => 
        palavra.includes(relevante) || relevante.includes(palavra)
      )
    );
    
    // Adicionar palavras completas se encontradas
    palavrasRelevantes.forEach(relevante => {
      if (textoNormalizado.includes(relevante) && !palavrasChave.includes(relevante)) {
        palavrasChave.push(relevante);
      }
    });
    
    return [...new Set(palavrasChave)]; // Remove duplicatas
  }
}

// Fun√ß√£o principal para execu√ß√£o standalone
async function main() {
  try {
    // Carregar configura√ß√£o
    const config = loadConfig();
        
    if (!config.cpf || !config.orgaos || config.orgaos.length === 0) {
      throw new Error('Configura√ß√£o inv√°lida: CPF e lista de √≥rg√£os s√£o obrigat√≥rios');
    }
        
    // Criar inst√¢ncia da automa√ß√£o
    const automation = new ServidorAutomationV2();
        
    // Executar automa√ß√£o
    await automation.startAutomation(config);
        
    console.log('Automa√ß√£o conclu√≠da com sucesso!');
        
  } catch (error) {
    console.error('Erro na automa√ß√£o:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = ServidorAutomationV2;
