const fs = require('fs');
const path = require('path');

/**
 * Script para corrigir o problema do cache de OJs de S√£o Jos√© dos Campos
 * que est√° impedindo o processamento das 2¬™, 3¬™, 4¬™ e 5¬™ Varas
 */

class SaoJoseCacheFixer {
  constructor() {
    this.orgaosFaltantes = [
      '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos', 
      '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
      '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos'
    ];
  }

  /**
   * Normaliza texto para compara√ß√£o (similar ao NormalizadorTexto)
   */
  normalizar(texto) {
    if (!texto || typeof texto !== 'string') return '';
    
    return texto
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Remove acentos
      .replace(/[^a-z0-9\s]/g, ' ') // Remove caracteres especiais
      .replace(/\s+/g, ' ') // Normaliza espa√ßos
      .trim();
  }

  /**
   * Verifica se h√° cache persistente que pode estar causando o problema
   */
  verificarCachePersistente() {
    console.log('üîç === VERIFICA√á√ÉO DE CACHE PERSISTENTE ===\n');
    
    const possiveisCaches = [
      'cache-ojs.json',
      'smart-oj-cache.json', 
      'ojs-vinculados.json',
      'data/cache-ojs.json',
      'data/smart-oj-cache.json',
      'src/cache-ojs.json'
    ];
    
    let cacheEncontrado = false;
    
    possiveisCaches.forEach(cacheFile => {
      const cachePath = path.join(__dirname, cacheFile);
      if (fs.existsSync(cachePath)) {
        cacheEncontrado = true;
        console.log(`üìÅ Cache encontrado: ${cacheFile}`);
        
        try {
          const cacheData = JSON.parse(fs.readFileSync(cachePath, 'utf8'));
          console.log(`   Tamanho: ${Object.keys(cacheData).length} entradas`);
          
          // Verificar se algum dos √≥rg√£os faltantes est√° no cache
          this.orgaosFaltantes.forEach(orgao => {
            const orgaoNormalizado = this.normalizar(orgao);
            
            // Verificar chaves diretas
            if (cacheData[orgaoNormalizado]) {
              console.log(`   ‚ö†Ô∏è  "${orgao}" encontrado no cache (normalizado)`);
              console.log(`       Status: ${JSON.stringify(cacheData[orgaoNormalizado])}`);
            }
            
            // Verificar chaves originais
            if (cacheData[orgao]) {
              console.log(`   ‚ö†Ô∏è  "${orgao}" encontrado no cache (original)`);
              console.log(`       Status: ${JSON.stringify(cacheData[orgao])}`);
            }
            
            // Buscar por similaridade
            Object.keys(cacheData).forEach(key => {
              if (key.includes('vara') && key.includes('sao jose') && 
                  (key.includes('2a') || key.includes('3a') || key.includes('4a') || key.includes('5a'))) {
                console.log(`   üîç Entrada similar: "${key}" -> ${JSON.stringify(cacheData[key])}`);
              }
            });
          });
          
        } catch (error) {
          console.log(`   ‚ùå Erro ao ler cache: ${error.message}`);
        }
        
        console.log();
      }
    });
    
    if (!cacheEncontrado) {
      console.log('‚úÖ Nenhum arquivo de cache persistente encontrado\n');
    }
    
    return cacheEncontrado;
  }

  /**
   * Limpa todos os caches encontrados
   */
  limparCaches() {
    console.log('üßπ === LIMPEZA DE CACHES ===\n');
    
    const possiveisCaches = [
      'cache-ojs.json',
      'smart-oj-cache.json', 
      'ojs-vinculados.json',
      'data/cache-ojs.json',
      'data/smart-oj-cache.json',
      'src/cache-ojs.json'
    ];
    
    let cachesLimpos = 0;
    
    possiveisCaches.forEach(cacheFile => {
      const cachePath = path.join(__dirname, cacheFile);
      if (fs.existsSync(cachePath)) {
        try {
          // Fazer backup antes de limpar
          const backupPath = cachePath + '.backup-' + Date.now();
          fs.copyFileSync(cachePath, backupPath);
          console.log(`üìã Backup criado: ${path.basename(backupPath)}`);
          
          // Limpar cache
          fs.unlinkSync(cachePath);
          console.log(`üóëÔ∏è  Cache removido: ${cacheFile}`);
          cachesLimpos++;
          
        } catch (error) {
          console.log(`‚ùå Erro ao limpar ${cacheFile}: ${error.message}`);
        }
      }
    });
    
    console.log(`\n‚úÖ Total de caches limpos: ${cachesLimpos}\n`);
    return cachesLimpos;
  }

  /**
   * Verifica configura√ß√µes que podem estar causando o problema
   */
  verificarConfiguracoes() {
    console.log('‚öôÔ∏è === VERIFICA√á√ÉO DE CONFIGURA√á√ïES ===\n');
    
    // 1. Verificar configura√ß√µes do parallel processor
    const parallelProcessorPath = path.join(__dirname, 'src/main/parallel-oj-processor.js');
    if (fs.existsSync(parallelProcessorPath)) {
      const content = fs.readFileSync(parallelProcessorPath, 'utf8');
      
      // Verificar timeout individual
      const timeoutMatch = content.match(/timeout.*?(\d+).*?segundos?/i) || 
                          content.match(/timeout.*?(\d+).*?ms/i) ||
                          content.match(/(\d+).*?timeout/i);
      
      if (timeoutMatch) {
        console.log(`‚è±Ô∏è  Timeout encontrado: ${timeoutMatch[0]}`);
      }
      
      // Verificar se h√° limite de processamento
      const limiteMatch = content.match(/limit.*?(\d+)/i) || 
                         content.match(/(\d+).*?limit/i);
      
      if (limiteMatch) {
        console.log(`üî¢ Limite encontrado: ${limiteMatch[0]}`);
      }
    }
    
    // 2. Verificar servidor skip detector
    const skipDetectorPath = path.join(__dirname, 'src/utils/servidor-skip-detector.js');
    if (fs.existsSync(skipDetectorPath)) {
      const content = fs.readFileSync(skipDetectorPath, 'utf8');
      
      console.log('üö´ Configura√ß√µes do Skip Detector:');
      
      const toleranciaMatch = content.match(/limiteTolerancia\s*=\s*([\d.]+)/);
      const minimoMatch = content.match(/limiteMinimo\s*=\s*(\d+)/);
      
      if (toleranciaMatch) {
        const tolerancia = parseFloat(toleranciaMatch[1]) * 100;
        console.log(`   Toler√¢ncia: ${tolerancia}%`);
        
        if (tolerancia >= 90) {
          console.log(`   ‚ö†Ô∏è  Toler√¢ncia muito alta (${tolerancia}%) pode estar pulando √≥rg√£os`);
        }
      }
      
      if (minimoMatch) {
        console.log(`   M√≠nimo de OJs: ${minimoMatch[1]}`);
      }
    }
    
    console.log();
  }

  /**
   * Gera script de teste para verificar processamento individual
   */
  gerarScriptTeste() {
    console.log('üß™ === GERA√á√ÉO DE SCRIPT DE TESTE ===\n');
    
    const scriptTeste = `
// Script de teste para verificar processamento individual dos √≥rg√£os faltantes
const { SmartOJCache } = require('./src/utils/smart-oj-cache');

async function testarOrgaosFaltantes() {
  const cache = new SmartOJCache();
  
  const orgaosFaltantes = [
    '2¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
    '3¬™ Vara do Trabalho de S√£o Jos√© dos Campos', 
    '4¬™ Vara do Trabalho de S√£o Jos√© dos Campos',
    '5¬™ Vara do Trabalho de S√£o Jos√© dos Campos'
  ];
  
  console.log('üß™ Testando √≥rg√£os faltantes individualmente...');
  
  for (const orgao of orgaosFaltantes) {
    console.log(\`\\nüîç Testando: \${orgao}\`);
    
    // Verificar se est√° no cache
    const resultadoCache = cache.verificarCache(orgao);
    console.log(\`   Cache: \${resultadoCache ? 'ENCONTRADO' : 'N√ÉO ENCONTRADO'}\`);
    
    if (resultadoCache) {
      console.log(\`   Status: \${JSON.stringify(resultadoCache)}\`);
    }
    
    // Verificar valida√ß√£o
    const valido = cache.validarOrgaoJulgador(orgao);
    console.log(\`   Valida√ß√£o: \${valido ? 'V√ÅLIDO' : 'INV√ÅLIDO'}\`);
  }
}

testarOrgaosFaltantes().catch(console.error);
`;
    
    const scriptPath = path.join(__dirname, 'teste-orgaos-faltantes.js');
    fs.writeFileSync(scriptPath, scriptTeste);
    
    console.log(`‚úÖ Script de teste criado: ${path.basename(scriptPath)}`);
    console.log('   Execute com: node teste-orgaos-faltantes.js\n');
    
    return scriptPath;
  }

  /**
   * Executa todas as verifica√ß√µes e corre√ß√µes
   */
  async executar() {
    console.log('üöÄ === CORRE√á√ÉO DO CACHE DE S√ÉO JOS√â DOS CAMPOS ===\n');
    
    // 1. Verificar cache persistente
    const temCache = this.verificarCachePersistente();
    
    // 2. Verificar configura√ß√µes
    this.verificarConfiguracoes();
    
    // 3. Limpar caches se encontrados
    if (temCache) {
      console.log('‚ö†Ô∏è  Caches encontrados. Deseja limpar? (Recomendado)');
      console.log('   Execute novamente com --limpar para confirmar\n');
      
      // Se argumento --limpar foi passado
      if (process.argv.includes('--limpar')) {
        this.limparCaches();
      }
    }
    
    // 4. Gerar script de teste
    this.gerarScriptTeste();
    
    // 5. Recomenda√ß√µes finais
    console.log('üí° === RECOMENDA√á√ïES FINAIS ===\n');
    console.log('1. Execute: node teste-orgaos-faltantes.js');
    console.log('2. Se caches foram encontrados, execute: node fix-sao-jose-cache.js --limpar');
    console.log('3. Tente processar novamente com processamento sequencial');
    console.log('4. Se o problema persistir, aumente o timeout individual para 120s');
    console.log('5. Considere reduzir a toler√¢ncia do skip detector para 85%\n');
  }
}

// Executar corre√ß√£o
const fixer = new SaoJoseCacheFixer();
fixer.executar().catch(console.error);